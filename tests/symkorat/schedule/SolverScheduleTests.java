package symkorat.schedule;

import static org.junit.Assert.assertEquals;

import org.junit.Test;

import symkorat.SymKorat;

public class SolverScheduleTests {
	
	private SymKorat symKorat = new SymKorat("symkorat.examples.schedule.Schedule", "10");


    @Test
    public void ScheduleSolverTest0() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest1() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,-1,-1,-1,1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest2() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,-1,-1,1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest3() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,-1,-1,-1,1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest4() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,-1,-1,1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest5() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,-1,-1,-1,1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest6() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,1,-1,-1,1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest7() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,0,-1,-1,1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest8() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,1,-1,-1,2,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest9() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,0,-1,1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest10() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,-1,1,-1,2,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest11() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,1,-1,2,-1,-1,-1,1,-1,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest12() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,-1,1,-1,2,-1,-1,-1,0,-1,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest13() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,-1,1,1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest14() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,-1,0,1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest15() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,-1,-1,1,2,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest16() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,-1,-1,1,2,-1,-1,-1,1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest17() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,-1,-1,-1,1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest18() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,-1,-1,1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest19() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,-1,-1,1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest20() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,1,-1,-1,1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest21() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,1,-1,-1,2,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest22() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,0,-1,1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest23() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,-1,1,-1,2,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest24() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,1,-1,2,-1,-1,-1,1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest25() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,1,-1,2,-1,-1,-1,1,-1,1,-1,-1,-1,-1,-1,-1,-1,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest26() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,-1,1,-1,2,-1,-1,-1,1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest27() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,-1,1,1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest28() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,-1,-1,1,2,-1,-1,-1,0,-1,1,-1,-1,-1,-1,-1,-1,-1,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest29() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,-1,-1,1,2,-1,-1,-1,1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest30() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,-1,-1,-1,1,-1,-1,1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest31() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,-1,-1,1,-1,-1,1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest32() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,-1,-1,1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest33() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest34() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,-1,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest35() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,-1,-1,1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest36() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,-1,-1,1,2,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest37() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,-1,-1,1,2,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest38() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,-1,-1,1,2,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest39() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,1,-1,1,2,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest40() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,1,-1,2,1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest41() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,1,1,2,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest42() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,1,2,3,-1,-1,-1,1,-1,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest43() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,-1,1,2,3,-1,-1,-1,0,-1,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest44() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,-1,1,2,3,-1,-1,-1,1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest45() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,-1,-1,1,2,-1,-1,1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest46() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,-1,1,2,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest47() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,1,-1,2,1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest48() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,1,-1,2,3,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest49() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,1,2,3,-1,-1,-1,1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest50() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,-1,1,2,3,-1,-1,-1,1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest51() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,-1,-1,1,2,-1,-1,1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest52() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,-1,1,2,-1,-1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest53() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,-1,1,2,-1,-1,1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest54() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,1,1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest55() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,-1,1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest56() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,-1,1,2,3,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest57() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,1,2,3,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest58() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,0,1,2,3,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest59() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,1,2,3,4,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest60() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,-1,1,2,3,-1,-1,1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest61() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,-1,1,2,3,-1,-1,1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest62() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,1,2,3,-1,-1,1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest63() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,-1,1,2,3,-1,-1,1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest64() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,1,2,3,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest65() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,-1,1,2,3,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest66() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,1,2,3,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest67() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,1,2,3,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest68() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,-1,1,2,3,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest69() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,1,2,1,3,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest70() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,1,2,3,1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest71() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,0,1,2,3,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest72() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,1,2,3,4,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest73() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,-1,1,2,3,-1,-1,1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest74() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,1,2,3,-1,-1,1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest75() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,1,2,3,-1,-1,1,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest76() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,1,2,3,-1,-1,1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest77() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,-1,1,2,3,-1,-1,1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest78() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,-1,1,2,3,-1,-1,1,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,3,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest79() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest80() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest81() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,-1,-1,1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest82() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest83() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,-1,-1,-1,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest84() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,-1,-1,1,1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest85() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,-1,-1,1,0,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest86() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,-1,-1,-1,1,2,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest87() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,-1,-1,1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest88() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,-1,-1,1,1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest89() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,-1,-1,1,0,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest90() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,-1,-1,1,2,-1,1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest91() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,-1,-1,-1,1,2,-1,1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest92() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,-1,1,2,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest93() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,-1,-1,1,2,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest94() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,-1,1,2,1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest95() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,-1,1,2,2,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest96() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,-1,1,2,0,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest97() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,-1,-1,1,2,3,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest98() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,-1,-1,1,2,3,-1,1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest99() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,-1,-1,1,2,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest100() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,-1,-1,1,2,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest101() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,-1,1,2,1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest102() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,-1,1,2,2,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest103() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,-1,1,2,3,-1,1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest104() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,1,2,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest105() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,1,2,3,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest106() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,-1,1,2,3,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest107() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,1,2,3,1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest108() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,1,2,3,3,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest109() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,1,2,3,0,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest110() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,-1,1,2,3,4,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest111() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,1,2,3,4,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest112() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,-1,1,2,3,4,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest113() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,1,2,3,1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest114() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,1,2,3,2,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest115() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,1,2,3,3,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest116() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,1,2,3,4,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest117() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,-1,1,2,3,4,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,3,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest118() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,1,2,3,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest119() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,-1,1,2,-1,-1,1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest120() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,-1,-1,1,2,-1,-1,0,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest121() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,-1,-1,1,2,-1,-1,1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest122() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,-1,1,2,-1,-1,1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest123() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,-1,1,2,-1,-1,1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest124() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,-1,1,2,-1,-1,1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest125() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,-1,-1,1,2,-1,-1,1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest126() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,1,1,2,-1,-1,1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest127() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,-1,1,2,3,-1,-1,-1,-1,-1,1,-1,-1,2,-1,-1,-1,-1,0,0,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest128() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,1,2,3,-1,-1,1,-1,-1,2,-1,-1,1,-1,-1,-1,-1,0,0,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest129() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,-1,1,2,3,-1,-1,0,-1,-1,1,-1,-1,2,-1,-1,-1,-1,0,0,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest130() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,-1,1,2,3,-1,-1,1,-1,-1,2,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest131() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,1,2,3,-1,-1,1,-1,-1,2,-1,-1,3,-1,-1,-1,-1,1,-1,-1,-1,0,0,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest132() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,1,2,3,-1,-1,1,-1,-1,2,-1,-1,3,-1,-1,-1,-1,2,-1,-1,-1,0,0,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest133() {
        assertEquals(true, symKorat.isSat("-1,-1,-1,-1,1,2,3,-1,-1,1,-1,-1,2,-1,-1,3,-1,-1,-1,-1,0,-1,-1,-1,0,0,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest134() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,1,2,3,-1,-1,1,-1,-1,2,-1,-1,3,-1,-1,-1,-1,0,1,-1,-1,0,0,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void ScheduleSolverTest135() {
        assertEquals(false, symKorat.isSat("-1,-1,-1,-1,1,2,3,-1,-1,1,-1,-1,2,-1,-1,3,-1,-1,-1,-1,0,3,-1,-1,0,0,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }
}
