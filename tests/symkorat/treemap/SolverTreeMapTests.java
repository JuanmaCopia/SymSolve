package symkorat.treemap;

import static org.junit.Assert.assertEquals;

import org.junit.Test;

import symkorat.SymKorat;

public class SolverTreeMapTests {
	
	private SymKorat symKorat = new SymKorat("symkorat.examples.treemap.TreeMap", "8");
	

    @Test
    public void TreeMapSolverTest0() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,0,-1,-1,-1,0,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,0,-1,-1,-1,4,0,2,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,-1,1,-1,-1,4,5,2,-1,-1,0,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,2,-1,-1,-1,3,-1,1,-1,-1,4,5,2,-1,-1,0,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,-1,1,-1,-1,-1,0,4,-1,-1,3,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,0,1,-1,-1,-1,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,-1,4,-1,-1,-1,0,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest8() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,0,4,-1,-1,-1,-1,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest9() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,4,5,0,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest10() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,4,-1,-1,5,4,2,-1,-1,-1,-1,-1,-1,-1,-1,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest11() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,4,5,6,-1,-1,-1,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest12() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,-1,4,-1,-1,-1,0,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest13() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,0,3,-1,-1,-1,0,4,2,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest14() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,3,1,-1,-1,4,5,2,-1,-1,-1,-1,-1,-1,-1,-1,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest15() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest16() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,0,-1,-1,-1,0,4,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest17() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,4,0,2,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest18() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,5,0,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest19() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest20() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,-1,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest21() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest22() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,-1,-1,-1,-1,4,-1,1,-1,-1,5,6,3,-1,-1,-1,-1,-1,-1,-1,0,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest23() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,5,4,-1,-1,-1,-1,-1,-1,-1,-1,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest24() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,5,2,-1,-1,-1,-1,-1,-1,-1,-1,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest25() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,5,6,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest26() {
        assertEquals(true, symKorat.isSat("1,-1,-1,0,2,-1,-1,-1,-1,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest27() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,3,-1,-1,-1,-1,-1,-1,-1,0,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest28() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,-1,-1,-1,-1,5,6,1,-1,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,4,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest29() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,-1,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,8,3,-1,-1,-1,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest30() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,4,5,4,-1,-1,-1,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest31() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,4,5,2,-1,-1,-1,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest32() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest33() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,3,-1,-1,-1,-1,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest34() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,3,-1,-1,-1,0,4,2,-1,-1,0,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest35() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,1,4,-1,-1,-1,-1,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest36() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,0,4,-1,-1,-1,2,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest37() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest38() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest39() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,1,-1,-1,-1,-1,6,0,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest40() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,4,-1,-1,-1,6,0,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest41() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,2,-1,-1,0,8,-1,-1,-1,0,1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest42() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,1,-1,-1,-1,-1,6,0,2,-1,-1,0,7,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest43() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,4,-1,-1,-1,6,0,2,-1,-1,0,7,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest44() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,0,2,-1,-1,0,8,-1,-1,-1,-1,2,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest45() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,6,0,2,-1,-1,7,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest46() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,7,-1,-1,8,0,2,-1,-1,7,0,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest47() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,6,0,2,-1,-1,7,8,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest48() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,3,-1,-1,5,0,2,-1,-1,6,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest49() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,4,2,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest50() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,6,5,2,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest51() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest52() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,3,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest53() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,2,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,7,0,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest54() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,4,-1,-1,-1,-1,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest55() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,4,4,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest56() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,1,-1,-1,-1,4,0,2,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest57() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,0,2,-1,-1,2,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest58() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,0,-1,-1,5,0,2,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest59() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,6,0,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest60() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,8,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest61() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,0,2,-1,-1,0,0,-1,-1,-1,1,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest62() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,8,0,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest63() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,8,0,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest64() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,2,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest65() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,7,-1,-1,7,0,2,-1,-1,0,8,-1,-1,-1,-1,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest66() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,0,2,-1,-1,6,3,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest67() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,1,-1,-1,-1,3,4,1,-1,-1,5,0,2,-1,-1,6,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest68() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,6,0,2,-1,-1,7,3,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest69() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,0,5,-1,-1,4,0,2,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest70() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,6,0,2,-1,-1,7,8,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest71() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,1,-1,-1,-1,6,0,2,-1,-1,7,8,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest72() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,0,2,-1,-1,6,7,1,-1,-1,0,0,3,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest73() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,4,0,1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest74() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,7,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest75() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,7,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest76() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,0,5,-1,-1,4,7,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest77() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,0,0,5,-1,-1,4,8,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest78() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest79() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,6,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest80() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest81() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,2,-1,-1,5,6,2,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest82() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,4,-1,-1,-1,-1,6,7,2,-1,-1,0,8,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest83() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,5,6,2,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest84() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,6,7,2,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest85() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,4,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest86() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,5,6,2,-1,-1,7,0,2,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest87() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest88() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,0,-1,-1,5,0,2,-1,-1,6,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest89() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,8,0,2,-1,-1,0,0,-1,-1,-1,2,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest90() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,8,0,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest91() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,4,-1,-1,-1,-1,6,0,2,-1,-1,0,7,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest92() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,6,-1,-1,-1,-1,0,7,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest93() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,0,2,-1,-1,0,8,-1,-1,-1,-1,7,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest94() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,0,2,-1,-1,0,8,-1,-1,-1,8,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest95() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,0,-1,-1,-1,3,4,1,-1,-1,5,0,2,-1,-1,6,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest96() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,2,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest97() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,4,-1,-1,5,0,2,-1,-1,6,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest98() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,0,-1,-1,5,0,2,-1,-1,6,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest99() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,0,2,-1,-1,6,0,-1,-1,-1,0,0,3,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest100() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,0,2,-1,-1,6,7,2,-1,-1,0,0,3,-1,-1,3,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest101() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,2,-1,-1,5,0,2,-1,-1,6,7,2,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest102() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,4,5,0,-1,-1,0,0,3,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest103() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,8,2,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest104() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,6,7,2,-1,-1,0,8,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest105() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,4,-1,-1,5,6,2,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest106() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,3,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest107() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,2,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest108() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,4,-1,-1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest109() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,5,0,2,-1,-1,6,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest110() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,5,-1,-1,-1,7,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest111() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,5,0,2,-1,-1,0,6,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest112() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,0,6,-1,-1,-1,0,7,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest113() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,6,-1,-1,7,0,2,-1,-1,0,8,-1,-1,-1,-1,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest114() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,5,-1,-1,7,0,2,-1,-1,0,8,-1,-1,-1,-1,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest115() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,2,-1,-1,8,0,-1,-1,-1,3,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest116() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,2,-1,-1,8,0,-1,-1,-1,0,8,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest117() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,0,0,5,-1,-1,4,0,2,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest118() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,5,-1,-1,7,0,2,-1,-1,8,0,-1,-1,-1,-1,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest119() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,0,2,-1,-1,8,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest120() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,0,2,-1,-1,8,4,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest121() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,0,2,-1,-1,6,0,-1,-1,-1,0,0,3,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest122() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,0,2,-1,-1,6,0,-1,-1,-1,0,0,3,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest123() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,0,2,-1,-1,6,7,-1,-1,-1,0,0,3,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest124() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest125() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest126() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,1,-1,-1,-1,-1,6,7,2,-1,-1,0,8,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest127() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,8,2,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest128() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,4,-1,-1,3,6,2,-1,-1,7,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest129() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest130() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest131() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,4,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest132() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,5,0,2,-1,-1,6,-1,-1,-1,-1,0,0,3,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest133() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,0,2,-1,-1,0,3,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest134() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,0,2,-1,-1,0,2,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest135() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,2,-1,-1,0,0,-1,-1,-1,0,4,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest136() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,8,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest137() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,6,0,2,-1,-1,0,7,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest138() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,1,-1,-1,-1,7,0,2,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest139() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,2,-1,-1,5,0,2,-1,-1,0,6,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest140() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,6,0,2,-1,-1,5,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest141() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,5,0,2,-1,-1,6,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest142() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,5,0,2,-1,-1,6,0,2,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest143() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,3,-1,-1,5,0,2,-1,-1,6,0,2,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest144() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,6,0,2,-1,-1,7,5,2,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest145() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,3,-1,-1,5,0,2,-1,-1,6,7,2,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest146() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,4,5,-1,-1,-1,0,0,3,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest147() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,6,3,2,-1,-1,7,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest148() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,0,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,7,0,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest149() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,2,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest150() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,2,-1,-1,0,0,-1,-1,-1,0,8,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest151() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,8,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest152() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,8,0,2,-1,-1,0,0,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest153() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,0,0,5,-1,-1,4,0,2,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest154() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,0,2,-1,-1,8,0,-1,-1,-1,8,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest155() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,6,0,2,-1,-1,7,8,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest156() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,2,-1,-1,-1,6,0,2,-1,-1,7,8,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest157() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,0,2,-1,-1,6,0,-1,-1,-1,0,0,3,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest158() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,2,-1,-1,5,0,2,-1,-1,6,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest159() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,7,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest160() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,6,7,2,-1,-1,0,8,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest161() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,0,-1,-1,-1,-1,6,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest162() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,4,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest163() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,4,0,4,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest164() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,0,2,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest165() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,6,0,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest166() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,8,0,2,-1,-1,0,0,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest167() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,7,-1,-1,8,0,2,-1,-1,0,7,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest168() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,0,2,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest169() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,4,-1,-1,3,0,2,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest170() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,6,0,2,-1,-1,7,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest171() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,3,-1,-1,-1,7,0,2,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest172() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,0,2,-1,-1,8,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest173() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,5,0,2,-1,-1,6,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest174() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,2,-1,-1,6,8,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest175() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,6,0,2,-1,-1,5,7,2,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest176() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,7,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest177() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,7,0,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest178() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest179() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,1,-1,-1,0,5,2,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest180() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,5,-1,-1,-1,-1,0,6,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest181() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,2,-1,-1,0,0,-1,-1,-1,3,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest182() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,2,-1,-1,0,0,-1,-1,-1,7,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest183() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,8,-1,-1,-1,0,0,5,-1,-1,0,4,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest184() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,2,-1,-1,0,8,-1,-1,-1,4,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest185() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,2,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest186() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,5,-1,-1,-1,0,7,2,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest187() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,1,-1,-1,-1,0,7,2,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest188() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,2,-1,-1,-1,-1,0,6,2,-1,-1,7,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest189() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,1,-1,-1,-1,-1,0,6,2,-1,-1,7,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest190() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,2,-1,-1,0,5,2,-1,-1,6,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest191() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,6,2,-1,-1,7,8,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest192() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,7,-1,-1,-1,0,0,3,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest193() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,7,3,-1,-1,0,0,3,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest194() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest195() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,0,6,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest196() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,4,-1,-1,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest197() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,8,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest198() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,1,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest199() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest200() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,6,2,-1,-1,0,8,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest201() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,4,-1,-1,-1,6,7,2,-1,-1,8,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest202() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,6,7,2,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest203() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,3,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest204() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,4,-1,-1,5,6,2,-1,-1,7,0,2,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest205() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,0,5,2,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest206() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,3,-1,-1,0,5,2,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest207() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,0,5,2,-1,-1,6,-1,-1,-1,-1,0,0,3,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest208() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,0,5,2,-1,-1,6,-1,-1,-1,-1,0,0,3,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest209() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,0,5,2,-1,-1,6,-1,-1,-1,-1,0,0,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest210() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest211() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,6,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest212() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,6,-1,-1,-1,0,7,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest213() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,2,-1,-1,0,8,-1,-1,-1,8,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest214() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,2,-1,-1,0,8,-1,-1,-1,0,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest215() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,7,2,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest216() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,7,2,-1,-1,0,8,-1,-1,-1,-1,4,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest217() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,1,-1,-1,-1,3,4,1,-1,-1,0,5,2,-1,-1,6,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest218() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,7,2,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest219() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,1,-1,-1,0,5,2,-1,-1,6,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest220() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,2,-1,-1,-1,-1,0,6,2,-1,-1,7,8,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest221() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,0,-1,-1,-1,0,0,3,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest222() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,0,6,2,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest223() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,4,5,-1,-1,-1,-1,4,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest224() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest225() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest226() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,6,5,2,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest227() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,4,8,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest228() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,-1,-1,-1,-1,0,0,5,-1,-1,8,4,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest229() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,2,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest230() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,3,-1,-1,5,6,2,-1,-1,7,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest231() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,7,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest232() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,5,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest233() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,-1,4,-1,-1,-1,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest234() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,7,2,-1,-1,0,0,-1,-1,-1,-1,6,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest235() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,7,2,-1,-1,0,0,-1,-1,-1,5,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest236() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,0,6,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest237() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,6,2,-1,-1,0,7,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest238() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,6,-1,-1,-1,0,7,2,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest239() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest240() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,7,2,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest241() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,0,-1,-1,-1,3,4,1,-1,-1,0,5,2,-1,-1,6,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest242() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,0,-1,-1,-1,4,5,2,-1,-1,-1,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest243() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,4,2,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest244() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest245() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest246() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,2,-1,-1,5,6,2,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest247() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,6,7,2,-1,-1,0,3,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest248() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,2,-1,-1,-1,6,7,2,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest249() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,5,-1,-1,-1,-1,6,7,2,-1,-1,8,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest250() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,7,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest251() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,8,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest252() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,-1,4,-1,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest253() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest254() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,0,-1,-1,0,5,2,-1,-1,6,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest255() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest256() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest257() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,8,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest258() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,8,-1,-1,0,8,2,-1,-1,0,0,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest259() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,4,-1,-1,-1,-1,-1,-1,-1,-1,0,8,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest260() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,3,-1,-1,0,5,2,-1,-1,0,6,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest261() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,0,5,-1,-1,0,4,2,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest262() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,2,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest263() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,4,-1,-1,0,5,2,-1,-1,0,6,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest264() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,3,-1,-1,-1,-1,0,6,2,-1,-1,7,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest265() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,2,-1,-1,4,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest266() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,7,2,-1,-1,8,0,-1,-1,-1,2,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest267() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,3,1,-1,-1,5,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest268() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,0,6,2,-1,-1,7,8,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest269() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,4,-1,-1,-1,0,6,2,-1,-1,7,8,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest270() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,0,2,-1,-1,0,0,3,-1,-1,4,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest271() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,7,-1,-1,-1,0,0,3,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest272() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,4,5,-1,-1,-1,5,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest273() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,0,-1,-1,5,6,2,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest274() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,4,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest275() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,4,-1,-1,-1,-1,6,7,2,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest276() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,1,-1,-1,-1,-1,6,7,2,-1,-1,8,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest277() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,0,-1,-1,5,6,2,-1,-1,7,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest278() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest279() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest280() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest281() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,2,-1,-1,-1,3,4,1,-1,-1,0,5,2,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest282() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,4,-1,-1,-1,0,7,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest283() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,2,-1,-1,0,8,2,-1,-1,0,0,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest284() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,0,5,2,-1,-1,0,6,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest285() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,2,-1,-1,-1,0,7,2,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest286() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,2,-1,-1,8,0,-1,-1,-1,1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest287() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,1,-1,-1,-1,0,7,2,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest288() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,6,2,-1,-1,7,8,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest289() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,4,-1,-1,0,5,2,-1,-1,6,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest290() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,0,-1,-1,0,5,2,-1,-1,6,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest291() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,4,5,1,-1,-1,-1,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest292() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,1,-1,-1,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest293() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,4,7,2,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest294() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest295() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,6,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest296() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,8,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest297() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,-1,4,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest298() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,-1,4,-1,-1,-1,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest299() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,0,5,2,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest300() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,0,5,2,-1,-1,6,-1,-1,-1,-1,0,0,3,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest301() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,0,5,2,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest302() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,6,2,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest303() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,8,2,-1,-1,0,0,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest304() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,8,2,-1,-1,0,0,-1,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest305() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,2,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest306() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,3,-1,-1,-1,-1,0,6,2,-1,-1,0,7,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest307() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,8,2,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest308() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,7,2,-1,-1,0,8,-1,-1,-1,-1,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest309() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,2,-1,-1,8,0,-1,-1,-1,2,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest310() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,3,-1,-1,-1,0,6,2,-1,-1,7,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest311() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,5,-1,-1,-1,0,6,2,-1,-1,7,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest312() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,0,7,2,-1,-1,8,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest313() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,7,-1,-1,-1,0,0,3,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest314() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,3,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest315() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,4,5,5,-1,-1,-1,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest316() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,1,-1,-1,-1,4,5,2,-1,-1,-1,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest317() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,2,-1,-1,-1,4,5,2,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest318() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,4,-1,-1,6,3,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest319() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,0,1,-1,-1,0,0,-1,-1,-1,4,8,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest320() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest321() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,0,-1,-1,-1,-1,6,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest322() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest323() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,2,4,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest324() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,-1,4,-1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest325() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,3,-1,-1,-1,0,4,2,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest326() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,0,5,2,-1,-1,6,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest327() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,7,2,-1,-1,0,0,-1,-1,-1,-1,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest328() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,8,2,-1,-1,0,0,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest329() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,6,2,-1,-1,0,7,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest330() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,2,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest331() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,0,1,-1,-1,0,0,5,-1,-1,0,4,2,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest332() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,6,2,-1,-1,7,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest333() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,5,-1,-1,-1,0,7,2,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest334() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,2,-1,-1,6,8,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest335() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,7,-1,-1,-1,0,0,3,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest336() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,0,0,3,-1,-1,3,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest337() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,2,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest338() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest339() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,3,-1,-1,-1,6,7,2,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest340() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,6,7,2,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest341() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,0,1,-1,-1,5,-1,-1,-1,-1,0,0,2,-1,-1,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest342() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,0,1,-1,-1,5,-1,-1,-1,-1,0,0,2,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest343() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,1,-1,-1,5,0,-1,-1,-1,0,0,2,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest344() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,1,-1,-1,4,6,1,-1,-1,7,8,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest345() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest346() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest347() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,5,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest348() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,4,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest349() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,4,-1,-1,-1,-1,-1,-1,-1,-1,0,0,2,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest350() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,0,2,-1,-1,5,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest351() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,7,-1,-1,0,0,2,-1,-1,8,0,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest352() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,2,-1,-1,7,8,-1,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest353() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,0,2,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest354() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,2,-1,-1,0,0,2,-1,-1,5,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest355() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,0,2,-1,-1,5,6,-1,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest356() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,6,0,1,-1,-1,0,0,-1,-1,-1,0,7,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest357() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,7,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest358() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,8,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest359() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,8,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest360() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,0,6,2,-1,-1,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest361() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,2,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest362() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,7,2,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest363() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,7,2,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest364() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,1,-1,-1,0,5,2,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest365() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,4,-1,-1,-1,-1,0,6,2,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest366() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,6,2,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest367() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,6,2,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest368() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,1,-1,-1,-1,0,7,2,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest369() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,6,2,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest370() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,4,-1,-1,-1,-1,0,6,2,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest371() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,0,5,2,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest372() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,0,2,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest373() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,5,0,2,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest374() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,5,0,2,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest375() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,0,2,-1,-1,0,0,-1,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest376() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,0,2,-1,-1,0,0,-1,-1,-1,3,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest377() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,8,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest378() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,4,7,-1,-1,-1,-1,-1,-1,-1,-1,8,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest379() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,3,-1,-1,-1,-1,6,0,2,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest380() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,2,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest381() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,6,0,2,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest382() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,8,0,2,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest383() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,2,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest384() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,2,-1,-1,8,0,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest385() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,0,2,-1,-1,8,0,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest386() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,3,1,-1,-1,5,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest387() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,0,2,-1,-1,6,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest388() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,0,2,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest389() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,4,5,-1,-1,-1,-1,1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest390() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,5,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest391() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,3,-1,-1,5,6,2,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest392() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,3,-1,-1,-1,-1,6,7,2,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest393() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,4,5,-1,-1,-1,-1,6,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest394() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,4,5,-1,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest395() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,4,5,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest396() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,4,5,2,-1,-1,-1,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest397() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,3,-1,-1,5,6,2,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest398() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest399() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,0,6,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest400() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,1,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest401() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,6,7,2,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest402() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,4,-1,-1,-1,-1,6,7,2,-1,-1,8,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest403() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,7,0,2,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest404() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,4,2,-1,-1,0,0,3,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest405() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,5,6,2,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest406() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest407() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest408() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,2,-1,-1,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest409() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,6,0,1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest410() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,6,5,2,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest411() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,0,-1,-1,-1,-1,0,6,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest412() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,6,2,-1,-1,8,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest413() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,2,-1,-1,-1,6,7,2,-1,-1,8,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest414() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,6,5,2,-1,-1,7,0,2,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest415() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,0,-1,-1,-1,4,5,2,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest416() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,4,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest417() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,0,5,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest418() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,3,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest419() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,5,-1,-1,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest420() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,5,-1,-1,-1,-1,6,7,2,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest421() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,5,-1,-1,-1,6,7,2,-1,-1,8,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest422() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,4,5,0,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest423() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,4,5,-1,-1,-1,-1,-1,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest424() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,4,5,-1,-1,-1,-1,-1,-1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest425() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest426() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,3,6,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest427() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest428() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,-1,6,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest429() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,-1,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest430() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,6,7,2,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest431() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,6,7,2,-1,-1,8,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest432() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,4,5,-1,-1,-1,-1,-1,-1,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest433() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,4,5,3,-1,-1,-1,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest434() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,0,1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest435() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest436() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest437() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,6,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest438() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,3,6,2,-1,-1,7,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest439() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest440() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,8,2,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest441() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,6,7,2,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest442() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,4,-1,-1,5,6,2,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest443() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest444() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,6,7,2,-1,-1,8,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest445() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,6,7,2,-1,-1,8,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest446() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest447() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,5,-1,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest448() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,-1,5,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest449() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,-1,7,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest450() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,7,-1,-1,8,7,2,-1,-1,0,0,-1,-1,-1,-1,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest451() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,5,6,2,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest452() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,3,1,-1,-1,5,0,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest453() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,4,7,2,-1,-1,8,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest454() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest455() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest456() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,0,1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest457() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,0,1,-1,-1,5,-1,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest458() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,0,1,-1,-1,5,-1,-1,-1,-1,0,0,2,-1,-1,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest459() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,1,-1,-1,5,6,6,-1,-1,0,0,2,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest460() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,0,1,-1,-1,5,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest461() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest462() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,4,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest463() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest464() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,4,-1,-1,0,0,2,-1,-1,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest465() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,0,0,2,-1,-1,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest466() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,2,-1,-1,0,7,-1,-1,-1,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest467() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,5,-1,-1,-1,0,0,2,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest468() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,2,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest469() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,0,2,-1,-1,7,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest470() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,0,2,-1,-1,7,8,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest471() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,0,2,-1,-1,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest472() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,0,-1,-1,0,0,2,-1,-1,5,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest473() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,0,0,2,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest474() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,0,2,-1,-1,5,6,2,-1,-1,3,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest475() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,0,2,-1,-1,5,6,0,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest476() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest477() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,0,5,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest478() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest479() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,8,2,-1,-1,0,0,-1,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest480() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,2,-1,-1,0,8,-1,-1,-1,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest481() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,6,2,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest482() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,0,8,2,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest483() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,2,-1,-1,-1,0,7,2,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest484() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,0,7,2,-1,-1,0,8,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest485() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,7,2,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest486() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest487() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,7,2,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest488() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,2,-1,-1,8,0,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest489() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,7,2,-1,-1,8,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest490() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,0,6,2,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest491() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,0,6,2,-1,-1,7,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest492() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest493() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest494() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest495() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,2,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest496() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,2,-1,-1,0,0,-1,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest497() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest498() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,8,0,2,-1,-1,0,0,-1,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest499() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,5,0,2,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest500() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,7,0,2,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest501() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,7,0,2,-1,-1,0,8,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest502() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,0,2,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest503() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,1,-1,-1,-1,6,0,2,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest504() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,3,-1,-1,-1,7,0,2,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest505() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,4,-1,-1,5,0,2,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest506() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,0,-1,-1,5,0,2,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest507() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,0,2,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest508() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,4,5,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest509() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,4,5,-1,-1,-1,-1,5,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest510() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest511() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,4,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest512() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest513() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,6,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest514() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,6,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest515() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,3,-1,-1,-1,4,5,2,-1,-1,-1,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest516() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,4,5,-1,-1,-1,2,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest517() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,2,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest518() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,8,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest519() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,0,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,-1,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest520() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,8,2,-1,-1,0,4,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest521() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,4,5,-1,-1,-1,-1,2,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest522() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,2,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest523() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest524() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,8,2,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest525() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,5,-1,-1,-1,6,7,2,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest526() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,4,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest527() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,5,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest528() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,2,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest529() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,6,7,2,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest530() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,5,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest531() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,2,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest532() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,2,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest533() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,4,5,-1,-1,-1,-1,-1,-1,-1,-1,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest534() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest535() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,-1,2,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest536() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,6,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest537() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,6,7,2,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest538() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,6,7,2,-1,-1,5,0,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest539() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,4,5,3,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest540() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,0,1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest541() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,2,-1,-1,-1,-1,6,7,2,-1,-1,8,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest542() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest543() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,4,5,-1,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest544() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,4,5,0,-1,-1,-1,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest545() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest546() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest547() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest548() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest549() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,4,5,4,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest550() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,0,3,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest551() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,6,7,2,-1,-1,8,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest552() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,4,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest553() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,1,-1,-1,-1,-1,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest554() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,0,1,-1,-1,5,-1,-1,-1,-1,0,0,2,-1,-1,6,0,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest555() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,0,1,-1,-1,5,-1,-1,-1,-1,0,0,2,-1,-1,6,7,-1,-1,-1,1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest556() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,1,-1,-1,5,3,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest557() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,1,-1,-1,5,1,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest558() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,1,-1,-1,5,0,4,-1,-1,0,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest559() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,1,-1,-1,5,6,1,-1,-1,0,0,2,-1,-1,5,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest560() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,0,1,-1,-1,5,6,1,-1,-1,0,0,2,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest561() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,4,-1,-1,0,0,2,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest562() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest563() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,3,-1,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest564() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,7,0,-1,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest565() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,7,0,-1,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest566() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,5,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest567() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,5,-1,-1,-1,-1,0,0,2,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest568() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,0,2,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest569() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,1,-1,-1,-1,0,0,2,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest570() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,0,2,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest571() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,0,2,-1,-1,0,7,-1,-1,-1,1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest572() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,2,-1,-1,7,0,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest573() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,2,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest574() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,4,-1,-1,0,0,2,-1,-1,7,0,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest575() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,5,-1,-1,0,0,2,-1,-1,8,0,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest576() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,0,-1,-1,0,0,2,-1,-1,8,0,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest577() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,0,2,-1,-1,5,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest578() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,2,-1,-1,7,8,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest579() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,2,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest580() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,1,-1,-1,-1,0,0,2,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest581() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,4,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest582() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,0,5,2,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest583() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,6,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest584() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,2,-1,-1,0,0,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest585() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,7,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest586() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,8,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest587() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,1,-1,-1,-1,-1,0,6,2,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest588() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,2,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest589() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,2,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest590() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,7,2,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest591() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,0,4,2,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest592() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,6,2,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest593() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,2,-1,-1,-1,-1,0,6,2,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest594() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,0,-1,-1,0,5,2,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest595() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest596() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,0,-1,-1,0,5,2,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest597() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest598() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,4,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest599() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,6,0,2,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest600() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,5,-1,-1,-1,7,0,2,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest601() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,2,-1,-1,-1,7,0,2,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest602() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,1,-1,-1,-1,-1,6,0,2,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest603() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,5,-1,-1,-1,-1,6,0,2,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest604() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,2,-1,-1,-1,-1,6,0,2,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest605() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,0,2,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,4,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest606() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,4,5,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest607() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,5,6,2,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest608() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,3,6,2,-1,-1,0,7,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest609() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,4,5,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest610() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,1,-1,-1,-1,4,5,2,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest611() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest612() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,0,5,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest613() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest614() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,6,7,2,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest615() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,4,5,4,-1,-1,-1,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest616() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest617() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,6,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest618() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,0,3,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest619() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest620() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest621() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,6,7,2,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest622() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,2,-1,-1,-1,-1,6,7,2,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest623() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,6,7,2,-1,-1,5,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest624() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,4,5,-1,-1,-1,-1,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest625() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,4,-1,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest626() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,4,5,-1,-1,-1,-1,-1,-1,-1,-1,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest627() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,4,5,5,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest628() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,3,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest629() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest630() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,4,5,-1,-1,-1,-1,-1,-1,-1,-1,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest631() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,3,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest632() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest633() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest634() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,6,2,-1,-1,8,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest635() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest636() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest637() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest638() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,0,1,-1,-1,5,-1,-1,-1,-1,0,0,2,-1,-1,6,0,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest639() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,1,-1,-1,1,-1,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest640() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,1,-1,-1,5,6,6,-1,-1,0,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest641() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,1,-1,-1,5,6,1,-1,-1,0,0,2,-1,-1,3,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest642() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,0,1,-1,-1,5,6,1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest643() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest644() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,7,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest645() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest646() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest647() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest648() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,2,-1,-1,0,7,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest649() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,2,-1,-1,0,7,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest650() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,2,-1,-1,0,7,-1,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest651() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,1,-1,-1,-1,0,0,2,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest652() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,4,-1,-1,-1,0,0,2,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest653() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,2,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest654() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,0,2,-1,-1,5,0,3,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest655() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,0,2,-1,-1,5,0,2,-1,-1,3,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest656() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,0,5,2,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest657() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,6,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest658() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest659() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,2,-1,-1,0,0,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest660() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,2,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest661() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,7,2,-1,-1,0,0,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest662() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,8,2,-1,-1,0,0,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest663() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest664() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest665() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest666() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,3,-1,-1,5,0,2,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest667() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,3,-1,-1,-1,7,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest668() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,8,0,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest669() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,0,1,-1,-1,-1,-1,-1,-1,-1,4,0,2,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest670() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,4,-1,-1,5,0,2,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest671() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,2,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest672() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,6,0,2,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest673() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,0,2,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest674() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,0,2,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest675() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,2,-1,-1,5,0,2,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest676() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,4,-1,-1,5,6,2,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest677() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest678() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,0,2,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest679() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,3,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest680() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,3,-1,-1,5,6,2,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest681() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest682() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest683() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest684() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,3,-1,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest685() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest686() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,8,7,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest687() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,3,-1,-1,-1,-1,6,7,2,-1,-1,8,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest688() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest689() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,0,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest690() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,6,5,2,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest691() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,4,0,1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest692() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,4,5,-1,-1,-1,-1,3,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest693() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest694() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,6,7,2,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest695() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,0,2,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest696() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest697() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,1,-1,-1,-1,6,7,2,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest698() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest699() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,0,1,-1,-1,5,-1,-1,-1,-1,0,0,2,-1,-1,6,0,-1,-1,-1,3,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest700() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,1,-1,-1,5,6,3,-1,-1,0,0,2,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest701() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,1,-1,-1,5,6,1,-1,-1,0,0,2,-1,-1,3,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest702() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,0,-1,-1,0,0,2,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest703() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,3,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest704() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,1,-1,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest705() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest706() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest707() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,7,0,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest708() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest709() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest710() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,1,-1,-1,-1,3,4,1,-1,-1,0,0,2,-1,-1,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest711() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,2,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest712() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,2,-1,-1,-1,0,0,2,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest713() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,1,-1,-1,-1,3,4,1,-1,-1,0,0,2,-1,-1,5,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest714() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,1,-1,-1,-1,-1,0,0,2,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest715() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,0,2,-1,-1,7,8,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest716() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,0,0,2,-1,-1,5,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest717() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,0,5,2,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest718() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,7,2,-1,-1,0,0,-1,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest719() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,8,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest720() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,4,7,-1,-1,-1,-1,-1,-1,-1,-1,0,8,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest721() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,0,4,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest722() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest723() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,4,-1,-1,-1,-1,0,6,2,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest724() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,2,-1,-1,0,8,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest725() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,2,-1,-1,0,8,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest726() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,2,-1,-1,0,8,-1,-1,-1,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest727() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest728() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,6,2,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest729() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,2,-1,-1,-1,0,6,2,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest730() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,8,2,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest731() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,2,-1,-1,6,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest732() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,0,5,2,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest733() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,4,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest734() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,0,2,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest735() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest736() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,5,-1,-1,-1,-1,6,0,2,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest737() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,2,-1,-1,0,8,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest738() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,2,-1,-1,0,8,-1,-1,-1,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest739() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,0,2,-1,-1,0,8,-1,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest740() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,2,-1,-1,8,0,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest741() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,2,-1,-1,8,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest742() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,0,4,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest743() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,6,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,-1,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest744() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,6,7,2,-1,-1,0,5,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest745() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,5,6,2,-1,-1,7,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest746() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest747() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,2,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,5,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest748() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest749() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,4,5,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest750() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest751() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,6,7,2,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest752() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,2,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,7,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest753() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,3,-1,-1,-1,6,7,2,-1,-1,8,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest754() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,4,5,-1,-1,-1,-1,-1,-1,-1,-1,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest755() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,2,-1,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest756() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,1,-1,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest757() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,-1,4,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest758() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest759() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest760() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,6,7,2,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest761() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,7,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest762() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,-1,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest763() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,1,-1,-1,-1,6,7,2,-1,-1,8,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest764() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,4,5,-1,-1,-1,3,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest765() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,5,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest766() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,8,2,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest767() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,0,4,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest768() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,7,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest769() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,0,1,-1,-1,0,0,5,-1,-1,8,4,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest770() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,2,-1,-1,5,6,2,-1,-1,7,0,2,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest771() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,4,8,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest772() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest773() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,0,1,-1,-1,5,-1,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest774() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,5,-1,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest775() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest776() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,1,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest777() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,3,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest778() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest779() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest780() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,2,-1,-1,0,8,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest781() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,1,-1,-1,-1,3,4,1,-1,-1,0,0,2,-1,-1,5,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest782() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest783() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,2,-1,-1,-1,-1,0,0,2,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest784() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,0,2,-1,-1,8,0,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest785() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,2,-1,-1,7,8,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest786() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,0,6,-1,-1,-1,7,8,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest787() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,0,2,-1,-1,7,8,-1,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest788() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,0,2,-1,-1,7,8,-1,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest789() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,0,2,-1,-1,5,0,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest790() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,0,2,-1,-1,5,0,6,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest791() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,0,8,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest792() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,7,2,-1,-1,0,0,-1,-1,-1,5,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest793() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,0,-1,-1,-1,3,4,1,-1,-1,0,5,2,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest794() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,2,-1,-1,0,8,-1,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest795() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,2,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest796() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,7,-1,-1,0,8,2,-1,-1,0,7,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest797() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,4,-1,-1,0,5,2,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest798() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,5,-1,-1,0,7,2,-1,-1,8,0,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest799() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,7,2,-1,-1,8,0,-1,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest800() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,7,2,-1,-1,6,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest801() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,0,6,2,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest802() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest803() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,5,0,2,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest804() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,5,-1,-1,-1,7,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest805() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,7,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest806() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,0,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest807() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,0,2,-1,-1,0,0,-1,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest808() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,8,0,2,-1,-1,0,0,-1,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest809() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,0,2,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest810() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,2,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest811() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,6,-1,-1,-1,7,0,2,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest812() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,5,0,2,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest813() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,2,-1,-1,-1,3,4,1,-1,-1,5,0,2,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest814() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,0,2,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest815() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,6,0,2,-1,-1,7,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest816() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest817() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest818() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,0,5,-1,-1,7,4,2,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest819() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,0,2,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest820() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest821() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest822() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest823() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,1,-1,-1,-1,-1,6,7,2,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest824() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,4,7,2,-1,-1,0,8,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest825() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,6,7,2,-1,-1,8,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest826() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,7,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,-1,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest827() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,2,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest828() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,2,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,3,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest829() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest830() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,1,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest831() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,6,7,2,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest832() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,0,-1,-1,5,6,2,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest833() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,2,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest834() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,3,-1,-1,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest835() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,-1,8,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest836() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,2,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest837() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,3,-1,-1,-1,4,5,2,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest838() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,1,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,7,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest839() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,4,-1,-1,6,3,2,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest840() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,0,3,-1,-1,-1,4,0,2,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest841() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,-1,6,-1,-1,-1,5,0,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest842() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest843() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,7,0,2,-1,-1,-1,3,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest844() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,0,-1,-1,-1,5,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest845() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,1,-1,-1,-1,-1,0,0,-1,-1,-1,6,0,2,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest846() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,6,-1,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest847() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,0,-1,-1,-1,7,0,2,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest848() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,2,-1,-1,-1,-1,6,0,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest849() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,5,-1,-1,7,0,-1,-1,-1,8,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest850() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,-1,-1,-1,8,0,2,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest851() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,6,3,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest852() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,5,-1,-1,6,0,2,-1,-1,0,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest853() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,0,-1,-1,5,6,2,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest854() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,6,7,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest855() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,4,5,-1,-1,-1,0,0,3,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest856() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,4,5,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest857() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,5,-1,-1,-1,5,6,2,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest858() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,4,-1,-1,-1,0,-1,-1,-1,5,6,2,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest859() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest860() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,0,0,6,-1,-1,0,0,-1,-1,-1,4,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest861() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,3,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest862() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,5,0,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest863() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,2,-1,-1,-1,3,4,1,-1,-1,5,0,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest864() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,3,-1,-1,-1,-1,0,6,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest865() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,0,7,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest866() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,2,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest867() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,2,-1,-1,-1,0,-1,-1,-1,5,0,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest868() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,1,-1,-1,-1,3,4,1,-1,-1,-1,0,-1,-1,-1,5,0,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest869() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,4,-1,-1,-1,5,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest870() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,3,-1,-1,-1,6,0,2,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest871() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,1,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest872() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,1,-1,-1,-1,3,4,1,-1,-1,0,0,-1,-1,-1,5,0,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest873() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,5,0,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest874() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,3,-1,-1,0,5,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest875() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,0,-1,-1,-1,3,4,1,-1,-1,0,5,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest876() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,-1,-1,-1,6,0,2,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest877() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest878() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,-1,-1,-1,8,0,2,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest879() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,-1,-1,-1,8,0,2,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest880() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,-1,-1,-1,8,0,2,-1,-1,0,2,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest881() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,7,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest882() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,4,5,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest883() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,2,-1,-1,-1,0,-1,-1,-1,5,6,2,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest884() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,0,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest885() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,2,-1,-1,-1,5,6,2,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest886() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,1,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest887() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,6,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest888() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,0,6,-1,-1,-1,5,7,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest889() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,0,6,2,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest890() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,4,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest891() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,4,4,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest892() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,5,-1,-1,-1,5,0,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest893() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,1,-1,-1,-1,5,0,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest894() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,-1,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest895() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,6,0,2,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest896() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,3,-1,-1,-1,-1,0,0,-1,-1,-1,6,0,2,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest897() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest898() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,5,-1,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest899() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,-1,3,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest900() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,-1,2,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest901() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest902() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,0,-1,-1,-1,6,0,2,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest903() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,-1,-1,-1,8,0,2,-1,-1,0,1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest904() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest905() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,7,-1,-1,-1,6,0,2,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest906() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,6,0,2,-1,-1,0,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest907() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,0,6,2,-1,-1,7,0,2,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest908() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,3,6,2,-1,-1,7,0,2,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest909() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,4,0,0,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest910() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,3,-1,-1,-1,0,-1,-1,-1,5,6,2,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest911() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,0,4,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest912() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest913() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,6,-1,-1,7,6,2,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest914() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,0,3,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest915() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,7,0,2,-1,-1,-1,7,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest916() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,3,-1,-1,0,0,-1,-1,-1,5,0,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest917() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,0,2,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest918() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,6,0,2,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest919() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest920() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,8,0,2,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest921() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,1,-1,-1,-1,7,0,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest922() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,0,-1,-1,-1,8,0,2,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest923() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,0,-1,-1,-1,8,0,2,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest924() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,0,-1,-1,-1,8,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest925() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,0,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest926() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,6,7,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest927() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,7,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest928() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,3,1,-1,-1,5,0,2,-1,-1,6,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest929() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,0,-1,-1,-1,3,4,1,-1,-1,5,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest930() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,3,5,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest931() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest932() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,4,5,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest933() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,4,5,-1,-1,-1,0,0,3,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest934() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,4,5,2,-1,-1,0,0,3,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest935() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,1,3,-1,-1,-1,4,5,2,-1,-1,0,0,3,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest936() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,7,8,2,-1,-1,7,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest937() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,1,-1,-1,-1,-1,0,0,-1,-1,-1,6,7,2,-1,-1,0,0,5,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest938() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest939() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,4,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest940() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,6,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest941() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,4,-1,-1,-1,-1,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest942() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,4,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest943() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest944() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,7,0,2,-1,-1,-1,1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest945() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,7,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,-1,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest946() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,6,0,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest947() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,4,-1,-1,-1,7,0,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest948() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,3,1,-1,-1,5,0,2,-1,-1,6,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest949() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest950() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,7,-1,-1,-1,8,0,2,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest951() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,6,7,-1,-1,-1,5,0,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest952() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,6,7,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest953() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,4,-1,-1,0,5,2,-1,-1,6,0,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest954() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,6,-1,-1,7,0,2,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest955() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,5,-1,-1,6,7,2,-1,-1,3,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest956() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,2,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest957() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,6,5,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest958() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,0,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest959() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,0,1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest960() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,6,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest961() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest962() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,5,-1,-1,6,0,-1,-1,-1,3,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest963() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,1,-1,-1,-1,-1,6,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest964() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,2,-1,-1,-1,-1,6,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest965() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,6,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest966() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest967() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,6,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest968() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,6,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest969() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,4,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest970() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,6,0,2,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest971() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest972() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,8,0,2,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest973() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,8,0,2,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest974() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,7,0,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest975() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,1,-1,-1,0,5,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest976() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest977() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,3,-1,-1,0,5,2,-1,-1,6,0,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest978() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest979() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,6,5,2,-1,-1,7,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest980() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,2,-1,-1,5,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest981() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,4,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest982() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,0,6,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest983() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,4,5,0,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest984() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,0,-1,-1,-1,0,-1,-1,-1,5,0,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest985() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,3,-1,-1,-1,5,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest986() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,1,0,-1,-1,-1,5,0,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest987() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,8,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest988() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,6,7,-1,-1,-1,8,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest989() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,5,0,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest990() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,8,0,2,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest991() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,0,-1,-1,-1,8,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest992() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,6,0,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest993() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest994() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,-1,-1,-1,8,0,2,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest995() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,7,-1,-1,-1,8,0,2,-1,-1,4,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest996() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,4,-1,-1,-1,6,7,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest997() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,-1,0,-1,-1,-1,5,6,2,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest998() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,-1,0,-1,-1,-1,6,3,2,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest999() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,7,8,2,-1,-1,2,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1000() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,3,0,-1,-1,-1,6,7,2,-1,-1,0,0,5,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1001() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,2,-1,-1,0,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1002() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,0,3,-1,-1,-1,6,7,2,-1,-1,0,0,5,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1003() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,2,-1,-1,-1,3,4,1,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1004() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,-1,4,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1005() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,5,-1,-1,-1,6,-1,-1,-1,0,3,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1006() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,3,0,-1,-1,-1,0,5,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1007() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,4,-1,-1,-1,0,0,-1,-1,-1,0,6,2,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1008() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,0,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1009() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1010() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,1,-1,-1,-1,0,0,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1011() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,0,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1012() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,5,-1,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1013() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1014() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,1,-1,-1,-1,-1,0,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1015() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,4,-1,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1016() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1017() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,6,7,-1,-1,-1,0,5,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1018() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,3,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1019() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,0,-1,-1,5,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1020() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,0,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1021() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,6,5,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1022() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,0,4,0,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1023() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,4,5,-1,-1,-1,-1,2,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1024() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,4,5,-1,-1,-1,1,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1025() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,-1,6,-1,-1,-1,3,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1026() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,6,0,1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest1027() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,2,-1,-1,-1,6,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1028() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,6,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1029() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,2,-1,-1,-1,-1,0,6,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1030() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,0,6,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1031() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,0,-1,-1,-1,0,-1,-1,-1,0,5,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1032() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,3,-1,-1,-1,-1,0,0,-1,-1,-1,0,6,2,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1033() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,0,8,2,-1,-1,3,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1034() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1035() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,3,-1,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1036() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1037() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,6,7,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1038() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,2,-1,-1,-1,3,4,1,-1,-1,5,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1039() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,2,5,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1040() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,4,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1041() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,5,-1,-1,-1,6,5,2,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1042() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,2,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1043() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1044() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,6,7,2,-1,-1,5,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1045() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,0,7,2,-1,-1,-1,5,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1046() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,0,7,2,-1,-1,-1,1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1047() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,0,7,2,-1,-1,0,5,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1048() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,0,8,2,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1049() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,6,7,1,-1,-1,0,8,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest1050() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,3,-1,-1,-1,6,0,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1051() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,1,-1,-1,-1,6,0,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1052() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,4,-1,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1053() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,6,0,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1054() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,4,0,1,-1,-1,0,0,-1,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest1055() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1056() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1057() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,2,-1,-1,-1,-1,6,7,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1058() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,3,1,-1,-1,0,5,2,-1,-1,6,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1059() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,0,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1060() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1061() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,0,-1,-1,6,7,2,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1062() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,1,4,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1063() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,0,4,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1064() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,0,7,2,-1,-1,0,7,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1065() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,0,6,2,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1066() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,5,-1,-1,0,0,-1,-1,-1,0,8,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1067() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,4,-1,-1,5,0,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1068() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,5,0,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1069() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,6,0,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1070() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,2,-1,-1,-1,-1,6,0,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1071() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1072() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,2,-1,-1,-1,6,0,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1073() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,1,-1,-1,-1,3,4,1,-1,-1,5,0,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1074() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest1075() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1076() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,0,6,2,-1,-1,0,1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1077() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1078() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,8,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1079() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,4,5,-1,-1,-1,-1,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1080() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,0,-1,-1,-1,0,-1,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1081() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,-1,6,-1,-1,-1,5,7,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1082() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,0,-1,-1,-1,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1083() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,2,-1,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1084() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1085() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,6,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1086() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,0,2,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1087() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,4,0,-1,-1,-1,0,5,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1088() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,0,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1089() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,4,7,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest1090() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,6,-1,-1,0,0,-1,-1,-1,0,7,2,-1,-1,-1,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1091() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,3,1,-1,-1,0,5,2,-1,-1,6,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1092() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,4,0,1,-1,-1,0,0,-1,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest1093() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,0,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1094() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1095() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,4,-1,-1,-1,-1,6,7,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1096() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,3,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1097() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,7,8,2,-1,-1,6,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1098() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,4,-1,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1099() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1100() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,5,-1,-1,-1,0,0,-1,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1101() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,5,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1102() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,2,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1103() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,7,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1104() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,6,8,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1105() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,2,-1,-1,-1,-1,6,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1106() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,5,0,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1107() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1108() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,7,5,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1109() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1110() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,5,-1,-1,6,0,-1,-1,-1,0,3,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1111() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,0,2,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1112() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,3,-1,-1,-1,-1,0,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1113() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,1,-1,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1114() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,0,-1,-1,0,5,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1115() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,5,-1,-1,-1,6,7,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1116() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,3,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1117() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,0,4,1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1118() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,1,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1119() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,7,8,2,-1,-1,-1,1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1120() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,6,-1,-1,6,7,2,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1121() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,0,6,2,-1,-1,7,5,2,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1122() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,-1,4,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1123() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,3,1,-1,-1,0,5,2,-1,-1,-1,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1124() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1125() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,0,7,2,-1,-1,-1,6,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1126() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,0,7,2,-1,-1,2,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1127() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,4,-1,-1,0,0,-1,-1,-1,0,5,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1128() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,6,2,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1129() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,6,2,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1130() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1131() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,7,-1,-1,0,0,-1,-1,-1,0,8,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1132() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,0,8,2,-1,-1,4,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1133() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1134() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest1135() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,1,-1,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1136() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,3,-1,-1,5,0,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1137() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1138() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1139() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1140() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,7,-1,-1,0,8,-1,-1,-1,0,7,2,-1,-1,-1,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1141() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1142() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,0,6,2,-1,-1,0,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1143() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,0,6,2,-1,-1,0,3,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1144() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,4,-1,-1,0,5,2,-1,-1,0,6,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1145() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,0,3,2,-1,-1,0,6,2,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1146() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,8,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1147() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,1,3,-1,-1,-1,4,5,2,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1148() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,3,1,-1,-1,5,6,2,-1,-1,-1,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1149() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,0,-1,-1,-1,7,6,2,-1,-1,0,0,5,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1150() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,8,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1151() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,4,-1,-1,-1,-1,6,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1152() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,0,4,1,-1,-1,5,-1,-1,-1,-1,0,0,2,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1153() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,-1,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1154() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,0,-1,-1,-1,0,0,2,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1155() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,2,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1156() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,2,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1157() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,3,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1158() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,2,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1159() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1160() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,2,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1161() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,3,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1162() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1163() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,0,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1164() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,6,-1,-1,8,0,-1,-1,-1,0,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1165() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,-1,-1,-1,0,0,2,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1166() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,-1,-1,-1,0,0,2,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1167() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,7,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1168() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,4,-1,-1,0,8,-1,-1,-1,0,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1169() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,0,-1,-1,0,8,-1,-1,-1,0,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1170() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,6,7,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1171() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,6,-1,-1,-1,7,8,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1172() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,3,-1,-1,-1,7,8,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1173() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,2,-1,-1,5,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1174() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,1,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1175() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,2,-1,-1,-1,0,0,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1176() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,0,-1,-1,-1,0,7,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1177() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,0,8,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1178() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,0,8,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1179() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,0,-1,-1,-1,-1,0,6,2,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1180() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,5,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1181() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,5,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1182() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1183() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,7,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1184() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,0,6,2,-1,-1,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1185() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,6,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1186() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,0,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1187() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,2,-1,-1,5,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1188() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,4,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1189() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,0,-1,-1,-1,3,4,1,-1,-1,-1,0,-1,-1,-1,5,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1190() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,0,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1191() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,5,-1,-1,-1,-1,0,0,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1192() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1193() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,4,-1,-1,-1,0,0,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1194() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,5,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1195() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,0,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,8,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1196() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,8,0,2,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1197() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,0,0,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1198() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,8,0,2,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1199() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,0,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1200() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,1,5,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1201() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,3,-1,-1,-1,-1,0,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1202() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,5,-1,-1,-1,0,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1203() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,7,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1204() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,7,-1,-1,-1,8,0,2,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1205() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,7,-1,-1,-1,8,0,2,-1,-1,1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1206() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,6,0,2,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1207() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1208() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,6,7,-1,-1,-1,3,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1209() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,4,5,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1210() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,4,5,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1211() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1212() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,-1,-1,-1,-1,0,0,6,-1,-1,0,0,-1,-1,-1,8,4,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1213() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1214() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,5,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1215() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,7,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1216() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,1,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1217() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,6,7,2,-1,-1,2,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1218() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,1,-1,-1,-1,3,4,1,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1219() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,4,5,-1,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1220() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,5,-1,-1,-1,0,-1,-1,-1,6,3,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1221() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,2,-1,-1,-1,-1,0,0,-1,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1222() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,5,-1,-1,-1,-1,0,0,-1,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1223() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,0,0,6,-1,-1,0,0,-1,-1,-1,8,4,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1224() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,2,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1225() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,5,-1,-1,-1,-1,6,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1226() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,6,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1227() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,0,6,2,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1228() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,1,-1,-1,6,7,2,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1229() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1230() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,5,-1,-1,-1,6,-1,-1,-1,7,3,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1231() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1232() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,7,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1233() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,0,-1,-1,0,0,-1,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1234() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,4,-1,-1,5,0,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1235() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,2,-1,-1,5,0,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1236() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,0,-1,-1,-1,6,8,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1237() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,1,-1,-1,-1,-1,0,6,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1238() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1239() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,4,5,6,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1240() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,4,5,-1,-1,-1,-1,5,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1241() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1242() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,6,0,-1,-1,-1,5,7,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1243() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,6,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1244() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,4,-1,-1,-1,6,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1245() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,3,-1,-1,5,0,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1246() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,4,5,-1,-1,-1,-1,-1,-1,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1247() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,-1,0,-1,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1248() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,0,6,-1,-1,0,0,-1,-1,-1,7,4,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1249() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,5,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1250() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,6,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1251() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1252() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,4,-1,-1,-1,-1,0,6,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1253() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,0,3,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1254() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,4,5,-1,-1,-1,-1,-1,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1255() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1256() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,4,-1,-1,-1,0,6,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1257() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1258() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,4,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest1259() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,-1,-1,-1,8,6,2,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1260() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,4,5,-1,-1,-1,4,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1261() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,1,-1,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1262() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1263() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,1,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1264() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1265() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,4,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1266() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,2,-1,-1,-1,3,4,1,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1267() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1268() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,0,4,1,-1,-1,5,-1,-1,-1,-1,0,0,2,-1,-1,6,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1269() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,0,4,1,-1,-1,5,-1,-1,-1,-1,0,0,2,-1,-1,6,0,-1,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1270() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1271() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,4,6,-1,-1,-1,-1,-1,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1272() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,0,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1273() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,0,0,2,-1,-1,5,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1274() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,0,0,2,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1275() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,5,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1276() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1277() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1278() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,0,-1,-1,-1,0,0,2,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1279() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,4,1,-1,-1,-1,-1,-1,-1,-1,8,0,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1280() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,8,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1281() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,0,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1282() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1283() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,-1,-1,-1,0,0,2,-1,-1,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1284() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,7,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1285() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,5,-1,-1,-1,6,7,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1286() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,8,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1287() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,0,-1,-1,5,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1288() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,0,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1289() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,6,7,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1290() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,0,7,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1291() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1292() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,0,0,-1,-1,-1,0,7,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1293() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,4,-1,-1,0,0,-1,-1,-1,0,8,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1294() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,8,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1295() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,6,7,1,-1,-1,0,8,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1296() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1297() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,3,-1,-1,-1,6,0,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1298() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1299() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1300() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1301() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,5,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1302() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,0,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1303() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,6,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1304() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,6,7,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1305() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,6,7,-1,-1,-1,0,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1306() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1307() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1308() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,8,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1309() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,0,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1310() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,8,0,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1311() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,0,-1,-1,-1,8,0,2,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1312() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,0,-1,-1,-1,8,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1313() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,0,-1,-1,-1,8,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1314() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,5,0,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1315() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,0,-1,-1,-1,3,4,1,-1,-1,5,0,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1316() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,5,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1317() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1318() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,7,-1,-1,0,7,-1,-1,-1,8,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1319() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,0,2,-1,-1,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1320() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,1,-1,-1,0,5,2,-1,-1,6,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1321() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,4,5,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1322() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,4,5,-1,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1323() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,7,8,2,-1,-1,1,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1324() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,0,-1,-1,-1,6,5,2,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1325() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,3,-1,-1,-1,0,0,-1,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1326() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,2,-1,-1,-1,0,0,-1,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1327() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1328() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,0,-1,-1,-1,3,4,1,-1,-1,5,0,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1329() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,2,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1330() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,2,-1,-1,0,0,-1,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1331() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,3,-1,-1,-1,-1,0,0,-1,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1332() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,0,6,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest1333() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,5,-1,-1,-1,-1,0,6,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1334() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1335() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1336() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,3,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1337() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1338() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,6,0,-1,-1,-1,7,5,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1339() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,0,3,-1,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1340() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,3,-1,-1,-1,-1,0,6,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1341() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,6,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1342() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1343() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1344() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1345() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,4,5,-1,-1,-1,-1,-1,-1,-1,-1,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1346() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,4,5,-1,-1,-1,-1,-1,-1,-1,-1,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1347() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,7,8,2,-1,-1,-1,3,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1348() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,0,4,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1349() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,4,-1,-1,-1,-1,0,0,-1,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1350() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1351() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,8,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1352() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,2,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1353() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1354() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,1,-1,-1,5,0,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1355() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,0,6,2,-1,-1,5,7,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1356() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,0,6,2,-1,-1,3,7,2,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1357() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest1358() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,2,-1,-1,-1,3,4,1,-1,-1,-1,0,-1,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1359() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,0,-1,-1,-1,3,4,1,-1,-1,-1,0,-1,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1360() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,6,-1,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest1361() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,6,0,-1,-1,-1,3,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1362() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1363() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,0,1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,4,8,2,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest1364() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,0,6,-1,-1,7,0,-1,-1,-1,8,4,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1365() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,3,-1,-1,-1,-1,6,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1366() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,1,-1,-1,-1,-1,6,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1367() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,4,5,-1,-1,-1,5,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1368() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,-1,6,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest1369() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1370() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest1371() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,1,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1372() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,0,5,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1373() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,0,4,1,-1,-1,5,-1,-1,-1,-1,0,0,2,-1,-1,6,7,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1374() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,3,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1375() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,5,-1,-1,0,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1376() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,2,-1,-1,1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1377() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,2,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1378() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,0,0,2,-1,-1,1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1379() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1380() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1381() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1382() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1383() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,8,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1384() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1385() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1386() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,6,-1,-1,-1,-1,0,0,2,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1387() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,0,0,2,-1,-1,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1388() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,7,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1389() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,4,0,1,-1,-1,0,0,-1,-1,-1,7,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1390() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,4,-1,-1,-1,0,7,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1391() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,5,-1,-1,0,8,-1,-1,-1,0,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1392() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,8,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1393() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,8,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1394() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,5,-1,-1,-1,7,8,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1395() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,8,-1,-1,-1,0,0,2,-1,-1,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1396() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,8,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1397() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1398() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,3,1,-1,-1,0,0,2,-1,-1,5,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1399() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,4,-1,-1,-1,0,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1400() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,0,-1,-1,-1,0,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1401() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1402() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,0,7,2,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1403() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,4,-1,-1,-1,0,0,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1404() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,5,-1,-1,-1,0,0,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1405() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,0,8,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1406() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,6,7,-1,-1,-1,0,8,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1407() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,1,-1,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1408() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1409() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,1,-1,-1,5,0,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1410() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,0,-1,-1,5,0,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1411() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,0,3,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1412() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,4,-1,-1,-1,0,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1413() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1414() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1415() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1416() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1417() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,0,5,2,-1,-1,0,6,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1418() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,6,7,2,-1,-1,0,3,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1419() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1420() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1421() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1422() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,4,0,1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1423() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1424() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,8,0,2,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1425() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,8,0,2,-1,-1,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1426() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,8,0,2,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1427() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,8,0,2,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1428() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,0,-1,-1,-1,8,0,2,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1429() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,0,-1,-1,-1,8,0,2,-1,-1,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1430() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,7,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1431() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,2,-1,-1,0,5,2,-1,-1,6,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1432() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,0,-1,-1,-1,3,4,1,-1,-1,0,5,2,-1,-1,6,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1433() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,4,5,4,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1434() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,7,8,2,-1,-1,7,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1435() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1436() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1437() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,6,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1438() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest1439() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,6,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1440() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,5,7,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1441() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,7,8,2,-1,-1,4,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1442() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,0,0,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1443() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,2,-1,-1,-1,3,4,1,-1,-1,5,0,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1444() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,7,-1,-1,-1,6,8,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1445() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,4,5,-1,-1,-1,-1,-1,-1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1446() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,4,5,-1,-1,-1,-1,4,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1447() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,4,5,-1,-1,-1,-1,3,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1448() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1449() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1450() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,3,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1451() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,6,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1452() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,0,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1453() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,4,5,-1,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1454() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,0,-1,-1,-1,3,5,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1455() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1456() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,0,1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1457() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,4,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1458() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,0,5,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1459() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,6,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1460() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,4,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1461() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,5,-1,-1,0,0,-1,-1,-1,6,3,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1462() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1463() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,1,-1,-1,-1,0,-1,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1464() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,0,-1,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1465() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1466() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,6,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1467() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,5,-1,-1,6,0,-1,-1,-1,7,3,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1468() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,0,-1,-1,5,0,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1469() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,0,6,-1,-1,0,7,-1,-1,-1,8,4,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1470() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,6,7,2,-1,-1,1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1471() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1472() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,0,4,1,-1,-1,5,-1,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1473() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,0,4,1,-1,-1,5,-1,-1,-1,-1,0,0,2,-1,-1,6,7,-1,-1,-1,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1474() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1475() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1476() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,4,6,1,-1,-1,7,8,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1477() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,-1,5,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1478() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,3,-1,-1,-1,5,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1479() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1480() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,7,0,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1481() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1482() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,0,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1483() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,7,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1484() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1485() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1486() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,3,1,-1,-1,0,0,2,-1,-1,5,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1487() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,6,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1488() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1489() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,3,-1,-1,-1,0,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1490() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,8,-1,-1,0,8,-1,-1,-1,0,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1491() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,4,-1,-1,-1,-1,6,7,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1492() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,0,-1,-1,-1,-1,0,0,2,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1493() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,3,-1,-1,-1,-1,6,7,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1494() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,8,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1495() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,8,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1496() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,0,-1,-1,0,5,2,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1497() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,0,-1,-1,-1,0,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1498() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,3,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1499() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1500() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,4,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1501() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,0,-1,-1,-1,0,7,2,-1,-1,4,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1502() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,0,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1503() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,2,-1,-1,-1,-1,6,0,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1504() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,4,-1,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1505() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1506() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1507() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1508() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,5,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1509() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,5,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1510() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,4,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1511() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,4,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1512() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,1,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1513() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,7,0,2,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1514() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,4,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1515() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1516() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1517() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,6,7,-1,-1,-1,8,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1518() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,1,-1,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1519() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1520() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,5,-1,-1,-1,-1,6,0,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1521() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,1,-1,-1,-1,3,4,1,-1,-1,5,0,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1522() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,1,-1,-1,-1,-1,0,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1523() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,1,-1,-1,-1,3,4,1,-1,-1,5,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1524() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,6,0,2,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1525() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,1,-1,-1,-1,3,4,1,-1,-1,0,5,2,-1,-1,6,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1526() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,1,-1,-1,-1,-1,0,0,-1,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1527() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,4,5,2,-1,-1,-1,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1528() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,3,-1,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1529() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,3,-1,-1,-1,0,-1,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1530() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,-1,0,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1531() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1532() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,0,-1,-1,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1533() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,6,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest1534() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,4,5,-1,-1,-1,-1,6,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1535() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,4,5,4,-1,-1,-1,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1536() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,0,2,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1537() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,6,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1538() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,0,6,-1,-1,-1,5,7,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1539() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,6,7,2,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1540() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,4,5,2,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1541() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,-1,0,-1,-1,-1,6,5,2,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1542() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,7,8,2,-1,-1,5,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1543() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,6,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1544() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,0,1,-1,-1,0,0,6,-1,-1,0,0,-1,-1,-1,8,4,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1545() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,8,6,2,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1546() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,7,8,2,-1,-1,-1,4,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1547() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,1,-1,-1,-1,0,0,-1,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1548() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,4,5,3,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1549() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,0,0,-1,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1550() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1551() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,4,5,0,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1552() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,0,0,-1,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1553() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,4,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest1554() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,1,-1,-1,-1,3,4,1,-1,-1,5,0,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1555() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,5,-1,-1,0,6,-1,-1,-1,7,3,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1556() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,3,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1557() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,0,4,1,-1,-1,5,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1558() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,0,4,1,-1,-1,5,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1559() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1560() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,6,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1561() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,0,0,2,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1562() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,1,5,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1563() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,5,-1,-1,-1,0,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1564() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,4,7,-1,-1,-1,-1,-1,-1,-1,-1,0,8,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1565() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,7,-1,-1,-1,0,0,2,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1566() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,7,-1,-1,-1,0,0,2,-1,-1,1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1567() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,8,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1568() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,4,-1,-1,5,6,2,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1569() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1570() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,3,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1571() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,2,-1,-1,-1,0,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1572() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1573() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,0,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1574() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,0,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1575() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,0,8,2,-1,-1,5,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1576() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,0,8,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1577() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,3,1,-1,-1,0,5,2,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1578() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,3,-1,-1,-1,-1,6,0,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1579() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1580() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1581() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,2,-1,-1,-1,3,4,1,-1,-1,5,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1582() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,6,7,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1583() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,0,6,2,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1584() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,5,6,2,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1585() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1586() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1587() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,3,-1,-1,-1,-1,6,0,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1588() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,1,-1,-1,-1,7,0,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1589() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1590() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,2,-1,-1,-1,-1,0,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1591() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,4,-1,-1,-1,0,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1592() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,6,7,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1593() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,3,-1,-1,5,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1594() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,0,-1,-1,5,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1595() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,6,0,2,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1596() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,6,0,2,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1597() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,0,5,2,-1,-1,6,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1598() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1599() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,3,1,-1,-1,5,0,2,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1600() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,3,1,-1,-1,5,6,2,-1,-1,-1,7,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1601() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,4,5,6,-1,-1,-1,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1602() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,4,7,2,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1603() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,6,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1604() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,7,8,2,-1,-1,-1,8,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1605() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,5,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1606() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,0,6,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest1607() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,8,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1608() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,3,0,-1,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1609() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,4,5,-1,-1,-1,-1,1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1610() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,2,0,-1,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1611() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,4,-1,-1,0,0,-1,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1612() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest1613() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,3,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1614() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,2,-1,-1,-1,0,6,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1615() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,0,-1,-1,-1,3,4,1,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1616() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1617() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,6,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1618() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,3,1,-1,-1,5,6,2,-1,-1,0,7,2,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1619() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,0,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1620() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,4,5,0,-1,-1,-1,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1621() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,3,6,2,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1622() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,0,-1,-1,-1,-1,6,7,2,-1,-1,8,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1623() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,0,3,2,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1624() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,2,-1,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1625() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1626() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,4,1,-1,-1,5,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1627() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,-1,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1628() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,3,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1629() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1630() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1631() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1632() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1633() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1634() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,4,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1635() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1636() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1637() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,4,7,1,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1638() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,0,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1639() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,3,-1,-1,5,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1640() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,0,0,2,-1,-1,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1641() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,2,-1,-1,5,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1642() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1643() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1644() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,-1,-1,-1,0,0,2,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1645() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,-1,-1,-1,0,0,2,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1646() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,4,-1,-1,-1,0,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1647() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,7,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1648() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,8,-1,-1,-1,0,0,2,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1649() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,8,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1650() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,8,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1651() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,8,-1,-1,-1,0,0,2,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1652() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,8,-1,-1,-1,0,0,2,-1,-1,4,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1653() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,3,-1,-1,5,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1654() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,2,-1,-1,-1,3,4,1,-1,-1,0,5,2,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1655() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,4,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1656() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1657() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,5,6,2,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1658() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,2,3,-1,-1,-1,0,4,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1659() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,0,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1660() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,0,3,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1661() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,4,-1,-1,5,0,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1662() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,2,-1,-1,-1,3,4,1,-1,-1,5,0,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1663() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1664() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1665() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1666() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,6,0,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1667() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1668() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,3,1,-1,-1,0,5,2,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1669() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,2,-1,-1,-1,-1,0,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1670() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1671() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,7,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1672() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,2,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1673() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,7,0,2,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1674() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,2,-1,-1,-1,-1,0,0,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1675() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,0,6,-1,-1,-1,7,0,2,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1676() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,4,-1,-1,-1,7,0,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1677() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,3,0,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1678() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,5,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1679() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,4,-1,-1,-1,-1,0,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1680() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,6,-1,-1,-1,-1,7,0,2,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1681() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,0,6,-1,-1,-1,7,0,2,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1682() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,0,-1,-1,-1,3,4,1,-1,-1,5,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1683() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,3,1,-1,-1,5,6,2,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1684() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,0,-1,-1,-1,-1,6,7,2,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1685() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1686() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,-1,0,-1,-1,-1,3,6,2,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1687() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1688() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1689() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,0,1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1690() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,4,5,3,-1,-1,-1,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1691() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,5,-1,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1692() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1693() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1694() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,6,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1695() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1696() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,7,8,2,-1,-1,3,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1697() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,6,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1698() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,0,-1,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1699() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1700() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,7,-1,-1,-1,8,6,2,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1701() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,7,8,2,-1,-1,8,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1702() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,7,-1,-1,0,0,-1,-1,-1,8,7,2,-1,-1,-1,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1703() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,6,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1704() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,4,-1,-1,0,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1705() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,6,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1706() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,5,-1,-1,6,7,2,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1707() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,1,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1708() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,4,5,-1,-1,-1,2,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1709() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1710() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,5,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1711() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,4,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1712() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,5,0,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1713() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,0,6,-1,-1,-1,7,5,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1714() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,4,5,-1,-1,-1,-1,-1,-1,-1,-1,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1715() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,1,-1,-1,0,0,-1,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1716() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,3,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1717() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1718() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,4,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1719() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,5,-1,-1,0,6,2,-1,-1,7,3,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1720() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,0,0,1,-1,-1,4,-1,-1,-1,-1,5,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1721() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,1,-1,-1,4,5,-1,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1722() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,0,1,-1,-1,5,4,1,-1,-1,-1,-1,-1,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1723() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,0,4,1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1724() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,0,4,1,-1,-1,5,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1725() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,0,4,1,-1,-1,5,0,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1726() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1727() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1728() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,0,1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,6,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1729() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,0,1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1730() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,0,1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1731() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1732() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1733() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,3,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1734() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1735() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,7,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1736() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,7,0,-1,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1737() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,7,0,-1,-1,-1,2,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1738() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1739() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,5,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1740() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1741() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,4,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1742() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,1,-1,-1,5,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1743() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,0,-1,-1,-1,0,0,2,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1744() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,8,0,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1745() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1746() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,7,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1747() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,8,1,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1748() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,5,-1,-1,-1,-1,6,7,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1749() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,8,7,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1750() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,1,-1,-1,-1,7,8,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1751() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,7,8,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1752() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,0,1,-1,-1,-1,-1,-1,-1,-1,8,4,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1753() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,3,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1754() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,0,-1,-1,-1,3,4,1,-1,-1,5,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1755() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1756() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,3,-1,-1,-1,5,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1757() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,0,-1,-1,-1,0,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1758() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1759() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,0,8,2,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1760() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,3,-1,-1,5,0,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1761() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1762() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,6,-1,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1763() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,3,-1,-1,-1,-1,0,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1764() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,2,-1,-1,-1,0,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1765() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,3,-1,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1766() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,3,-1,-1,-1,-1,6,7,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1767() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1768() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1769() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,2,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1770() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1771() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,4,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1772() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,6,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1773() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,8,0,-1,-1,-1,0,0,2,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1774() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,8,0,-1,-1,-1,0,0,2,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1775() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,8,0,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1776() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1777() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,0,8,-1,-1,-1,0,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1778() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,8,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1779() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,-1,0,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1780() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,3,-1,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1781() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,0,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1782() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,4,-1,-1,0,5,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1783() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1784() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,4,-1,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1785() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,0,1,-1,-1,-1,-1,-1,-1,-1,0,8,-1,-1,-1,0,4,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1786() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1787() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,4,-1,-1,0,5,2,-1,-1,0,6,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1788() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1789() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,6,7,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1790() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,3,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1791() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,1,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1792() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,4,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1793() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,1,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1794() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1795() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,2,-1,-1,-1,-1,6,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1796() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,4,-1,-1,-1,7,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1797() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,0,-1,-1,-1,0,0,2,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1798() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,1,-1,-1,-1,0,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1799() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1800() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,0,1,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1801() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,8,-1,-1,-1,0,0,2,-1,-1,3,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1802() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,8,-1,-1,-1,0,0,2,-1,-1,5,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1803() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,8,-1,-1,-1,0,0,2,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1804() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,0,1,-1,-1,-1,-1,-1,-1,-1,4,8,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1805() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,0,0,2,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1806() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,3,1,-1,-1,0,0,2,-1,-1,0,5,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1807() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,0,7,2,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1808() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,0,7,2,-1,-1,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1809() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,0,7,2,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1810() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,0,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1811() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1812() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,0,8,2,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1813() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1814() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1815() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1816() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,3,-1,-1,5,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1817() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,1,-1,-1,5,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1818() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,6,7,2,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1819() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1820() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,4,-1,-1,-1,6,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1821() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,8,0,-1,-1,-1,0,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1822() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,0,-1,-1,8,0,-1,-1,-1,0,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1823() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,4,-1,-1,-1,-1,-1,-1,-1,-1,0,8,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1824() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,5,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1825() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,8,-1,-1,-1,0,0,2,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1826() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1827() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,0,7,2,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1828() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,1,0,-1,-1,-1,0,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1829() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,4,0,1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1830() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,5,-1,-1,0,0,-1,-1,-1,0,8,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1831() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,6,0,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1832() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,8,0,-1,-1,-1,0,4,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1833() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,8,0,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1834() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,7,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1835() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,2,-1,-1,0,5,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1836() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,5,-1,-1,-1,0,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1837() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,6,7,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1838() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,2,-1,-1,-1,6,7,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1839() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,0,6,2,-1,-1,0,5,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1840() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,7,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1841() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,1,-1,-1,-1,3,4,1,-1,-1,5,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1842() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1843() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1844() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,0,0,2,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1845() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1846() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,7,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1847() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1848() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1849() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1850() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,1,-1,-1,-1,-1,0,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1851() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,7,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1852() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,0,1,-1,-1,-1,-1,-1,-1,-1,0,8,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1853() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,8,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1854() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,2,-1,-1,-1,3,4,1,-1,-1,5,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1855() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1856() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,8,-1,-1,-1,0,0,2,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1857() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,7,-1,-1,8,7,-1,-1,-1,0,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1858() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,3,-1,-1,0,5,2,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1859() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,0,-1,-1,-1,3,4,1,-1,-1,0,5,2,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1860() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,0,-1,-1,-1,3,4,1,-1,-1,-1,0,-1,-1,-1,0,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1861() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,0,7,2,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1862() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,7,-1,-1,0,0,-1,-1,-1,0,7,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1863() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,1,-1,-1,-1,-1,6,0,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1864() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1865() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,6,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1866() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,0,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1867() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,3,1,-1,-1,0,5,2,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1868() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,3,5,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1869() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,0,6,2,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1870() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,0,3,2,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1871() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,6,7,-1,-1,-1,0,3,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1872() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1873() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,4,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1874() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,2,-1,-1,-1,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1875() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,0,0,2,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1876() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,0,6,-1,-1,-1,0,0,2,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1877() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,8,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1878() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,3,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1879() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,5,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1880() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,0,5,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1881() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1882() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,2,-1,-1,-1,0,7,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1883() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,6,0,1,-1,-1,0,0,2,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1884() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,6,7,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1885() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,8,-1,-1,-1,0,0,2,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1886() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1887() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,3,6,2,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1888() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,0,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1889() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,1,-1,-1,0,0,-1,-1,-1,0,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1890() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1891() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1892() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,0,-1,-1,-1,0,7,2,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1893() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,0,-1,-1,-1,0,7,2,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1894() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,0,-1,-1,-1,0,7,2,-1,-1,5,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1895() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,0,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1896() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,6,7,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1897() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,4,-1,-1,-1,6,7,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1898() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,6,5,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1899() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,2,-1,-1,5,6,2,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1900() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1901() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,4,0,1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1902() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,6,7,1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1903() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1904() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1905() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1906() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,8,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1907() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,8,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1908() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,8,-1,-1,-1,0,0,2,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1909() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,0,5,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1910() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,-1,6,-1,-1,-1,0,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1911() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,0,-1,-1,-1,0,7,2,-1,-1,3,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1912() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,0,-1,-1,-1,0,7,2,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1913() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,6,0,-1,-1,-1,0,3,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1914() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1915() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,3,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1916() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,5,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1917() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,8,-1,-1,-1,0,4,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1918() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,6,7,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1919() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,8,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1920() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,0,6,2,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1921() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,0,6,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1922() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,-1,0,-1,-1,-1,5,0,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1923() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,0,7,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1924() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,2,-1,-1,-1,-1,0,0,-1,-1,-1,6,0,2,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1925() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,6,0,2,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1926() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,5,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1927() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,8,0,2,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1928() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,4,7,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest1929() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest1930() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest1931() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,5,-1,-1,-1,0,7,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1932() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,7,-1,-1,-1,8,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1933() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1934() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,6,7,-1,-1,0,0,4,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1935() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,5,-1,-1,-1,6,5,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1936() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,0,6,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1937() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,4,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1938() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,0,6,2,-1,-1,5,7,2,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1939() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,4,-1,-1,-1,-1,0,0,-1,-1,-1,6,0,2,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1940() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,4,0,1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1941() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,8,0,2,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1942() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,1,-1,-1,-1,-1,6,0,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1943() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,2,-1,-1,7,0,-1,-1,-1,8,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1944() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,-1,-1,-1,8,0,2,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1945() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,7,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1946() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,7,-1,-1,-1,8,0,2,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1947() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,4,-1,-1,0,7,-1,-1,-1,8,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1948() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,2,-1,-1,0,7,-1,-1,-1,8,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1949() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,2,-1,-1,-1,3,4,1,-1,-1,5,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1950() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,6,4,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1951() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,3,-1,-1,-1,6,7,2,-1,-1,0,0,5,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1952() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,1,0,-1,-1,-1,5,6,2,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1953() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,0,-1,-1,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1954() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,5,-1,-1,-1,-1,0,0,-1,-1,-1,6,7,2,-1,-1,0,0,5,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1955() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,3,-1,-1,-1,-1,6,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1956() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,1,-1,-1,-1,-1,0,6,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1957() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1958() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,-1,8,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1959() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,8,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1960() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,0,6,-1,-1,-1,7,0,2,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1961() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,0,-1,-1,-1,8,0,2,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1962() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,4,0,1,-1,-1,0,0,-1,-1,-1,7,0,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest1963() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,2,-1,-1,-1,-1,0,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1964() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,8,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1965() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,7,-1,-1,-1,8,0,2,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1966() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,1,-1,-1,-1,3,4,1,-1,-1,5,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1967() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,4,-1,-1,5,6,2,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1968() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,1,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1969() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,7,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest1970() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,6,3,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1971() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,4,-1,-1,-1,5,6,2,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1972() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,-1,6,-1,-1,-1,5,7,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1973() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,4,-1,-1,-1,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1974() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,7,8,2,-1,-1,-1,5,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1975() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,0,0,-1,-1,-1,5,6,2,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1976() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,6,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1977() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,2,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1978() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1979() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,6,0,1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1980() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,6,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1981() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,1,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1982() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,6,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1983() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,7,5,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1984() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,6,7,2,-1,-1,4,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1985() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,0,6,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1986() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1987() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,2,0,-1,-1,-1,5,0,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1988() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1989() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,-1,5,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1990() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,8,0,2,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1991() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,4,-1,-1,-1,0,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1992() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,1,-1,-1,-1,6,7,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest1993() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,5,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1994() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1995() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,6,-1,-1,-1,0,0,4,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1996() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,0,-1,-1,-1,5,6,2,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1997() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,3,1,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1998() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,3,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest1999() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,2,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2000() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,4,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2001() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,4,-1,-1,-1,-1,6,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2002() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,8,6,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2003() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,5,0,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2004() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,2,-1,-1,-1,0,6,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2005() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,-1,-1,-1,-1,0,0,6,-1,-1,0,0,-1,-1,-1,4,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2006() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,6,-1,-1,-1,-1,7,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2007() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2008() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,1,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2009() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,8,0,2,-1,-1,2,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2010() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2011() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,3,-1,-1,-1,7,0,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2012() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,2,-1,-1,-1,3,4,1,-1,-1,0,5,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2013() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,4,-1,-1,-1,0,7,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2014() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,7,-1,-1,-1,8,0,2,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2015() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,5,-1,-1,-1,-1,6,7,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2016() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,0,6,-1,-1,7,8,-1,-1,-1,4,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2017() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,4,-1,-1,-1,-1,6,7,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2018() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,6,0,2,-1,-1,6,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2019() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,3,-1,-1,6,0,2,-1,-1,0,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2020() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2021() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,6,2,-1,-1,0,0,4,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2022() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,2,-1,-1,-1,-1,0,0,-1,-1,-1,6,7,2,-1,-1,0,0,5,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2023() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,3,1,-1,-1,5,6,2,-1,-1,7,0,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2024() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,0,-1,-1,-1,6,8,2,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2025() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,6,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2026() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,2,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2027() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,0,5,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2028() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,5,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2029() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,7,0,2,-1,-1,-1,5,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2030() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,6,0,2,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2031() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,-1,6,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2032() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,8,0,2,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2033() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,2,-1,-1,5,0,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2034() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2035() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,7,-1,-1,-1,8,0,2,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2036() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,0,1,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,8,0,2,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest2037() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,5,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2038() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,2,5,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2039() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,1,-1,-1,5,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2040() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,2,0,-1,-1,-1,5,6,2,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2041() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,6,7,2,-1,-1,0,0,5,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2042() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,6,7,2,-1,-1,0,0,5,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2043() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2044() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,6,0,-1,-1,-1,5,7,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2045() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,0,-1,-1,-1,8,6,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2046() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,2,-1,-1,-1,6,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2047() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,5,-1,-1,-1,-1,0,6,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2048() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,1,-1,-1,6,7,2,-1,-1,0,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2049() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,6,7,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2050() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,0,-1,-1,-1,3,4,1,-1,-1,0,0,-1,-1,-1,5,0,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2051() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,5,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2052() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,4,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest2053() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,7,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2054() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,0,0,6,-1,-1,0,8,-1,-1,-1,4,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2055() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,7,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2056() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,0,2,-1,-1,0,6,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2057() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,1,-1,-1,-1,3,4,1,-1,-1,0,5,2,-1,-1,6,0,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2058() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,0,6,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2059() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,6,-1,-1,-1,0,0,4,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2060() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,1,-1,-1,-1,5,6,2,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2061() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,7,8,2,-1,-1,3,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2062() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,-1,-1,-1,-1,0,0,6,-1,-1,0,0,-1,-1,-1,4,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2063() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,7,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2064() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,2,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2065() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,0,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2066() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,4,-1,-1,-1,0,-1,-1,-1,5,0,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2067() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2068() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,1,-1,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2069() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2070() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,6,0,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2071() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,-1,-1,-1,-1,0,0,6,-1,-1,8,0,-1,-1,-1,4,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2072() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,4,-1,-1,-1,-1,0,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2073() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,7,-1,-1,-1,8,0,2,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2074() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,7,-1,-1,-1,8,0,2,-1,-1,5,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2075() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,4,-1,-1,6,0,2,-1,-1,0,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2076() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2077() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,2,-1,-1,0,0,-1,-1,-1,5,6,2,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2078() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,6,3,2,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2079() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,3,-1,-1,-1,-1,0,0,-1,-1,-1,6,7,2,-1,-1,0,0,5,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2080() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,0,-1,-1,-1,6,7,2,-1,-1,0,0,5,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2081() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,1,-1,-1,-1,0,6,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2082() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,4,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2083() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,0,0,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2084() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,0,0,1,-1,-1,4,-1,-1,-1,-1,5,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2085() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,0,4,1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2086() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2087() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,0,6,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2088() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,5,-1,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2089() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2090() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,0,1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2091() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,1,-1,-1,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2092() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2093() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,0,0,2,-1,-1,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2094() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2095() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2096() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,7,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2097() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2098() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,6,7,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2099() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2100() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,7,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2101() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,4,-1,-1,0,7,-1,-1,-1,0,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2102() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,7,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2103() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,8,-1,-1,-1,0,0,2,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2104() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,8,-1,-1,-1,0,0,2,-1,-1,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2105() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,6,-1,-1,7,8,-1,-1,-1,0,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2106() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,0,5,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2107() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,3,1,-1,-1,0,5,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2108() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,0,7,2,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2109() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,0,0,-1,-1,-1,0,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2110() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,4,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2111() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,0,8,2,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2112() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,0,8,2,-1,-1,1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2113() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,0,8,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2114() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2115() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2116() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,5,-1,-1,-1,-1,0,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2117() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,0,6,-1,-1,-1,0,7,2,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2118() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,4,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2119() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,0,-1,-1,0,5,2,-1,-1,0,6,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2120() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,5,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2121() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2122() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,7,0,-1,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2123() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,7,0,-1,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2124() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,5,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2125() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2126() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2127() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,0,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2128() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,7,-1,-1,8,0,-1,-1,-1,0,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2129() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,0,-1,-1,5,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2130() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,5,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2131() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,-1,-1,-1,0,0,2,-1,-1,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2132() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,7,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2133() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,8,-1,-1,-1,0,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2134() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,2,-1,-1,-1,-1,6,7,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2135() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,2,-1,-1,-1,6,7,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2136() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,1,-1,-1,5,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2137() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,0,0,2,-1,-1,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2138() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,0,-1,-1,-1,0,-1,-1,-1,0,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2139() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,0,8,2,-1,-1,4,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2140() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2141() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2142() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2143() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2144() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2145() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2146() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,0,-1,-1,-1,-1,0,6,2,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2147() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,2,-1,-1,-1,3,4,1,-1,-1,-1,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2148() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,6,-1,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2149() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2150() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,0,6,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2151() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2152() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,6,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2153() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,2,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2154() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2155() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2156() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,6,7,1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2157() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,4,-1,-1,-1,-1,-1,-1,-1,-1,8,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2158() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,0,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2159() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,8,0,-1,-1,-1,0,0,2,-1,-1,5,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2160() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,0,-1,-1,-1,-1,0,0,2,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2161() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2162() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,-1,-1,-1,0,0,2,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2163() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,-1,-1,-1,0,0,2,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2164() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,7,-1,-1,-1,0,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2165() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,0,7,-1,-1,-1,0,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2166() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,7,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2167() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,3,-1,-1,0,0,2,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2168() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2169() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,0,3,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2170() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,3,1,-1,-1,0,5,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2171() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2172() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2173() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,0,-1,-1,-1,0,7,2,-1,-1,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2174() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,6,-1,-1,0,0,-1,-1,-1,0,8,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2175() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2176() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,5,0,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2177() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2178() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,8,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2179() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,2,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2180() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,3,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2181() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,0,-1,-1,-1,5,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2182() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2183() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2184() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,6,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2185() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,6,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2186() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2187() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,2,-1,-1,-1,7,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2188() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,6,0,1,-1,-1,0,0,2,-1,-1,7,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2189() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,8,0,-1,-1,-1,0,0,2,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2190() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,6,7,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2191() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,8,-1,-1,-1,0,0,2,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2192() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,8,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2193() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,0,-1,-1,-1,0,7,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2194() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,0,8,2,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2195() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2196() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2197() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2198() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,5,-1,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2199() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2200() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,0,0,2,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2201() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2202() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2203() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2204() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,4,-1,-1,5,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2205() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2206() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,6,-1,-1,-1,7,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2207() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,8,0,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2208() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,8,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2209() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,2,-1,-1,-1,0,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2210() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,8,-1,-1,-1,0,0,2,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2211() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,0,7,2,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2212() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2213() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2214() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2215() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2216() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2217() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2218() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,6,3,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2219() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,6,7,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2220() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,0,-1,-1,5,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2221() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,0,5,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2222() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,0,0,2,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2223() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,2,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2224() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,2,-1,-1,-1,3,4,1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2225() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,2,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2226() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2227() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,0,0,2,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2228() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,8,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2229() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,0,1,-1,-1,-1,-1,-1,-1,-1,8,0,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2230() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,4,-1,-1,0,5,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2231() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,1,-1,-1,0,5,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2232() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,7,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2233() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,4,-1,-1,5,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2234() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,8,-1,-1,-1,0,0,2,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2235() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2236() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2237() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,0,-1,-1,-1,5,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2238() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,0,-1,-1,-1,0,7,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2239() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,6,0,-1,-1,-1,0,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2240() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,4,-1,-1,-1,-1,6,0,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2241() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2242() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,2,-1,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2243() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2244() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2245() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,5,-1,-1,-1,6,7,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2246() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,0,6,2,-1,-1,0,7,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2247() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2248() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,6,0,1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2249() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2250() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2251() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,5,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2252() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2253() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,0,0,2,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2254() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,6,-1,-1,7,0,-1,-1,-1,0,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2255() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,5,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2256() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,4,5,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2257() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,3,-1,-1,-1,6,7,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2258() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2259() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,3,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2260() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,6,0,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2261() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,0,-1,-1,-1,0,4,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2262() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2263() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,0,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2264() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,0,6,-1,-1,-1,0,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2265() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,1,-1,-1,-1,3,4,1,-1,-1,0,5,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2266() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2267() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2268() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2269() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,1,-1,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2270() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,6,-1,-1,0,6,2,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2271() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,-1,1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2272() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,8,0,2,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2273() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2274() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,8,0,2,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2275() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,6,-1,-1,-1,-1,7,0,2,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2276() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,3,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2277() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,1,-1,-1,-1,6,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2278() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,1,-1,-1,-1,3,4,1,-1,-1,0,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2279() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,0,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2280() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,6,0,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2281() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,0,6,-1,-1,0,0,-1,-1,-1,4,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2282() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,0,6,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2283() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,0,0,6,-1,-1,0,0,-1,-1,-1,4,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2284() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2285() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2286() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,6,0,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2287() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,5,-1,-1,6,7,-1,-1,-1,3,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2288() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,6,-1,-1,-1,0,0,4,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2289() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,6,-1,-1,-1,0,0,4,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2290() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,6,0,-1,-1,0,0,4,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2291() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,0,-1,-1,-1,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2292() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,4,-1,-1,5,0,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2293() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,7,-1,-1,-1,8,6,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2294() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,7,0,2,-1,-1,-1,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2295() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,2,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2296() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,8,-1,-1,-1,0,0,6,-1,-1,0,0,-1,-1,-1,4,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2297() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,5,-1,-1,6,0,-1,-1,-1,3,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2298() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,1,-1,-1,-1,6,0,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2299() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,0,-1,-1,0,5,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2300() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,8,-1,-1,-1,6,0,2,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2301() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,5,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2302() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,6,7,2,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2303() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2304() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,6,-1,-1,-1,0,0,4,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2305() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,6,0,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2306() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,8,0,2,-1,-1,0,3,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2307() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,8,0,2,-1,-1,0,5,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2308() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2309() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,2,-1,-1,-1,0,7,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2310() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,7,-1,-1,-1,8,0,2,-1,-1,1,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2311() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,7,-1,-1,-1,8,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2312() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,0,1,-1,-1,0,0,6,-1,-1,0,8,-1,-1,-1,4,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2313() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,1,-1,-1,-1,-1,6,7,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2314() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,6,-1,-1,6,0,2,-1,-1,0,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2315() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,2,-1,-1,0,5,2,-1,-1,6,0,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2316() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,7,8,2,-1,-1,-1,4,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2317() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,7,8,2,-1,-1,8,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2318() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,0,-1,-1,-1,5,6,2,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2319() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2320() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,5,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2321() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,2,-1,-1,-1,-1,0,6,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2322() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,6,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,-1,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2323() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,8,0,2,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2324() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,0,5,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2325() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,2,-1,-1,0,5,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2326() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,5,-1,-1,-1,-1,0,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2327() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,-1,-1,-1,8,0,2,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2328() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,6,7,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2329() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2330() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,3,-1,-1,-1,5,6,2,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2331() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,4,-1,-1,-1,-1,0,0,-1,-1,-1,6,7,2,-1,-1,0,0,5,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2332() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,6,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2333() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,0,6,-1,-1,0,7,-1,-1,-1,4,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2334() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2335() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2336() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,0,-1,-1,-1,3,4,1,-1,-1,-1,0,-1,-1,-1,5,0,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2337() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,6,0,2,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2338() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,0,-1,-1,-1,5,0,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2339() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,4,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2340() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2341() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2342() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,8,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2343() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,0,0,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2344() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2345() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,3,-1,-1,-1,-1,0,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2346() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2347() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,6,0,2,-1,-1,4,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2348() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,6,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2349() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,0,7,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2350() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,0,-1,-1,-1,7,6,2,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2351() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,6,7,2,-1,-1,0,0,5,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2352() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,0,6,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2353() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,7,-1,-1,0,0,-1,-1,-1,8,7,2,-1,-1,-1,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2354() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,7,-1,-1,-1,8,4,2,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest2355() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,0,-1,-1,-1,-1,6,0,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2356() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,0,1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2357() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2358() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,4,-1,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2359() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,4,-1,-1,0,0,-1,-1,-1,8,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2360() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,0,-1,-1,-1,3,4,1,-1,-1,5,0,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2361() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,0,-1,-1,-1,8,0,2,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2362() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,0,1,-1,-1,-1,-1,-1,-1,-1,4,0,-1,-1,-1,8,0,2,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest2363() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,3,-1,-1,-1,0,7,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2364() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,0,7,-1,-1,-1,8,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2365() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,7,-1,-1,-1,8,0,2,-1,-1,3,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2366() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,5,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2367() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,1,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2368() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,0,-1,-1,-1,6,5,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2369() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,6,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2370() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,5,-1,-1,-1,6,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2371() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2372() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,0,3,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2373() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,7,-1,-1,0,0,-1,-1,-1,8,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2374() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,4,-1,-1,-1,-1,6,0,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2375() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,0,0,6,-1,-1,8,0,-1,-1,-1,4,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2376() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,0,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2377() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,0,-1,-1,-1,8,0,2,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2378() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,5,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2379() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,3,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2380() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,7,8,2,-1,-1,6,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2381() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,3,-1,-1,-1,6,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2382() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,0,6,2,-1,-1,7,3,2,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2383() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,0,0,1,-1,-1,4,-1,-1,-1,-1,5,6,-1,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2384() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,1,-1,-1,4,5,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2385() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,1,-1,-1,4,5,0,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2386() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,0,0,1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2387() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,2,-1,-1,-1,0,3,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2388() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,4,1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2389() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,0,4,1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2390() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,0,4,1,-1,-1,5,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2391() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,2,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2392() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,0,1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,6,0,-1,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2393() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,0,1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,6,7,-1,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2394() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,1,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2395() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,1,-1,-1,5,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2396() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,1,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2397() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,5,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2398() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,3,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2399() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,1,-1,-1,5,6,3,-1,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2400() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2401() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,7,0,-1,-1,-1,1,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2402() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,7,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2403() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2404() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,5,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2405() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2406() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,3,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2407() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,0,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2408() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2409() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,0,0,2,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2410() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,8,0,-1,-1,-1,0,0,2,-1,-1,3,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2411() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2412() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,5,-1,-1,0,7,-1,-1,-1,0,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2413() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,8,-1,-1,-1,0,0,2,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2414() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,8,-1,-1,-1,0,0,2,-1,-1,4,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2415() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2416() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,5,-1,-1,-1,0,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2417() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,0,7,2,-1,-1,1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2418() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2419() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,6,0,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2420() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2421() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,2,-1,-1,5,0,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2422() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2423() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,1,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2424() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2425() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,0,0,2,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2426() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,6,-1,-1,-1,0,7,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2427() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,8,-1,-1,-1,0,0,2,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2428() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,7,-1,-1,0,8,-1,-1,-1,0,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2429() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,1,-1,-1,-1,3,4,1,-1,-1,5,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2430() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,4,-1,-1,0,0,-1,-1,-1,0,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2431() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2432() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,6,0,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2433() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,5,-1,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2434() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2435() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2436() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2437() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,4,-1,-1,-1,5,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2438() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2439() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2440() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,5,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2441() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2442() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,8,0,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2443() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,0,8,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2444() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,8,-1,-1,-1,0,0,2,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2445() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,8,-1,-1,-1,0,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2446() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,4,-1,-1,-1,0,-1,-1,-1,0,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2447() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2448() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,4,-1,-1,-1,0,0,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2449() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,4,-1,-1,-1,6,0,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2450() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2451() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,7,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2452() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,0,6,2,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2453() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2454() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,4,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2455() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,8,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2456() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2457() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,1,-1,-1,-1,3,4,1,-1,-1,0,5,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2458() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2459() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,8,-1,-1,-1,0,0,2,-1,-1,1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2460() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,0,-1,-1,0,5,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2461() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,6,7,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2462() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,6,7,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2463() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,8,-1,-1,-1,0,0,2,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2464() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,8,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2465() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,0,0,2,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2466() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,2,-1,-1,-1,5,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2467() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2468() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,2,-1,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2469() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,3,0,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2470() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,3,-1,-1,0,5,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2471() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,1,-1,-1,-1,-1,0,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2472() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2473() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,0,6,2,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2474() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,0,6,2,-1,-1,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2475() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,3,1,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2476() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2477() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2478() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2479() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,7,0,-1,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2480() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,4,7,1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2481() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2482() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,0,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2483() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2484() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,5,-1,-1,-1,-1,0,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2485() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,0,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2486() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,8,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2487() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,5,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2488() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,6,3,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2489() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,6,-1,-1,-1,-1,0,7,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2490() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2491() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2492() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,4,-1,-1,5,6,2,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2493() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2494() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2495() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2496() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2497() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,4,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2498() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,2,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2499() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,0,-1,-1,-1,3,4,1,-1,-1,5,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2500() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,3,-1,-1,-1,7,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2501() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2502() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,4,-1,-1,-1,-1,0,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2503() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,0,6,-1,-1,-1,0,0,2,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2504() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,6,7,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2505() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,0,6,2,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2506() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2507() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,7,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2508() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,2,-1,-1,-1,0,-1,-1,-1,0,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2509() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,-1,5,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2510() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,1,-1,-1,-1,0,0,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2511() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,0,8,2,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2512() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,0,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2513() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2514() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,0,0,2,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2515() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2516() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,7,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2517() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,4,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2518() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,6,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2519() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,5,-1,-1,-1,-1,6,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2520() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,0,-1,-1,-1,0,0,2,-1,-1,1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2521() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,4,7,1,-1,-1,0,0,-1,-1,-1,8,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2522() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,8,0,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2523() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,5,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2524() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,3,5,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2525() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,3,-1,-1,-1,-1,0,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2526() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,8,-1,-1,-1,0,0,2,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2527() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,1,-1,-1,-1,0,-1,-1,-1,0,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2528() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,0,0,-1,-1,-1,0,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2529() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,6,0,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2530() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2531() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2532() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2533() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,5,-1,-1,-1,-1,6,7,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2534() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,3,-1,-1,-1,6,7,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2535() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,0,6,2,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2536() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2537() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,0,0,-1,-1,-1,5,0,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2538() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,5,-1,-1,-1,-1,6,0,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2539() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,6,0,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2540() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,3,-1,-1,-1,6,0,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2541() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest2542() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,6,8,2,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2543() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,1,-1,-1,0,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2544() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,3,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2545() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2546() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,4,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2547() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,0,-1,-1,-1,5,0,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2548() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2549() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,8,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2550() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,3,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2551() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,6,7,2,-1,-1,0,0,5,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2552() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,8,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2553() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2554() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,4,-1,-1,0,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2555() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,0,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2556() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2557() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,3,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2558() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,4,0,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest2559() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,6,1,-1,-1,0,0,4,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2560() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,6,6,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2561() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,6,-1,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2562() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,8,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2563() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,0,6,-1,-1,-1,7,5,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2564() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,3,1,-1,-1,5,6,2,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2565() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,0,-1,-1,-1,3,4,1,-1,-1,0,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2566() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,1,-1,-1,0,0,-1,-1,-1,5,0,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2567() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2568() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,-1,7,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2569() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,8,-1,-1,0,0,-1,-1,-1,8,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2570() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,0,-1,-1,0,0,-1,-1,-1,5,0,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2571() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,5,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2572() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,2,-1,-1,-1,0,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2573() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest2574() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,6,6,-1,-1,0,0,4,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2575() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,0,-1,-1,-1,0,-1,-1,-1,5,6,2,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2576() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,0,6,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2577() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,2,-1,-1,5,0,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2578() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,6,7,2,-1,-1,0,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2579() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,7,0,2,-1,-1,-1,6,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2580() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,5,-1,-1,-1,-1,0,0,-1,-1,-1,6,0,2,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2581() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,6,0,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2582() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,3,-1,-1,-1,-1,6,0,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2583() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,5,-1,-1,-1,6,0,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2584() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,0,-1,-1,-1,8,0,2,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2585() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,0,-1,-1,7,0,-1,-1,-1,8,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2586() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,1,5,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2587() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest2588() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,6,7,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2589() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,2,-1,-1,-1,6,7,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2590() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,5,-1,-1,0,6,2,-1,-1,3,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2591() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2592() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,4,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2593() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,3,-1,-1,5,0,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2594() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,6,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2595() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,-1,-1,-1,6,8,2,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2596() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,0,6,-1,-1,-1,7,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2597() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,8,0,2,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2598() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,4,-1,-1,5,0,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2599() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,6,7,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2600() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,3,-1,-1,5,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2601() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,0,-1,-1,5,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2602() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,1,-1,-1,-1,0,-1,-1,-1,5,6,2,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2603() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,6,7,2,-1,-1,0,0,5,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2604() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,0,3,2,-1,-1,6,7,2,-1,-1,0,0,5,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2605() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,3,1,-1,-1,5,6,2,-1,-1,0,7,2,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2606() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,2,-1,-1,-1,5,0,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2607() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,5,-1,-1,0,0,-1,-1,-1,3,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2608() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,1,-1,-1,5,0,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2609() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,0,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2610() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,7,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2611() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,5,-1,-1,0,7,-1,-1,-1,8,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2612() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,6,7,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2613() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,3,-1,-1,5,6,2,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2614() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,0,1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2615() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,0,-1,-1,-1,3,4,1,-1,-1,-1,0,-1,-1,-1,5,6,2,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2616() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,7,8,2,-1,-1,-1,3,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2617() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,7,8,2,-1,-1,-1,1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2618() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2619() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,6,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2620() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2621() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,5,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,-1,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2622() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,8,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2623() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,3,0,-1,-1,-1,6,0,2,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2624() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,7,-1,-1,-1,8,0,2,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2625() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,7,-1,-1,0,8,-1,-1,-1,7,0,2,-1,-1,-1,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2626() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,6,7,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2627() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,4,0,-1,-1,-1,5,6,2,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2628() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2629() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,0,1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2630() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,0,4,1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,6,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2631() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,4,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2632() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,0,1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2633() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,1,-1,-1,5,0,1,-1,-1,-1,-1,-1,-1,-1,5,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2634() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,1,-1,-1,5,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2635() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,2,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2636() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2637() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,7,0,-1,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2638() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,1,-1,-1,-1,-1,6,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2639() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,0,5,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2640() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,2,-1,-1,-1,3,4,1,-1,-1,0,5,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2641() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2642() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,7,-1,-1,-1,0,0,2,-1,-1,4,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2643() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,8,-1,-1,-1,0,0,2,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2644() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,6,7,-1,-1,-1,0,0,2,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2645() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,8,-1,-1,-1,0,0,2,-1,-1,3,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2646() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,4,-1,-1,0,5,2,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2647() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2648() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,0,7,2,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2649() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,0,-1,-1,-1,0,7,2,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2650() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2651() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2652() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2653() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2654() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,4,-1,-1,-1,-1,6,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2655() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,6,-1,-1,0,8,-1,-1,-1,0,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2656() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,8,-1,-1,-1,0,0,2,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2657() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,8,-1,-1,-1,0,0,2,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2658() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,2,-1,-1,7,8,-1,-1,-1,0,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2659() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,0,7,2,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2660() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,1,-1,-1,-1,6,7,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2661() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,4,5,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2662() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,3,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2663() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2664() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2665() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,0,-1,-1,-1,0,0,2,-1,-1,3,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2666() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,0,-1,-1,-1,0,0,2,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2667() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,-1,-1,-1,0,0,2,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2668() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,2,-1,-1,0,7,-1,-1,-1,0,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2669() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,8,-1,-1,-1,0,0,2,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2670() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,8,-1,-1,-1,0,0,2,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2671() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,8,-1,-1,-1,0,0,2,-1,-1,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2672() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,4,-1,-1,-1,7,8,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2673() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,8,-1,-1,-1,0,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2674() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,5,-1,-1,0,0,2,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2675() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2676() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2677() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2678() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2679() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,6,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2680() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2681() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,8,-1,-1,-1,0,0,2,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2682() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,7,8,-1,-1,-1,0,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2683() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,8,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2684() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2685() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2686() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2687() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,6,-1,-1,-1,0,0,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2688() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2689() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,2,-1,-1,-1,6,0,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2690() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2691() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2692() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,4,0,1,-1,-1,0,0,-1,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2693() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,0,6,2,-1,-1,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2694() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,3,1,-1,-1,0,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2695() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,8,-1,-1,8,0,-1,-1,-1,0,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2696() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,4,-1,-1,8,0,-1,-1,-1,0,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2697() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,8,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2698() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,3,-1,-1,-1,0,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2699() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,2,-1,-1,0,0,-1,-1,-1,0,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2700() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,4,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,8,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2701() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2702() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,4,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2703() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2704() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2705() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,1,5,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2706() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,0,5,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2707() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,0,0,2,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2708() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2709() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2710() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2711() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,8,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2712() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,1,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2713() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,0,7,2,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2714() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,3,-1,-1,-1,0,0,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2715() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,4,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2716() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2717() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,3,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2718() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,0,1,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,0,8,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2719() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2720() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,7,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2721() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2722() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2723() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,0,-1,-1,-1,0,0,2,-1,-1,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2724() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,4,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2725() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,6,5,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2726() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,0,5,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2727() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,3,-1,-1,-1,-1,0,0,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2728() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,3,-1,-1,-1,0,0,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2729() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2730() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2731() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,0,-1,-1,0,5,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2732() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,3,6,2,-1,-1,0,7,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2733() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2734() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,0,-1,-1,0,0,-1,-1,-1,8,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2735() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,0,-1,-1,-1,8,0,2,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2736() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,1,-1,-1,-1,0,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2737() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,4,0,1,-1,-1,0,0,-1,-1,-1,0,7,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest2738() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,6,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2739() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,6,-1,-1,-1,0,0,4,-1,-1,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2740() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,6,0,2,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2741() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2742() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2743() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,0,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2744() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,7,-1,-1,-1,8,0,2,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2745() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,4,-1,-1,5,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2746() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,0,1,-1,-1,0,0,6,-1,-1,0,0,-1,-1,-1,4,8,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2747() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,5,-1,-1,-1,-1,6,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2748() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,7,0,2,-1,-1,7,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2749() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,2,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,-1,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2750() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,0,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,-1,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2751() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,0,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest2752() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,5,-1,-1,-1,0,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2753() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,6,0,1,-1,-1,7,0,2,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2754() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,7,-1,-1,-1,8,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2755() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,6,5,-1,-1,0,0,4,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2756() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2757() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,0,1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,8,4,2,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest2758() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,0,-1,-1,5,0,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2759() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2760() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,2,-1,-1,0,0,-1,-1,-1,5,0,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2761() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,-1,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2762() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,7,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2763() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,5,-1,-1,-1,6,7,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2764() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,6,-1,-1,-1,0,0,4,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2765() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,3,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2766() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2767() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,7,0,2,-1,-1,4,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2768() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,3,-1,-1,5,0,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2769() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,8,0,2,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2770() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,0,1,-1,-1,0,0,6,-1,-1,8,0,-1,-1,-1,4,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2771() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,2,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2772() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,0,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2773() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,-1,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2774() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,8,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2775() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,4,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2776() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,2,-1,-1,-1,3,4,1,-1,-1,-1,0,-1,-1,-1,5,0,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2777() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,8,0,2,-1,-1,0,1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2778() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,1,-1,-1,-1,-1,0,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2779() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,3,-1,-1,-1,-1,6,7,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2780() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,6,0,2,-1,-1,1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2781() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,0,2,-1,-1,0,2,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2782() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,3,1,-1,-1,5,6,2,-1,-1,-1,0,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2783() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,6,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2784() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,5,7,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2785() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,6,7,2,-1,-1,7,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2786() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,7,0,2,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2787() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,-1,-1,-1,8,0,2,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2788() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,0,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2789() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,0,2,-1,-1,0,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2790() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,0,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2791() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,6,-1,-1,-1,0,0,4,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2792() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,2,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2793() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,6,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2794() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,5,-1,-1,0,6,-1,-1,-1,3,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2795() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,0,3,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2796() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,1,-1,-1,-1,0,0,-1,-1,-1,6,0,2,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2797() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,0,-1,-1,-1,8,0,2,-1,-1,4,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2798() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,0,-1,-1,-1,8,0,2,-1,-1,2,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2799() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,0,-1,-1,5,0,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2800() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest2801() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,8,-1,-1,-1,6,0,2,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2802() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,6,0,2,-1,-1,5,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2803() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,1,-1,-1,0,5,2,-1,-1,6,0,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2804() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,1,-1,-1,-1,3,4,1,-1,-1,-1,0,-1,-1,-1,5,6,2,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2805() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,0,0,-1,-1,-1,5,6,2,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2806() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2807() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,0,2,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2808() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,0,0,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2809() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2810() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2811() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2812() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,1,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2813() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,1,-1,-1,4,5,5,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2814() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,1,-1,-1,4,5,5,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2815() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,0,4,1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2816() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2817() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,0,3,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2818() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2819() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2820() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2821() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,6,4,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2822() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,0,3,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2823() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2824() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,1,-1,-1,5,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2825() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,1,-1,-1,5,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2826() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,0,1,-1,-1,5,0,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2827() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,0,1,-1,-1,5,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2828() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2829() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2830() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,0,0,2,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2831() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,2,-1,-1,-1,3,4,1,-1,-1,5,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2832() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,8,-1,-1,-1,0,0,2,-1,-1,1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2833() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,8,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2834() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,2,-1,-1,-1,3,4,1,-1,-1,-1,0,-1,-1,-1,0,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2835() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,0,7,2,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2836() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,5,-1,-1,-1,-1,6,0,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2837() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2838() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2839() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,3,-1,-1,0,6,2,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2840() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,6,5,2,-1,-1,0,7,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2841() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2842() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2843() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,5,-1,-1,-1,7,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2844() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,1,-1,-1,-1,7,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2845() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,8,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2846() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,8,-1,-1,-1,0,0,2,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2847() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,5,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2848() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2849() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2850() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2851() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2852() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,3,1,-1,-1,0,5,2,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2853() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2854() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2855() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2856() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,3,-1,-1,-1,0,7,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2857() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,7,-1,-1,0,7,-1,-1,-1,0,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2858() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,8,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2859() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,7,8,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2860() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,0,0,2,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2861() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,1,-1,-1,0,5,2,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2862() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,0,7,2,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2863() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,0,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2864() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,4,7,1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2865() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2866() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,0,4,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2867() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,1,-1,-1,-1,-1,6,7,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2868() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2869() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2870() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2871() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,1,-1,-1,-1,6,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2872() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,8,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2873() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,1,-1,-1,-1,3,4,1,-1,-1,-1,0,-1,-1,-1,0,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2874() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,4,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2875() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,0,0,-1,-1,-1,0,8,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2876() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,7,-1,-1,-1,0,8,2,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2877() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,1,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2878() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,0,0,2,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2879() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2880() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,6,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2881() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,7,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2882() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,0,7,2,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2883() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,0,7,2,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2884() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,2,-1,-1,-1,3,4,1,-1,-1,0,0,-1,-1,-1,0,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2885() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2886() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,5,-1,-1,0,6,2,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2887() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,1,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2888() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,5,-1,-1,7,0,-1,-1,-1,0,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2889() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,0,-1,-1,-1,0,0,2,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2890() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,7,-1,-1,8,0,-1,-1,-1,0,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2891() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,8,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2892() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,0,6,-1,-1,-1,0,7,2,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2893() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,6,0,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2894() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,4,-1,-1,0,6,2,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2895() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2896() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2897() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,5,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2898() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,0,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2899() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2900() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,8,-1,-1,-1,0,0,2,-1,-1,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2901() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2902() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,1,-1,-1,0,0,2,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2903() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,-1,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2904() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,2,-1,-1,-1,0,0,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2905() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,0,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2906() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,5,-1,-1,0,0,-1,-1,-1,0,7,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2907() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,0,-1,-1,-1,0,7,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2908() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,0,-1,-1,0,0,-1,-1,-1,0,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2909() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2910() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,3,-1,-1,-1,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2911() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,5,-1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2912() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,6,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2913() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,3,-1,-1,-1,6,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2914() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,8,-1,-1,-1,0,0,2,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2915() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,0,6,-1,-1,-1,0,0,2,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2916() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2917() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,0,-1,-1,-1,0,8,2,-1,-1,5,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2918() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,2,-1,-1,-1,3,4,1,-1,-1,0,5,2,-1,-1,0,6,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2919() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2920() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2921() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,7,0,2,-1,-1,6,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2922() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,2,-1,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2923() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,2,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2924() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2925() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,7,8,2,-1,-1,-1,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2926() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,0,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2927() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,0,-1,-1,-1,7,8,2,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2928() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,6,7,2,-1,-1,5,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2929() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,7,-1,-1,7,0,-1,-1,-1,8,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2930() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,0,-1,-1,-1,8,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2931() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,3,1,-1,-1,5,0,2,-1,-1,0,6,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2932() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2933() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,7,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2934() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2935() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,5,6,2,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2936() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,2,-1,-1,-1,3,4,1,-1,-1,0,0,-1,-1,-1,5,6,2,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2937() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2938() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2939() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,4,-1,-1,-1,0,0,-1,-1,-1,6,0,2,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2940() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,3,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2941() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2942() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,5,-1,-1,0,0,-1,-1,-1,8,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2943() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,6,7,1,-1,-1,8,0,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest2944() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,0,-1,-1,6,0,2,-1,-1,0,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2945() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,6,-1,-1,-1,0,0,4,-1,-1,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2946() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,-1,0,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2947() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,7,0,2,-1,-1,1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2948() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,0,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,8,0,2,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest2949() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,6,-1,-1,0,7,-1,-1,-1,8,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2950() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,-1,0,-1,-1,-1,6,5,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2951() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,7,8,2,-1,-1,-1,2,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2952() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,5,-1,-1,-1,0,0,-1,-1,-1,6,7,2,-1,-1,0,0,5,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2953() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,5,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2954() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,6,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2955() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,6,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2956() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,6,0,2,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2957() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,1,-1,-1,-1,3,4,1,-1,-1,5,0,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2958() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,0,7,-1,-1,-1,8,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2959() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,2,-1,-1,-1,3,4,1,-1,-1,-1,0,-1,-1,-1,5,6,2,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2960() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,-1,-1,-1,-1,0,7,-1,-1,-1,8,6,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2961() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,3,-1,-1,-1,5,0,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2962() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,8,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2963() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,7,0,-1,-1,-1,8,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2964() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2965() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,0,-1,-1,-1,3,4,1,-1,-1,5,0,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2966() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,4,-1,-1,6,7,2,-1,-1,0,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2967() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,0,6,2,-1,-1,7,5,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2968() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,0,0,-1,-1,-1,5,0,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2969() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,5,-1,-1,0,6,2,-1,-1,5,0,2,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2970() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2971() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,6,7,2,-1,-1,0,0,5,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2972() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,3,-1,-1,6,7,2,-1,-1,0,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2973() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,5,-1,-1,0,6,2,-1,-1,3,7,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2974() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,3,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2975() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,3,1,-1,-1,5,0,2,-1,-1,-1,6,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2976() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,7,0,2,-1,-1,2,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2977() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,0,-1,-1,-1,3,4,1,-1,-1,0,5,2,-1,-1,6,0,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2978() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2979() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,6,-1,-1,-1,0,0,4,-1,-1,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2980() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2981() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,7,8,2,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2982() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,0,-1,-1,-1,7,8,2,-1,-1,-1,7,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2983() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,6,-1,-1,6,7,2,-1,-1,0,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2984() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,0,2,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2985() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,0,4,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2986() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,1,-1,-1,-1,0,7,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest2987() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,0,2,-1,-1,0,3,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2988() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,0,-1,-1,-1,3,4,1,-1,-1,0,0,-1,-1,-1,5,6,2,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2989() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,1,-1,-1,-1,0,0,-1,-1,-1,6,7,2,-1,-1,0,0,5,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2990() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,7,8,2,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2991() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,8,0,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest2992() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,5,0,2,-1,-1,0,6,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2993() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,3,-1,-1,0,8,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2994() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,1,-1,-1,-1,-1,7,0,3,-1,-1,0,8,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2995() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,5,-1,-1,-1,7,0,3,-1,-1,0,8,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2996() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,0,2,-1,-1,6,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2997() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,3,-1,-1,8,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2998() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,3,0,-1,-1,-1,7,0,3,-1,-1,8,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest2999() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,2,-1,-1,-1,-1,7,0,3,-1,-1,8,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3000() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,7,8,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3001() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,4,1,-1,-1,6,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3002() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,0,2,-1,-1,6,7,-1,-1,-1,0,0,3,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3003() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,2,-1,-1,5,0,2,-1,-1,6,7,2,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3004() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,2,-1,-1,5,0,2,-1,-1,6,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3005() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,5,0,2,-1,-1,6,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3006() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3007() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3008() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3009() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,8,4,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest3010() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,6,7,1,-1,-1,0,0,6,-1,-1,0,0,-1,-1,-1,4,8,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3011() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,0,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3012() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,4,-1,-1,4,5,1,-1,-1,2,6,3,-1,-1,7,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3013() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,2,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,8,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3014() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,4,1,-1,-1,6,0,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3015() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,6,7,2,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3016() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,7,-1,-1,-1,-1,0,0,4,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3017() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,7,-1,-1,-1,-1,0,0,4,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3018() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,2,-1,-1,5,0,2,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3019() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,7,0,-1,-1,-1,8,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3020() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3021() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,8,0,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest3022() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,2,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3023() {
        assertEquals(false, symKorat.isSat("1,-1,-1,1,2,-1,-1,-1,3,4,1,-1,-1,5,0,2,-1,-1,6,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3024() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,4,1,-1,-1,6,0,-1,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3025() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,3,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,7,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3026() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,7,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3027() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,3,-1,-1,8,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3028() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,0,5,-1,-1,4,0,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3029() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,6,0,2,-1,-1,7,5,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3030() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,0,-1,-1,5,0,2,-1,-1,6,7,2,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3031() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,5,5,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3032() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,3,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3033() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3034() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,4,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3035() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,0,5,-1,-1,4,7,3,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3036() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,0,2,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3037() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,2,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3038() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,3,-1,-1,4,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3039() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,8,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3040() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,3,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3041() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3042() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3043() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,2,-1,-1,-1,3,4,1,-1,-1,5,0,2,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3044() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,-1,-1,-1,7,4,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,0,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest3045() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3046() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3047() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,0,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,0,7,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3048() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,2,-1,-1,5,0,2,-1,-1,6,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3049() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,4,6,1,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,8,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3050() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,5,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3051() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,4,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3052() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,2,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,7,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3053() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,8,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,2,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3054() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,3,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3055() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3056() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,2,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3057() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,0,-1,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3058() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,4,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3059() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,3,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,8,0,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest3060() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,4,6,1,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,0,8,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3061() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,2,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,0,7,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3062() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,2,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,3,-1,-1,0,8,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3063() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,7,0,3,-1,-1,0,8,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3064() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,0,2,-1,-1,6,4,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3065() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,0,2,-1,-1,6,0,2,-1,-1,0,0,3,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3066() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,5,0,2,-1,-1,6,0,2,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3067() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,0,2,-1,-1,6,7,6,-1,-1,0,0,3,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3068() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,-1,-1,-1,-1,5,2,1,-1,-1,-1,-1,-1,-1,-1,6,7,3,-1,-1,0,0,5,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3069() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,8,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,0,2,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3070() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,0,5,-1,-1,4,7,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3071() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,8,4,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest3072() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,8,4,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest3073() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,6,4,1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3074() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,8,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3075() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,2,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,7,0,2,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3076() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,-1,-1,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3077() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,2,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3078() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3079() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,0,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3080() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,2,-1,-1,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3081() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,7,-1,-1,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3082() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,6,7,1,-1,-1,0,0,6,-1,-1,0,0,-1,-1,-1,4,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3083() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,7,-1,-1,-1,-1,8,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3084() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,6,-1,-1,7,8,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,7,-1,-1,6,0,3,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3085() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,3,0,-1,-1,-1,7,0,3,-1,-1,0,8,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3086() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,7,-1,-1,-1,-1,7,0,3,-1,-1,0,8,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3087() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,2,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,7,0,3,-1,-1,0,8,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3088() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,0,8,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3089() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,4,1,-1,-1,6,0,-1,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3090() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,0,2,-1,-1,6,0,1,-1,-1,0,0,3,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3091() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,6,0,2,-1,-1,5,7,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3092() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,5,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3093() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,0,1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3094() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3095() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,8,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3096() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,6,7,2,-1,-1,5,0,2,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3097() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,-1,-1,-1,-1,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3098() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3099() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,2,-1,-1,5,0,2,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3100() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,7,-1,-1,-1,-1,0,0,4,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3101() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,0,2,-1,-1,0,4,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3102() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3103() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3104() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,0,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest3105() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,6,5,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3106() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,3,-1,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3107() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3108() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,8,0,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest3109() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,6,7,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,0,3,-1,-1,0,5,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest3110() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,3,-1,-1,2,5,1,-1,-1,0,0,2,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3111() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,3,-1,-1,8,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3112() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,1,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,7,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3113() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,5,-1,-1,-1,0,0,3,-1,-1,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3114() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,4,5,2,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3115() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,6,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3116() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,8,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,0,8,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3117() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,8,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,0,4,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3118() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,4,-1,-1,5,6,2,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3119() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,1,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,0,8,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3120() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,3,-1,-1,0,4,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3121() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,0,8,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3122() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,2,0,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,0,8,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3123() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,7,-1,-1,-1,-1,0,0,4,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3124() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,0,2,-1,-1,0,2,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3125() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,6,-1,-1,7,6,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,8,0,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest3126() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,8,0,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest3127() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,0,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,8,0,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest3128() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,0,7,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3129() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,0,3,-1,-1,0,4,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest3130() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,2,-1,-1,-1,7,0,3,-1,-1,0,8,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3131() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,0,8,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3132() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,7,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3133() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,3,-1,-1,4,8,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3134() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,3,-1,-1,5,0,2,-1,-1,6,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3135() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,0,1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3136() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,5,4,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3137() {
        assertEquals(false, symKorat.isSat("1,-1,-1,0,2,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3138() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,8,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,0,5,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3139() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,7,4,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3140() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3141() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3142() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,1,-1,-1,6,2,3,-1,-1,0,7,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3143() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,0,8,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3144() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,3,-1,-1,0,4,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3145() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,6,7,2,-1,-1,5,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3146() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,-1,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3147() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3148() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,-1,4,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3149() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3150() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3151() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,0,5,2,-1,-1,6,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3152() {
        assertEquals(false, symKorat.isSat("1,-1,-1,1,2,-1,-1,-1,3,4,1,-1,-1,0,5,2,-1,-1,6,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3153() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,7,-1,-1,-1,-1,0,8,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3154() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,3,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,7,3,-1,-1,0,8,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3155() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,4,-1,-1,4,5,1,-1,-1,0,2,3,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3156() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,0,-1,-1,0,5,2,-1,-1,0,6,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3157() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,3,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,7,8,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3158() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,7,8,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3159() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,4,-1,-1,0,5,2,-1,-1,6,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3160() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,2,-1,-1,-1,3,4,1,-1,-1,0,5,2,-1,-1,6,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3161() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,0,-1,-1,-1,0,0,3,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3162() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,0,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3163() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,3,-1,-1,0,5,2,-1,-1,6,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3164() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,4,5,2,-1,-1,-1,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3165() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,4,-1,-1,5,6,2,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3166() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,0,-1,-1,5,6,2,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3167() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,1,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3168() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,0,5,-1,-1,7,4,3,-1,-1,8,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3169() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,-1,4,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3170() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,0,4,3,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3171() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,7,-1,-1,-1,-1,0,0,4,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3172() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,2,-1,-1,-1,0,7,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3173() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest3174() {
        assertEquals(false, symKorat.isSat("1,-1,-1,1,2,-1,-1,-1,3,4,1,-1,-1,0,5,2,-1,-1,0,6,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3175() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,1,0,-1,-1,-1,0,7,3,-1,-1,0,8,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3176() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,6,-1,-1,-1,0,7,3,-1,-1,0,8,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3177() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,6,4,1,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest3178() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,5,0,-1,-1,-1,0,7,3,-1,-1,8,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3179() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,3,-1,-1,8,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3180() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,3,-1,-1,4,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest3181() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,2,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,7,3,-1,-1,8,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3182() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,0,0,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3183() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,5,-1,-1,-1,-1,4,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3184() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,4,2,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3185() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,1,-1,-1,2,6,3,-1,-1,0,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3186() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,0,0,5,-1,-1,7,4,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3187() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,6,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3188() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3189() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,5,-1,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3190() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3191() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,6,7,2,-1,-1,5,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3192() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,3,-1,-1,4,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3193() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,4,7,3,-1,-1,8,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3194() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,3,-1,-1,4,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3195() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,7,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3196() {
        assertEquals(false, symKorat.isSat("1,-1,-1,0,2,-1,-1,-1,3,4,1,-1,-1,0,5,2,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3197() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3198() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3199() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3200() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,5,-1,-1,-1,-1,0,7,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3201() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest3202() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,2,-1,-1,0,5,2,-1,-1,0,6,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3203() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,0,7,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3204() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1,-1,0,4,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3205() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,6,7,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,3,-1,-1,0,5,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest3206() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,3,-1,-1,8,4,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3207() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,7,8,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3208() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,4,1,-1,-1,6,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3209() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,0,1,-1,-1,0,0,3,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3210() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,0,5,2,-1,-1,6,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3211() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,8,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3212() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,8,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,2,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3213() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,8,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,0,5,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3214() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,6,5,2,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3215() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,5,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3216() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,7,-1,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3217() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,2,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3218() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,4,-1,-1,5,6,2,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3219() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,2,-1,-1,5,6,2,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3220() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3221() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,0,0,5,-1,-1,7,4,3,-1,-1,8,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3222() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3223() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3224() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,-1,4,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3225() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,7,-1,-1,-1,-1,0,0,4,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3226() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,7,-1,-1,-1,-1,0,0,4,-1,-1,0,1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3227() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,4,-1,-1,-1,0,7,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3228() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,-1,-1,-1,7,4,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest3229() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,3,-1,-1,0,8,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3230() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,3,-1,-1,0,8,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3231() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,5,-1,-1,-1,0,7,3,-1,-1,0,8,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3232() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,3,-1,-1,0,8,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3233() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,3,-1,-1,0,4,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest3234() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,2,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,3,-1,-1,0,8,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3235() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,4,6,1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,0,8,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3236() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,3,-1,-1,8,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3237() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,2,0,-1,-1,-1,0,7,3,-1,-1,8,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3238() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,3,-1,-1,8,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3239() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,0,-1,-1,0,5,2,-1,-1,6,0,2,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3240() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,0,6,2,-1,-1,7,5,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3241() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3242() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,3,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3243() {
        assertEquals(false, symKorat.isSat("1,-1,-1,1,2,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3244() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,0,5,-1,-1,7,4,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3245() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,7,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3246() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,0,0,5,-1,-1,7,4,3,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3247() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,4,7,3,-1,-1,8,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3248() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,0,0,5,-1,-1,7,4,3,-1,-1,8,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3249() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3250() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,-1,4,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3251() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,7,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3252() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,0,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest3253() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,5,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest3254() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,3,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest3255() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,1,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,0,7,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3256() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,7,3,-1,-1,0,8,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3257() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,0,5,2,-1,-1,0,6,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3258() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,2,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,7,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3259() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,7,-1,-1,-1,0,7,3,-1,-1,8,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3260() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,0,6,2,-1,-1,5,0,2,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3261() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,7,5,-1,-1,0,0,3,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3262() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,3,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3263() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,0,0,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3264() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,3,-1,-1,5,6,2,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3265() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,4,-1,-1,4,5,1,-1,-1,6,2,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3266() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,3,-1,-1,2,6,1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3267() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,4,1,-1,-1,0,0,-1,-1,-1,6,7,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3268() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,2,0,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3269() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,4,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3270() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,1,-1,-1,2,6,3,-1,-1,0,7,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3271() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,0,0,5,-1,-1,7,4,3,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3272() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,0,-1,-1,5,6,2,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3273() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,0,-1,-1,5,6,2,-1,-1,7,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3274() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,7,-1,-1,-1,-1,0,0,4,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3275() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,1,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3276() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,4,6,1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3277() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,6,-1,-1,-1,0,7,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3278() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,5,-1,-1,-1,0,7,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3279() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,3,-1,-1,2,5,1,-1,-1,0,0,2,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3280() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,3,-1,-1,0,4,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest3281() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,8,3,-1,-1,0,4,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest3282() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,1,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,7,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3283() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,5,-1,-1,-1,0,7,3,-1,-1,8,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3284() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,2,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,7,8,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3285() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,5,-1,-1,-1,5,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3286() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,0,-1,-1,-1,4,5,2,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3287() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,4,7,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3288() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,1,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3289() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3290() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,0,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3291() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,5,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3292() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,1,-1,-1,-1,0,4,2,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3293() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,0,-1,-1,0,5,2,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3294() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,0,7,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3295() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,1,0,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,0,7,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3296() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,4,1,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest3297() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,0,2,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3298() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,3,-1,-1,4,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3299() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,6,7,1,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1,-1,0,4,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3300() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,7,3,-1,-1,8,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3301() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,6,7,1,-1,-1,0,0,6,-1,-1,0,0,-1,-1,-1,0,4,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3302() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,1,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,7,8,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3303() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,5,2,-1,-1,-1,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3304() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,5,5,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3305() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,2,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3306() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,6,7,2,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3307() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3308() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,2,-1,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3309() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3310() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3311() {
        assertEquals(false, symKorat.isSat("1,-1,-1,1,2,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,7,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3312() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,4,1,-1,-1,6,0,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3313() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,-1,4,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3314() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,0,1,-1,-1,6,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3315() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,3,-1,-1,5,0,1,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3316() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3317() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,0,2,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3318() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,2,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3319() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,1,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3320() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,4,6,1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3321() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,4,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3322() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3323() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,3,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3324() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,4,1,-1,-1,0,6,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3325() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,5,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3326() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,4,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3327() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3328() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3329() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3330() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,3,-1,-1,-1,0,0,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3331() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,0,0,2,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3332() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3333() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,6,4,1,-1,-1,7,8,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3334() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,0,0,2,-1,-1,6,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3335() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,0,2,-1,-1,5,0,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3336() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,4,-1,-1,0,0,2,-1,-1,5,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3337() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,0,2,3,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3338() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3339() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3340() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,4,1,-1,-1,0,6,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3341() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,0,5,2,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3342() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3343() {
        assertEquals(false, symKorat.isSat("1,-1,-1,1,2,-1,-1,-1,3,4,1,-1,-1,0,5,2,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3344() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,2,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3345() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,7,0,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3346() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3347() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,5,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3348() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,4,1,-1,-1,0,0,-1,-1,-1,6,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3349() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3350() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,1,-1,-1,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3351() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3352() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,3,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3353() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3354() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,4,6,1,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3355() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,2,0,-1,-1,-1,7,0,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3356() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3357() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3358() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,3,-1,-1,5,0,2,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3359() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,2,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3360() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,5,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3361() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,6,5,2,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3362() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,2,-1,-1,5,6,2,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3363() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3364() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3365() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,5,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3366() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,4,7,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3367() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3368() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3369() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3370() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,8,7,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3371() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,5,6,2,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3372() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,3,-1,-1,0,4,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3373() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,6,5,2,-1,-1,7,0,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3374() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,8,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3375() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,6,7,2,-1,-1,5,0,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3376() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,5,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3377() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,8,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,0,8,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3378() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3379() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3380() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,8,0,3,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3381() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,5,-1,-1,-1,-1,-1,-1,-1,-1,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3382() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,5,-1,-1,-1,-1,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3383() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,5,6,2,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3384() {
        assertEquals(false, symKorat.isSat("1,-1,-1,0,2,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3385() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,4,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest3386() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,6,7,2,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3387() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3388() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,4,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3389() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,2,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3390() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,2,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,5,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3391() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,7,0,2,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3392() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3393() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3394() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,2,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3395() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,7,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3396() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,3,-1,-1,5,6,2,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3397() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,2,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3398() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,4,1,-1,-1,0,0,-1,-1,-1,6,7,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3399() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3400() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3401() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,3,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3402() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,2,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3403() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,5,-1,-1,-1,3,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3404() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,2,-1,-1,-1,4,5,2,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3405() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,-1,-1,-1,-1,4,2,1,-1,-1,5,6,3,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3406() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,6,5,2,-1,-1,7,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3407() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3408() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,2,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3409() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,4,1,-1,-1,0,6,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3410() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,6,7,2,-1,-1,0,5,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3411() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,4,0,1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3412() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,0,1,-1,-1,6,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3413() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,0,1,-1,-1,6,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3414() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,0,1,-1,-1,0,1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3415() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3416() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,0,2,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3417() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3418() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,6,7,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3419() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,0,2,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3420() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3421() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3422() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,6,-1,-1,7,6,1,-1,-1,-1,-1,-1,-1,-1,8,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3423() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3424() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,7,0,-1,-1,-1,0,0,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3425() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3426() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3427() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,3,-1,-1,-1,-1,0,0,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3428() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3429() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,4,-1,-1,-1,0,0,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3430() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,5,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3431() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,2,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3432() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,3,-1,-1,-1,0,0,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3433() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3434() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,6,7,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,8,5,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3435() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,0,0,2,-1,-1,5,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3436() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,0,2,-1,-1,5,0,5,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3437() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3438() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,0,4,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3439() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3440() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,0,2,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3441() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,5,-1,-1,-1,0,7,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3442() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3443() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3444() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3445() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,0,7,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3446() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3447() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,4,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3448() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3449() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,3,-1,-1,-1,0,7,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3450() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3451() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,4,1,-1,-1,6,0,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3452() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,3,-1,-1,4,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3453() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3454() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,0,8,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3455() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,5,-1,-1,-1,0,7,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3456() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3457() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,4,1,-1,-1,6,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3458() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3459() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,2,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3460() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,2,0,3,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3461() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3462() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,6,0,-1,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3463() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,4,6,1,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3464() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,3,-1,-1,-1,8,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3465() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,4,-1,-1,5,0,2,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3466() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,5,0,2,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3467() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,1,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3468() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,4,1,-1,-1,0,6,-1,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3469() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,0,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3470() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,2,1,-1,-1,-1,-1,-1,-1,-1,6,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3471() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,4,-1,-1,-1,7,0,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3472() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3473() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,5,-1,-1,-1,7,0,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3474() {
        assertEquals(false, symKorat.isSat("1,-1,-1,0,2,-1,-1,-1,3,4,1,-1,-1,5,0,2,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3475() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,5,0,2,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3476() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,0,2,-1,-1,6,0,4,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3477() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,0,2,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,4,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3478() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3479() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,0,2,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,3,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3480() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,4,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3481() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,4,6,1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest3482() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3483() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,4,6,1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest3484() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3485() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,2,1,-1,-1,-1,-1,-1,-1,-1,6,7,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3486() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,3,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,8,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3487() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3488() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3489() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,5,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3490() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,5,-1,-1,-1,-1,2,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3491() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,0,-1,-1,5,6,2,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3492() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3493() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,2,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3494() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,6,7,1,-1,-1,0,0,6,-1,-1,0,0,-1,-1,-1,8,4,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3495() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,4,1,-1,-1,0,6,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3496() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3497() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,4,-1,-1,4,5,1,-1,-1,6,2,3,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3498() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,0,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,8,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3499() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,8,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,8,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3500() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,2,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,3,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3501() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,5,-1,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3502() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,5,2,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3503() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,2,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3504() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3505() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,1,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3506() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,3,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3507() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3508() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,3,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3509() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,4,7,3,-1,-1,0,8,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3510() {
        assertEquals(false, symKorat.isSat("1,-1,-1,1,2,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,7,0,2,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3511() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3512() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3513() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,2,1,-1,-1,-1,-1,-1,-1,-1,6,7,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3514() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,5,0,-1,-1,-1,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3515() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,8,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,7,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3516() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,1,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3517() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,1,0,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3518() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3519() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,3,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3520() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,4,-1,-1,5,6,2,-1,-1,7,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3521() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,2,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,1,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3522() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3523() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3524() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,6,7,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,5,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest3525() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,5,-1,-1,-1,-1,5,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3526() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,5,-1,-1,-1,1,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3527() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,6,7,1,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1,-1,8,4,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3528() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3529() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,6,7,1,-1,-1,0,-1,-1,-1,-1,0,0,6,-1,-1,8,5,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3530() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,4,1,-1,-1,0,6,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3531() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,4,7,3,-1,-1,8,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3532() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,0,1,-1,-1,6,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3533() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,0,-1,-1,-1,4,0,1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3534() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,6,0,1,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3535() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,-1,-1,-1,6,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3536() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,3,-1,-1,2,4,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3537() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,6,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3538() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3539() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3540() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3541() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,3,-1,-1,-1,0,0,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3542() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3543() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,-1,-1,-1,4,7,1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3544() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,4,6,1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3545() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,8,-1,-1,-1,0,0,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3546() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3547() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,4,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3548() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,3,-1,-1,-1,-1,0,0,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3549() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,0,2,-1,-1,5,6,6,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3550() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,0,2,-1,-1,5,6,0,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3551() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,0,-1,-1,0,5,2,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3552() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,4,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3553() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3554() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,-1,-1,-1,7,4,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3555() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,-1,-1,-1,4,7,1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3556() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,1,-1,-1,-1,-1,0,7,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3557() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,7,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3558() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,8,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3559() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3560() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,6,0,-1,-1,-1,0,7,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3561() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3562() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3563() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,2,-1,-1,-1,3,4,1,-1,-1,0,5,2,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3564() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,2,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3565() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3566() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,0,2,3,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3567() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,4,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3568() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3569() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3570() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3571() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,2,0,-1,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3572() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,2,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3573() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3574() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,3,-1,-1,-1,7,0,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3575() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3576() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,4,-1,-1,5,0,2,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3577() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,2,0,3,-1,-1,6,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3578() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,0,2,-1,-1,6,7,4,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3579() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3580() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,4,5,2,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3581() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,4,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3582() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,0,0,5,-1,-1,7,4,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3583() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,0,5,-1,-1,7,4,3,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3584() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,4,7,3,-1,-1,0,8,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3585() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,4,6,1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest3586() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,2,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3587() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,5,0,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3588() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3589() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,4,6,1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest3590() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,1,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,8,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3591() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,8,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3592() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,5,-1,-1,-1,-1,-1,-1,-1,-1,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3593() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,3,-1,-1,-1,4,5,2,-1,-1,-1,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3594() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,0,1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3595() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,1,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3596() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,0,2,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3597() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,4,1,-1,-1,6,0,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3598() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,2,0,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,8,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3599() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,5,-1,-1,-1,-1,-1,-1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3600() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,3,-1,-1,4,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3601() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,0,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3602() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,5,-1,-1,-1,-1,3,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3603() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3604() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,3,-1,-1,0,4,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3605() {
        assertEquals(false, symKorat.isSat("1,-1,-1,0,2,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3606() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3607() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3608() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,2,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,8,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3609() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,6,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3610() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,7,-1,-1,-1,8,7,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3611() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,0,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3612() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3613() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3614() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,-1,-1,-1,-1,-1,0,3,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3615() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,-1,-1,-1,-1,-1,7,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3616() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,-1,-1,-1,-1,5,2,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3617() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3618() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,2,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3619() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,3,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3620() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3621() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,4,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3622() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,0,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,8,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3623() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,2,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3624() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3625() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,2,-1,-1,-1,-1,0,0,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3626() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,0,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3627() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3628() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,0,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3629() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,4,-1,-1,0,0,2,-1,-1,5,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3630() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,3,-1,-1,2,4,1,-1,-1,5,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3631() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,4,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3632() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3633() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,4,6,1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3634() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,-1,-1,-1,7,8,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,4,3,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3635() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3636() {
        assertEquals(false, symKorat.isSat("1,-1,-1,1,2,-1,-1,-1,3,4,1,-1,-1,0,5,2,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3637() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,0,5,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3638() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3639() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,5,-1,-1,-1,8,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3640() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,8,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3641() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,2,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3642() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3643() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,2,-1,-1,-1,7,0,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3644() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3645() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,6,-1,-1,-1,7,0,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3646() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,3,-1,-1,4,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3647() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3648() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3649() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,0,2,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3650() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,2,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3651() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,0,-1,-1,5,0,2,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3652() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,5,-1,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3653() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,5,-1,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3654() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,3,-1,-1,2,6,1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3655() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3656() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,3,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3657() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,4,-1,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3658() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3659() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,5,-1,-1,-1,-1,-1,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3660() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,5,-1,-1,-1,-1,6,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3661() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,5,-1,-1,-1,2,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3662() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,1,0,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3663() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,6,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3664() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,2,-1,-1,5,6,2,-1,-1,7,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3665() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,8,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3666() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,4,1,-1,-1,6,0,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3667() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,6,7,2,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3668() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,4,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest3669() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,4,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3670() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3671() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3672() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,0,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3673() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,3,-1,-1,2,6,1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3674() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,8,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3675() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,2,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3676() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,-1,-1,-1,-1,5,2,1,-1,-1,-1,-1,-1,-1,-1,6,7,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3677() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3678() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,6,4,1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest3679() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3680() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,3,-1,-1,5,6,2,-1,-1,7,0,2,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3681() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,5,6,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3682() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,3,-1,-1,2,6,1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3683() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,8,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,0,1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3684() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,6,7,1,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1,-1,8,4,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3685() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,8,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3686() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,1,-1,-1,2,6,3,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3687() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,1,-1,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3688() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,2,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,2,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3689() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,6,7,2,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3690() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,0,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3691() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,4,0,1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3692() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,4,0,1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3693() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,4,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3694() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,4,-1,-1,0,0,2,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3695() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,6,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3696() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,0,0,2,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3697() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,2,-1,-1,-1,3,4,1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3698() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3699() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3700() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,1,7,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3701() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3702() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,3,0,-1,-1,-1,0,0,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3703() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3704() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,6,5,1,-1,-1,0,-1,-1,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3705() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3706() {
        assertEquals(false, symKorat.isSat("1,-1,-1,1,2,-1,-1,-1,3,4,1,-1,-1,0,0,2,-1,-1,5,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3707() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,3,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3708() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,1,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3709() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,4,1,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3710() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3711() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,6,-1,-1,7,6,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,8,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3712() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3713() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,4,6,1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3714() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,1,-1,-1,-1,0,0,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3715() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,3,-1,-1,0,0,2,-1,-1,5,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3716() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,0,2,-1,-1,5,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3717() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,0,2,-1,-1,5,6,2,-1,-1,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3718() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,0,2,3,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3719() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,0,8,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3720() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,4,6,1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3721() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,6,5,1,-1,-1,0,-1,-1,-1,-1,0,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3722() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,2,-1,-1,-1,0,7,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3723() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,4,6,1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3724() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3725() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3726() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,6,4,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3727() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,8,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3728() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,6,-1,-1,-1,7,0,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3729() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3730() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,4,1,-1,-1,0,6,-1,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3731() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,4,1,-1,-1,6,0,-1,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3732() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,6,4,1,-1,-1,7,0,-1,-1,-1,0,0,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3733() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3734() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,1,0,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3735() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,3,-1,-1,2,5,1,-1,-1,-1,-1,-1,-1,-1,6,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3736() {
        assertEquals(false, symKorat.isSat("1,-1,-1,1,2,-1,-1,-1,3,4,1,-1,-1,5,0,2,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3737() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3738() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3739() {
        assertEquals(false, symKorat.isSat("1,-1,-1,1,2,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3740() {
        assertEquals(false, symKorat.isSat("1,-1,-1,1,2,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3741() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,8,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,0,2,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3742() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,4,7,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3743() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3744() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,5,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3745() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,1,-1,-1,-1,4,5,2,-1,-1,-1,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3746() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3747() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,1,-1,-1,2,6,3,-1,-1,7,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3748() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,7,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3749() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,3,-1,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3750() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,2,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3751() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,6,-1,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3752() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,3,-1,-1,5,6,2,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3753() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,5,3,-1,-1,-1,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3754() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,7,-1,-1,-1,-1,8,7,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3755() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,8,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3756() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,8,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3757() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,5,6,-1,-1,-1,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3758() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,6,7,2,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3759() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,8,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,6,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3760() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,0,3,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3761() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,4,1,-1,-1,0,0,-1,-1,-1,6,7,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3762() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3763() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,2,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,4,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3764() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,8,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3765() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,1,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3766() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,3,-1,-1,2,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3767() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,4,-1,-1,-1,5,0,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3768() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,-1,4,-1,-1,-1,5,0,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3769() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,-1,-1,-1,5,0,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3770() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,0,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3771() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,-1,-1,-1,-1,-1,7,6,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3772() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,2,0,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3773() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,7,8,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3774() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3775() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3776() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,4,6,1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3777() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3778() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,4,-1,-1,-1,0,0,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3779() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3780() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3781() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3782() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,0,0,2,-1,-1,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3783() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,1,0,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3784() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3785() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3786() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,0,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3787() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,0,8,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3788() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,2,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3789() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,4,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3790() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,2,0,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3791() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,1,-1,-1,-1,0,7,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3792() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,7,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3793() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,3,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3794() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3795() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,3,-1,-1,2,5,1,-1,-1,-1,-1,-1,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3796() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,0,5,2,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3797() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3798() {
        assertEquals(false, symKorat.isSat("1,-1,-1,1,2,-1,-1,-1,3,4,1,-1,-1,0,5,2,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3799() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,4,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3800() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,5,0,2,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3801() {
        assertEquals(false, symKorat.isSat("1,-1,-1,0,2,-1,-1,-1,3,4,1,-1,-1,5,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3802() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3803() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,3,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3804() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,0,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3805() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,0,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3806() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,2,-1,-1,-1,3,4,1,-1,-1,5,0,2,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3807() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,4,-1,-1,5,0,2,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3808() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,3,-1,-1,5,0,2,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3809() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,5,0,2,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3810() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,0,-1,-1,5,0,2,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3811() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,4,-1,-1,5,0,2,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3812() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,5,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3813() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,5,5,-1,-1,-1,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3814() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,8,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3815() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,4,-1,-1,5,6,2,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3816() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,3,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3817() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,5,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3818() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3819() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,3,-1,-1,5,6,2,-1,-1,7,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3820() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,7,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3821() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,5,-1,-1,-1,4,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3822() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,3,-1,-1,2,6,1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3823() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,2,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3824() {
        assertEquals(false, symKorat.isSat("1,-1,-1,0,2,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,7,0,2,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3825() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3826() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,3,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3827() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1,-1,4,5,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3828() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,6,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3829() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,4,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest3830() {
        assertEquals(false, symKorat.isSat("1,-1,-1,0,2,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,7,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3831() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,0,6,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3832() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,8,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,0,6,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3833() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,8,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3834() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,4,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3835() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,4,-1,-1,-1,0,-1,-1,-1,5,0,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3836() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,6,0,3,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3837() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3838() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,4,6,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3839() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3840() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3841() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest3842() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,7,0,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest3843() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,6,7,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,0,-1,-1,-1,8,0,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest3844() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,5,-1,-1,-1,7,0,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest3845() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3846() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest3847() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,6,5,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3848() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3849() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,7,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3850() {
        assertEquals(false, symKorat.isSat("1,-1,-1,1,2,-1,-1,-1,3,4,1,-1,-1,5,0,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3851() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3852() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,4,-1,-1,-1,-1,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3853() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,5,-1,-1,-1,5,0,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3854() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,3,-1,-1,-1,5,0,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3855() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,5,-1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3856() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,8,0,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest3857() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,8,-1,-1,-1,-1,0,0,-1,-1,-1,8,0,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest3858() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,8,0,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest3859() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,5,0,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3860() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest3861() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest3862() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest3863() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,2,-1,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3864() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,6,0,2,-1,-1,7,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3865() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,0,-1,-1,5,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3866() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,2,-1,-1,-1,5,6,2,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3867() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,6,7,2,-1,-1,-1,2,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3868() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3869() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,7,5,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3870() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,4,1,-1,-1,6,7,3,-1,-1,0,8,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3871() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,6,0,2,-1,-1,7,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3872() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,4,-1,-1,0,0,-1,-1,-1,5,0,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3873() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,6,0,3,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3874() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3875() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,-1,-1,-1,4,7,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,0,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest3876() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,3,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3877() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3878() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,7,-1,-1,-1,8,0,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3879() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,0,0,7,-1,-1,-1,-1,-1,-1,-1,0,8,-1,-1,-1,4,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3880() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3881() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,2,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3882() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,6,0,2,-1,-1,2,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3883() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,0,5,2,-1,-1,6,0,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3884() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,6,7,2,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest3885() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,4,5,-1,-1,-1,0,0,3,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3886() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,4,5,-1,-1,-1,0,0,3,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3887() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,0,0,-1,-1,-1,5,6,2,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3888() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,4,-1,-1,5,4,1,-1,-1,2,6,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3889() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,4,1,-1,-1,6,7,3,-1,-1,8,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3890() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,4,0,-1,-1,-1,7,8,3,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3891() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,4,0,3,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3892() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,0,3,-1,-1,-1,4,0,2,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3893() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,3,-1,-1,0,0,-1,-1,-1,5,0,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3894() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,0,-1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3895() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,6,4,1,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3896() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,4,1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest3897() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,2,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest3898() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,1,0,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3899() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3900() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,4,5,-1,-1,-1,0,0,3,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3901() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,4,-1,-1,-1,5,6,2,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3902() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,2,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3903() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3904() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,0,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3905() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3906() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,1,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3907() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3908() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,-1,6,-1,-1,-1,5,0,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3909() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,2,-1,-1,-1,5,0,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3910() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,2,-1,-1,0,0,-1,-1,-1,5,0,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3911() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,-1,-1,-1,7,8,1,-1,-1,0,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,4,0,3,-1"));
    }

    @Test
    public void TreeMapSolverTest3912() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,8,0,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest3913() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest3914() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,3,-1,-1,-1,-1,7,0,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest3915() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3916() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,4,5,-1,-1,-1,0,0,3,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3917() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,6,7,2,-1,-1,6,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3918() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3919() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,0,-1,-1,0,0,-1,-1,-1,5,6,2,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3920() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,3,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3921() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,0,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3922() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,-1,5,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3923() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,7,0,-1,-1,-1,0,0,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest3924() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,2,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,6,0,3,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3925() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,0,6,-1,-1,7,0,-1,-1,-1,4,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3926() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,7,0,-1,-1,-1,7,0,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest3927() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3928() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,5,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3929() {
        assertEquals(false, symKorat.isSat("1,-1,-1,1,2,-1,-1,-1,3,4,1,-1,-1,0,5,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3930() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,8,0,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest3931() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,6,5,1,-1,-1,0,-1,-1,-1,-1,7,0,3,-1,-1,0,8,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3932() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,4,5,6,-1,-1,0,0,3,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3933() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,0,-1,-1,-1,5,6,2,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3934() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,1,0,-1,-1,-1,5,6,2,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3935() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,6,4,1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3936() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3937() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,6,0,-1,-1,-1,7,5,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3938() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,6,0,2,-1,-1,5,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3939() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,3,-1,-1,5,2,1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3940() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,8,0,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest3941() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,0,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3942() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,5,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,8,0,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest3943() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,0,0,-1,-1,-1,8,0,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest3944() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3945() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,6,0,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3946() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest3947() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3948() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,4,-1,-1,6,0,2,-1,-1,0,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3949() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,0,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3950() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,2,0,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3951() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,6,7,3,-1,-1,0,0,5,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3952() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,8,4,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest3953() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,2,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3954() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,5,0,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3955() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,0,6,2,-1,-1,-1,1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3956() {
        assertEquals(false, symKorat.isSat("1,-1,-1,1,2,-1,-1,-1,3,4,1,-1,-1,0,0,-1,-1,-1,0,5,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3957() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,0,6,3,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3958() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,2,0,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,0,6,3,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3959() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,7,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3960() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,3,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,8,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest3961() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest3962() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,7,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest3963() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,0,-1,-1,5,0,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3964() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,0,5,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3965() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest3966() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,4,6,1,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest3967() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,3,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest3968() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,4,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest3969() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,0,0,6,-1,-1,7,8,-1,-1,-1,0,4,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3970() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,4,1,-1,-1,0,6,3,-1,-1,7,8,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3971() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,6,7,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest3972() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,0,6,2,-1,-1,0,4,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3973() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,7,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3974() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,5,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3975() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,4,5,0,-1,-1,-1,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3976() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,6,7,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3977() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,6,4,1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest3978() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,4,6,1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest3979() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,1,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest3980() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,2,-1,-1,-1,3,4,1,-1,-1,0,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3981() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,0,-1,-1,0,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3982() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,2,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3983() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,0,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3984() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,1,-1,-1,6,7,2,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3985() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,-1,0,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3986() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,2,0,-1,-1,-1,0,5,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3987() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,0,6,3,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3988() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,4,6,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,7,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3989() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,8,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest3990() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,7,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest3991() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest3992() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,3,0,-1,-1,-1,0,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest3993() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,6,7,1,-1,-1,0,0,7,-1,-1,0,0,-1,-1,-1,0,8,-1,-1,-1,0,4,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3994() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,0,0,6,-1,-1,7,8,-1,-1,-1,0,4,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3995() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,0,-1,-1,5,6,2,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3996() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,4,5,-1,-1,-1,5,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3997() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,1,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,6,7,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3998() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,4,7,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest3999() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,4,7,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4000() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,0,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,6,7,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4001() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,1,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4002() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,6,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest4003() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest4004() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,0,0,6,-1,-1,0,7,-1,-1,-1,8,4,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4005() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,6,7,2,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4006() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest4007() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,4,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4008() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,4,-1,-1,-1,5,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4009() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,4,-1,-1,-1,-1,0,0,-1,-1,-1,0,7,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4010() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,1,-1,-1,-1,0,0,-1,-1,-1,0,8,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest4011() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,-1,-1,-1,7,4,1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest4012() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4013() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,0,0,6,-1,-1,7,0,-1,-1,-1,0,4,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4014() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,0,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4015() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,4,1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,8,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4016() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,4,-1,-1,5,0,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4017() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,6,5,1,-1,-1,0,-1,-1,-1,-1,0,7,3,-1,-1,0,8,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4018() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,2,6,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,7,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4019() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,6,7,-1,-1,-1,0,5,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4020() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,0,-1,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4021() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,6,7,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4022() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4023() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,5,0,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4024() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4025() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4026() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,0,2,-1,-1,-1,6,7,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4027() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest4028() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,4,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4029() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,0,6,2,-1,-1,6,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4030() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,4,-1,-1,-1,0,5,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4031() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,5,-1,-1,-1,-1,7,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4032() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,7,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4033() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4034() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,5,-1,-1,0,6,2,-1,-1,0,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4035() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,6,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4036() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,4,-1,-1,0,0,-1,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4037() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,6,7,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4038() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4039() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4040() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest4041() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,6,7,2,-1,-1,4,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4042() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,0,3,-1,-1,-1,0,4,2,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4043() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,2,-1,-1,-1,5,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4044() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,2,-1,-1,-1,3,4,1,-1,-1,0,0,-1,-1,-1,0,5,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4045() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,0,6,3,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4046() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,8,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest4047() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,6,-1,-1,7,8,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,8,-1,-1,0,0,-1,-1,-1,0,6,3,-1"));
    }

    @Test
    public void TreeMapSolverTest4048() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,4,-1,-1,5,4,1,-1,-1,0,2,3,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4049() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4050() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,0,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,7,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4051() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4052() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,3,-1,-1,5,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4053() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,0,6,2,-1,-1,2,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4054() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,3,-1,-1,-1,4,5,2,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4055() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,6,7,2,-1,-1,5,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4056() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,4,1,-1,-1,6,7,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4057() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,0,1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4058() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4059() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,5,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4060() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,-1,5,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4061() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,-1,6,-1,-1,-1,0,5,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4062() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,7,-1,-1,-1,0,0,-1,-1,-1,0,7,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4063() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,7,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4064() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,3,-1,-1,-1,0,0,-1,-1,-1,0,8,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest4065() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,0,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,8,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest4066() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,8,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest4067() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4068() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4069() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,0,8,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest4070() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,4,1,-1,-1,0,6,3,-1,-1,0,7,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4071() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4072() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest4073() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,5,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4074() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,0,5,2,-1,-1,0,6,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4075() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,0,6,2,-1,-1,0,7,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4076() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,7,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest4077() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,4,5,-1,-1,-1,-1,1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4078() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,4,5,2,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4079() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,0,-1,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4080() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,3,0,-1,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4081() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,2,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4082() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,3,-1,-1,6,2,1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4083() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,4,1,-1,-1,6,7,3,-1,-1,8,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4084() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,7,5,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4085() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,6,-1,-1,7,6,2,-1,-1,0,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4086() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,4,5,6,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4087() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,4,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4088() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,0,6,2,-1,-1,-1,2,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4089() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,0,6,2,-1,-1,5,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4090() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,0,6,2,-1,-1,2,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4091() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,7,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4092() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,0,8,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest4093() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,4,-1,-1,-1,7,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4094() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,4,-1,-1,-1,0,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4095() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,0,-1,-1,-1,0,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4096() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest4097() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,0,6,-1,-1,7,8,-1,-1,-1,0,4,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4098() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,1,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest4099() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,2,6,3,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4100() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,6,4,1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest4101() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,4,6,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4102() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,4,1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest4103() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest4104() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest4105() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4106() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,-1,-1,-1,0,4,1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4107() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,0,6,1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4108() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4109() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,4,1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4110() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,8,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4111() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,4,7,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,8,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4112() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,3,-1,-1,-1,7,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4113() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,0,5,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4114() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4115() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,2,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4116() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,4,6,1,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4117() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,7,0,-1,-1,-1,7,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4118() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,3,5,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4119() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,0,0,2,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4120() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,6,7,2,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4121() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,1,3,-1,-1,-1,0,4,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4122() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,0,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4123() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,3,-1,-1,-1,5,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4124() {
        assertEquals(false, symKorat.isSat("1,-1,-1,0,2,-1,-1,-1,3,4,1,-1,-1,0,0,-1,-1,-1,0,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4125() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,0,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,0,6,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4126() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,2,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4127() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,1,-1,-1,-1,-1,0,0,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4128() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4129() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,0,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4130() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4131() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,3,0,-1,-1,-1,7,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4132() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4133() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4134() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,4,5,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4135() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,4,-1,-1,-1,5,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4136() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4137() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,0,0,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4138() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,6,4,1,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4139() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,0,5,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4140() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,-1,-1,-1,4,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4141() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,6,7,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4142() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,0,5,2,-1,-1,6,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4143() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4144() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,4,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4145() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4146() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4147() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,6,7,2,-1,-1,-1,8,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4148() {
        assertEquals(false, symKorat.isSat("1,-1,-1,1,2,-1,-1,-1,3,4,1,-1,-1,0,0,-1,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4149() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,6,7,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4150() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4151() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,6,4,1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest4152() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,6,0,-1,-1,-1,7,5,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4153() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,2,-1,-1,5,0,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4154() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest4155() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,7,0,-1,-1,-1,4,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4156() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,0,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4157() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4158() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,0,5,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4159() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,6,-1,-1,7,8,2,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest4160() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,4,5,-1,-1,-1,-1,3,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4161() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4162() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,-1,0,-1,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4163() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,6,7,2,-1,-1,-1,3,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4164() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest4165() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,5,0,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4166() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,3,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest4167() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,4,5,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4168() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,0,-1,-1,-1,0,-1,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4169() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,1,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4170() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4171() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,4,-1,-1,5,4,1,-1,-1,6,2,3,-1,-1,7,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4172() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,4,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4173() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,6,7,2,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4174() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,4,-1,-1,5,4,1,-1,-1,6,2,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4175() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,4,0,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4176() {
        assertEquals(false, symKorat.isSat("1,-1,-1,0,2,-1,-1,-1,3,4,1,-1,-1,5,0,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4177() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest4178() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,0,6,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest4179() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,3,-1,-1,6,2,1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4180() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,2,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4181() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,0,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4182() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,3,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,6,7,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4183() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,2,0,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,6,7,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4184() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,2,0,-1,-1,-1,6,7,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4185() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4186() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,6,-1,-1,6,7,2,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4187() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4188() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,4,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4189() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,0,0,6,-1,-1,7,0,-1,-1,-1,8,4,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4190() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,1,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4191() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,4,5,-1,-1,-1,1,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4192() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,-1,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4193() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4194() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4195() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,0,4,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4196() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,4,0,-1,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4197() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,5,0,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4198() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,3,-1,-1,0,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4199() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,0,5,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4200() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,1,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4201() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,0,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4202() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,-1,-1,-1,0,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4203() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,2,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4204() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,3,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4205() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4206() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4207() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,6,7,1,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4208() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,6,-1,-1,7,8,1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1"));
    }

    @Test
    public void TreeMapSolverTest4209() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4210() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4211() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,7,-1,-1,-1,8,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4212() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4213() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,5,-1,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4214() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4215() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,6,-1,-1,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4216() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,3,-1,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4217() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4218() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,5,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4219() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,3,-1,-1,4,2,1,-1,-1,5,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4220() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4221() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4222() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,3,-1,-1,5,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4223() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,6,7,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4224() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,0,6,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4225() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,2,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4226() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4227() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,6,-1,-1,-1,0,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4228() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,0,-1,-1,-1,7,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4229() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,2,-1,-1,-1,7,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4230() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,3,-1,-1,5,2,1,-1,-1,-1,-1,-1,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4231() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,2,-1,-1,-1,0,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4232() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,7,-1,-1,-1,0,8,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4233() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4234() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,4,1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4235() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,4,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4236() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,2,0,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4237() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,-1,-1,-1,0,4,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4238() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,0,6,2,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4239() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4240() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,4,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4241() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,1,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4242() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4243() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,4,6,1,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4244() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,0,8,-1,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4245() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,4,5,-1,-1,-1,-1,5,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4246() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,1,3,-1,-1,-1,4,5,2,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4247() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,-1,6,-1,-1,-1,5,7,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4248() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,0,-1,-1,-1,6,5,2,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4249() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,7,0,-1,-1,-1,0,0,-1,-1,-1,8,7,3,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4250() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4251() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4252() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,4,6,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4253() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,3,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4254() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4255() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,0,6,-1,-1,0,7,-1,-1,-1,8,4,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4256() {
        assertEquals(false, symKorat.isSat("1,-1,-1,0,2,-1,-1,-1,3,4,1,-1,-1,0,0,-1,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4257() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,2,5,1,-1,-1,-1,-1,-1,-1,-1,6,7,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4258() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,0,6,-1,-1,7,0,-1,-1,-1,8,4,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4259() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,4,-1,-1,5,4,1,-1,-1,6,2,3,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4260() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,0,-1,-1,6,7,2,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4261() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,5,-1,-1,-1,6,5,2,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4262() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,0,0,6,-1,-1,0,0,-1,-1,-1,7,4,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4263() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,6,7,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4264() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4265() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,0,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest4266() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,3,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4267() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4268() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,4,8,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest4269() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4270() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,4,-1,-1,5,0,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4271() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest4272() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,4,-1,-1,0,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4273() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,4,5,-1,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4274() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,4,5,5,-1,-1,-1,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4275() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,4,-1,-1,-1,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4276() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,3,-1,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4277() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,6,7,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4278() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,4,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4279() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,7,-1,-1,-1,4,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4280() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest4281() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,7,-1,-1,-1,4,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4282() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4283() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,4,5,-1,-1,-1,-1,-1,-1,-1,-1,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4284() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,4,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4285() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest4286() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4287() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest4288() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4289() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,1,-1,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4290() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,2,-1,-1,-1,3,4,1,-1,-1,0,0,-1,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4291() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,6,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4292() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,4,5,-1,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4293() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,0,3,2,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4294() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,0,4,1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4295() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,0,5,1,-1,-1,6,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,0,5,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4296() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,6,-1,-1,0,7,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4297() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,0,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4298() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,-1,-1,-1,0,6,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4299() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4300() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,-1,-1,-1,7,8,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1"));
    }

    @Test
    public void TreeMapSolverTest4301() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,2,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4302() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,3,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4303() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,1,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4304() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,5,-1,-1,-1,-1,7,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4305() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,8,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4306() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4307() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4308() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4309() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,0,-1,-1,-1,0,-1,-1,-1,0,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4310() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,0,6,2,-1,-1,4,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4311() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,0,0,-1,-1,-1,0,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4312() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4313() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,6,5,1,-1,-1,0,-1,-1,-1,-1,0,7,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4314() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4315() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4316() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,6,-1,-1,-1,7,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4317() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,4,1,-1,-1,0,6,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4318() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,4,6,1,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4319() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4320() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4321() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,2,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4322() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,0,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4323() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4324() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,3,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4325() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,4,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4326() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,4,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4327() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4328() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,4,0,-1,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4329() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4330() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,5,0,-1,-1,-1,0,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4331() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4332() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,6,4,1,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4333() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4334() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,6,7,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,5,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4335() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,4,6,1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4336() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,1,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4337() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,0,2,-1,-1,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4338() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4339() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,4,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4340() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,4,5,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4341() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4342() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,0,6,2,-1,-1,5,7,2,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4343() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,4,5,-1,-1,-1,-1,-1,-1,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4344() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,4,5,-1,-1,-1,4,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4345() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,2,-1,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4346() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,0,0,-1,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4347() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest4348() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,5,7,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4349() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,0,2,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4350() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,4,5,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4351() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,4,5,1,-1,-1,-1,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4352() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,0,0,-1,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4353() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,3,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4354() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,0,0,6,-1,-1,0,0,-1,-1,-1,7,4,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4355() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4356() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,2,5,1,-1,-1,-1,-1,-1,-1,-1,6,7,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4357() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,0,-1,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4358() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,7,0,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4359() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,6,0,-1,-1,-1,5,7,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4360() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,6,7,2,-1,-1,3,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4361() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4362() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,7,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4363() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,2,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4364() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,6,7,1,-1,-1,0,0,7,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,8,4,3,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4365() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest4366() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4367() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,4,5,0,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4368() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,-1,0,-1,-1,-1,6,5,2,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4369() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest4370() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest4371() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,0,3,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4372() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,0,5,1,-1,-1,6,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,0,2,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4373() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,3,-1,-1,-1,0,4,1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4374() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,-1,-1,-1,0,6,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4375() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,0,6,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4376() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,3,-1,-1,-1,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4377() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,1,7,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4378() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4379() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,6,7,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4380() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,8,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4381() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4382() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4383() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4384() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,0,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4385() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,7,-1,-1,-1,7,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4386() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,2,-1,-1,-1,-1,7,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4387() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,3,-1,-1,-1,-1,7,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4388() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,7,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4389() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,4,-1,-1,5,6,2,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4390() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,5,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4391() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,-1,6,-1,-1,-1,0,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4392() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,4,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4393() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,5,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4394() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4395() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4396() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,7,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4397() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,6,0,-1,-1,-1,0,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4398() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,5,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4399() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,7,0,-1,-1,-1,0,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4400() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,2,-1,-1,-1,0,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4401() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,4,1,-1,-1,0,6,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4402() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,2,-1,-1,0,5,2,-1,-1,0,6,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4403() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,6,-1,-1,0,7,2,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4404() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,6,5,2,-1,-1,0,7,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4405() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,4,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4406() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,1,3,-1,-1,-1,4,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4407() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,2,-1,-1,-1,3,4,1,-1,-1,0,0,-1,-1,-1,5,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4408() {
        assertEquals(false, symKorat.isSat("1,-1,-1,0,2,-1,-1,-1,3,4,1,-1,-1,0,0,-1,-1,-1,5,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4409() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,0,0,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4410() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,4,1,-1,-1,6,0,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4411() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,4,6,1,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4412() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4413() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4414() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,4,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4415() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,1,0,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4416() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,0,-1,-1,0,5,2,-1,-1,6,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4417() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,6,7,1,-1,-1,0,0,7,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,8,4,3,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4418() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,7,0,-1,-1,-1,4,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4419() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,0,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest4420() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,0,6,-1,-1,-1,7,5,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4421() {
        assertEquals(false, symKorat.isSat("1,-1,-1,0,2,-1,-1,-1,3,4,1,-1,-1,0,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4422() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4423() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,2,-1,-1,-1,0,-1,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4424() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4425() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4426() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,2,7,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4427() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,0,-1,-1,5,0,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4428() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest4429() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,4,5,3,-1,-1,-1,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4430() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,4,5,5,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4431() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,6,7,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,5,8,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest4432() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,8,7,3,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4433() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,4,5,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4434() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,6,7,2,-1,-1,1,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4435() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,4,5,-1,-1,-1,-1,4,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4436() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,4,1,-1,-1,6,7,3,-1,-1,8,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4437() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4438() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,6,7,2,-1,-1,2,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4439() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,6,7,2,-1,-1,-1,2,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4440() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,4,1,-1,-1,6,7,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4441() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,4,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4442() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,3,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4443() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,0,5,1,-1,-1,0,6,-1,-1,-1,0,0,3,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4444() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,0,-1,-1,-1,0,5,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4445() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4446() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,0,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4447() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,5,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4448() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4449() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,6,4,1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4450() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4451() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4452() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4453() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4454() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,4,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4455() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4456() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,3,-1,-1,-1,-1,7,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4457() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,5,-1,-1,-1,8,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4458() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4459() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4460() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,7,-1,-1,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4461() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,0,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4462() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,0,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4463() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4464() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4465() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,4,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4466() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,1,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4467() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,7,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4468() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,3,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,7,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4469() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,0,0,2,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4470() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,5,-1,-1,-1,0,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4471() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,0,-1,-1,-1,0,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4472() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,2,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,0,6,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4473() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4474() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4475() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4476() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,4,1,-1,-1,0,6,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4477() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4478() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4479() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,5,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4480() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,6,5,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4481() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,6,0,2,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4482() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4483() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,6,4,1,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4484() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,4,-1,-1,-1,7,0,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4485() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4486() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,7,0,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4487() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4488() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,4,1,-1,-1,6,0,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4489() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,2,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4490() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,6,4,1,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4491() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,4,5,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4492() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,5,6,2,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4493() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,4,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4494() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,6,7,2,-1,-1,8,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4495() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,4,8,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest4496() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4497() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,4,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4498() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,3,-1,-1,6,2,1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4499() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,7,-1,-1,-1,4,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4500() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,4,5,-1,-1,-1,-1,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4501() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,6,7,2,-1,-1,2,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4502() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,2,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest4503() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,2,3,-1,-1,-1,4,5,2,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4504() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,6,7,2,-1,-1,4,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4505() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,4,6,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4506() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4507() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,6,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4508() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,4,-1,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4509() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,6,0,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4510() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,2,0,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest4511() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4512() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,2,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,6,7,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4513() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,6,7,2,-1,-1,1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4514() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,4,8,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest4515() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,7,0,-1,-1,-1,4,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4516() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest4517() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,6,7,2,-1,-1,-1,7,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4518() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,2,-1,-1,0,0,-1,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4519() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,2,-1,-1,0,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4520() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,1,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest4521() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,1,0,-1,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4522() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,0,6,-1,-1,0,0,-1,-1,-1,7,4,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4523() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,0,5,1,-1,-1,1,6,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4524() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,0,5,1,-1,-1,2,6,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4525() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,0,-1,-1,-1,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4526() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,0,0,2,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4527() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,1,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4528() {
        assertEquals(false, symKorat.isSat("1,-1,-1,1,2,-1,-1,-1,3,4,1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4529() {
        assertEquals(false, symKorat.isSat("1,-1,-1,0,2,-1,-1,-1,3,4,1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4530() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4531() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,3,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4532() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4533() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,2,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,8,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4534() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,8,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4535() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,3,-1,-1,-1,8,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4536() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,2,0,-1,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4537() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,4,1,-1,-1,0,0,3,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4538() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,1,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4539() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4540() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4541() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4542() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4543() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,0,6,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4544() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4545() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4546() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,0,-1,-1,-1,0,4,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4547() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,2,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4548() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,4,-1,-1,-1,0,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4549() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,2,-1,-1,5,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4550() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,0,6,2,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4551() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,6,7,2,-1,-1,0,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4552() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,3,-1,-1,0,0,-1,-1,-1,5,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4553() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,6,-1,-1,7,6,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,8,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4554() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,5,0,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4555() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4556() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,7,0,-1,-1,-1,7,0,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4557() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,3,-1,-1,0,5,2,-1,-1,6,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4558() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4559() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,0,-1,-1,5,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4560() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,1,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4561() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,0,0,7,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,8,4,3,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4562() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,5,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4563() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,0,0,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4564() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest4565() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,6,7,2,-1,-1,8,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4566() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,4,5,-1,-1,-1,-1,6,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4567() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,6,7,2,-1,-1,-1,1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4568() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,0,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4569() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest4570() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,1,0,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest4571() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,4,1,-1,-1,6,7,3,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4572() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,6,7,2,-1,-1,-1,6,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4573() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,2,0,-1,-1,-1,5,6,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4574() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4575() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,4,5,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4576() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4577() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,4,1,-1,-1,6,7,3,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4578() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,4,5,-1,-1,-1,-1,-1,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4579() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,2,-1,-1,-1,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4580() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,6,7,2,-1,-1,-1,5,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4581() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,6,7,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4582() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4583() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,0,6,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4584() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,3,-1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4585() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,-1,0,-1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4586() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,0,0,1,-1,-1,3,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4587() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,0,-1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4588() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,-1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4589() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,2,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4590() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,2,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4591() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,6,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4592() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4593() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,1,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4594() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4595() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,0,1,-1,-1,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4596() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4597() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4598() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4599() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4600() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4601() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,2,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4602() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,8,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4603() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,8,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4604() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,2,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4605() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4606() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4607() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4608() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4609() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,4,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4610() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,4,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4611() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,6,-1,-1,-1,7,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4612() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,0,0,2,-1,-1,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4613() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4614() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,0,-1,-1,5,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4615() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,4,-1,-1,-1,5,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4616() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4617() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4618() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4619() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,6,0,-1,-1,-1,7,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4620() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,0,4,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4621() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4622() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4623() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,2,-1,-1,-1,-1,7,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4624() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,6,5,1,-1,-1,0,-1,-1,-1,-1,0,7,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4625() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,3,-1,-1,0,5,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4626() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4627() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,-1,-1,-1,0,4,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4628() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4629() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4630() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,3,-1,-1,5,6,2,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4631() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,4,-1,-1,5,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4632() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,3,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4633() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,2,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4634() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4635() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4636() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4637() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,0,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4638() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4639() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,6,-1,-1,7,8,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1"));
    }

    @Test
    public void TreeMapSolverTest4640() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,4,1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,8,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4641() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4642() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4643() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,0,-1,-1,0,5,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4644() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4645() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,0,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4646() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,0,6,2,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4647() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,6,-1,-1,7,8,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,6,3,-1"));
    }

    @Test
    public void TreeMapSolverTest4648() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,4,-1,-1,-1,7,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4649() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,7,-1,-1,-1,0,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4650() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4651() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4652() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,5,-1,-1,-1,0,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4653() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,3,-1,-1,5,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4654() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,3,5,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4655() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,6,-1,-1,0,6,2,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4656() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,6,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4657() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,7,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4658() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4659() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4660() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,2,-1,-1,-1,7,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4661() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,6,0,-1,-1,-1,7,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4662() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,7,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4663() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4664() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,6,-1,-1,7,6,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4665() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,5,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4666() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,4,1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4667() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4668() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4669() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4670() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4671() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,6,0,-1,-1,-1,7,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4672() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,1,0,-1,-1,-1,7,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4673() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,4,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4674() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4675() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,6,5,2,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4676() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,3,-1,-1,-1,0,-1,-1,-1,0,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4677() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,-1,5,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4678() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,0,6,2,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4679() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,1,-1,-1,-1,0,0,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4680() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,7,0,-1,-1,-1,0,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4681() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,-1,-1,-1,7,4,1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4682() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4683() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,1,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4684() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,6,4,1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4685() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,4,0,-1,-1,-1,0,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4686() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4687() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4688() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,0,-1,-1,0,5,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4689() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,4,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4690() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,5,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4691() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4692() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,3,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4693() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4694() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,8,1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4695() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4696() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,4,1,-1,-1,0,0,3,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4697() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4698() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4699() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,4,1,-1,-1,0,0,3,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4700() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,4,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4701() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4702() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,7,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4703() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,2,-1,-1,-1,0,-1,-1,-1,0,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4704() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,8,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,4,3,-1"));
    }

    @Test
    public void TreeMapSolverTest4705() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,4,7,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4706() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,2,-1,-1,0,5,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4707() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,2,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4708() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4709() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,2,6,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4710() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4711() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4712() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4713() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,0,0,2,-1,-1,1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4714() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,4,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4715() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4716() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,5,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4717() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4718() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,6,-1,-1,-1,7,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4719() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,1,0,-1,-1,-1,7,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4720() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,3,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,7,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4721() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,0,-1,-1,5,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4722() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,5,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4723() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,5,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4724() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,4,-1,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4725() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,4,1,-1,-1,0,0,3,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4726() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,4,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4727() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,4,1,-1,-1,0,0,3,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4728() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,0,6,2,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4729() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,0,0,2,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4730() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,0,6,2,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4731() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,0,6,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4732() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4733() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,0,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4734() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4735() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,4,0,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4736() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,0,5,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4737() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,1,0,-1,-1,-1,0,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4738() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,-1,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4739() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,7,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4740() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4741() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,8,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1"));
    }

    @Test
    public void TreeMapSolverTest4742() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,0,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4743() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4744() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,4,6,1,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4745() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4746() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,0,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4747() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,3,-1,-1,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4748() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,2,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4749() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,6,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4750() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,1,0,-1,-1,-1,0,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4751() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,3,-1,-1,0,0,-1,-1,-1,0,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4752() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,4,1,-1,-1,0,6,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4753() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,4,6,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4754() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4755() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,2,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4756() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4757() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,7,0,-1,-1,-1,7,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4758() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,1,-1,-1,-1,7,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4759() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4760() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4761() {
        assertEquals(false, symKorat.isSat("1,-1,-1,0,2,-1,-1,-1,3,4,1,-1,-1,5,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4762() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,1,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4763() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,0,-1,-1,5,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4764() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,0,-1,-1,0,5,2,-1,-1,0,6,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4765() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4766() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4767() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4768() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,4,6,1,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4769() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,7,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4770() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,1,-1,-1,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4771() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,5,-1,-1,-1,0,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4772() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,0,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4773() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4774() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4775() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,0,4,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4776() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,4,6,1,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4777() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4778() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,7,0,-1,-1,-1,0,8,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4779() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4780() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,-1,0,-1,-1,-1,5,0,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4781() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,1,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,6,0,3,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4782() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4783() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,8,0,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest4784() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,5,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4785() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,2,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4786() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,5,-1,-1,6,0,2,-1,-1,0,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4787() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,3,-1,-1,0,5,2,-1,-1,6,0,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4788() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,6,1,-1,-1,0,0,4,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4789() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,1,-1,-1,-1,5,6,2,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4790() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,-1,0,-1,-1,-1,5,6,2,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4791() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,6,7,2,-1,-1,5,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4792() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,6,0,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4793() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4794() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,6,4,1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4795() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,5,0,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4796() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,7,8,3,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4797() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,4,1,-1,-1,6,7,3,-1,-1,0,8,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4798() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,5,-1,-1,6,7,2,-1,-1,0,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4799() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,1,0,-1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4800() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4801() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,0,-1,-1,0,0,-1,-1,-1,5,0,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4802() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,4,-1,-1,-1,-1,7,0,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4803() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,3,5,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4804() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,1,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4805() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,6,0,-1,-1,-1,0,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4806() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,0,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4807() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4808() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,4,-1,-1,-1,-1,0,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4809() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4810() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest4811() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,4,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4812() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4813() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,5,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4814() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,6,7,3,-1,-1,0,0,5,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4815() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,4,0,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4816() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,3,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,6,7,3,-1,-1,0,0,5,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4817() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4818() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4819() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4820() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,0,6,-1,-1,-1,7,5,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4821() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,1,-1,-1,6,7,2,-1,-1,0,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4822() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,0,-1,-1,-1,5,0,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4823() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,2,-1,-1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4824() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,0,0,-1,-1,-1,8,0,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest4825() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,8,0,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest4826() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,1,0,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4827() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,0,0,7,-1,-1,-1,-1,-1,-1,-1,8,0,-1,-1,-1,4,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4828() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,3,-1,-1,5,0,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4829() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4830() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,4,6,1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4831() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,-1,6,-1,-1,-1,7,5,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4832() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,7,0,-1,-1,-1,8,4,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4833() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,4,1,-1,-1,6,0,3,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4834() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,6,4,1,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4835() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,4,-1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4836() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,6,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,8,0,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest4837() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,0,0,6,-1,-1,7,0,-1,-1,-1,4,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4838() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4839() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,0,2,-1,-1,-1,6,0,3,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4840() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4841() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,2,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4842() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4843() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,2,-1,-1,-1,-1,0,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4844() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,4,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4845() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,0,2,-1,-1,0,6,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4846() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,0,6,2,-1,-1,5,0,2,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4847() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,6,-1,-1,-1,0,0,4,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4848() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,1,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4849() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4850() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4851() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4852() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4853() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,6,-1,-1,-1,0,0,4,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4854() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4855() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,4,0,-1,-1,-1,5,0,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4856() {
        assertEquals(false, symKorat.isSat("1,-1,-1,0,2,-1,-1,-1,3,4,1,-1,-1,0,0,-1,-1,-1,5,0,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4857() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4858() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,4,0,-1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4859() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,0,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,6,0,3,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4860() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4861() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4862() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4863() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,4,6,1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4864() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4865() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4866() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,4,6,1,-1,-1,7,0,-1,-1,-1,0,0,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4867() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,6,7,1,-1,-1,0,-1,-1,-1,-1,0,0,7,-1,-1,0,8,-1,-1,-1,5,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4868() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest4869() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,8,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4870() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,6,3,-1,-1,0,0,4,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4871() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,0,-1,-1,-1,0,-1,-1,-1,5,6,2,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4872() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4873() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,6,7,2,-1,-1,-1,3,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4874() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,6,7,2,-1,-1,1,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4875() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,4,0,-1,-1,-1,5,6,2,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4876() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,6,7,3,-1,-1,0,0,5,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4877() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,1,0,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4878() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,0,2,-1,-1,-1,6,7,3,-1,-1,0,0,5,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4879() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,2,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4880() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4881() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4882() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,6,0,2,-1,-1,-1,2,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4883() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,4,6,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4884() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,4,-1,-1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4885() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,6,-1,-1,7,6,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,8,0,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4886() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,8,0,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest4887() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,4,1,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,8,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4888() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,7,0,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4889() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,6,-1,-1,-1,0,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4890() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,4,0,-1,-1,-1,0,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4891() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,2,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4892() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,0,-1,-1,6,0,2,-1,-1,0,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4893() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,6,-1,-1,-1,0,0,4,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4894() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4895() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4896() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,6,7,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,8,0,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest4897() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,5,-1,-1,-1,-1,7,0,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4898() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,7,0,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4899() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4900() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,0,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4901() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,0,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4902() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest4903() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,6,-1,-1,-1,0,0,4,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4904() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,0,0,6,-1,-1,0,0,-1,-1,-1,4,7,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4905() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,4,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4906() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,1,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4907() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,4,0,-1,-1,-1,7,8,3,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4908() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4909() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,0,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4910() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,3,-1,-1,-1,5,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4911() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,8,0,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest4912() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4913() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,1,-1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4914() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,6,0,-1,-1,-1,5,0,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4915() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,2,-1,-1,-1,-1,7,0,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4916() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,7,-1,-1,-1,-1,7,0,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4917() {
        assertEquals(false, symKorat.isSat("1,-1,-1,0,2,-1,-1,-1,3,4,1,-1,-1,0,5,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4918() {
        assertEquals(false, symKorat.isSat("1,-1,-1,1,2,-1,-1,-1,3,4,1,-1,-1,5,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4919() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,5,0,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4920() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,1,-1,-1,6,0,2,-1,-1,0,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4921() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,5,6,2,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4922() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,-1,6,-1,-1,-1,5,7,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4923() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,8,7,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest4924() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,2,-1,-1,5,0,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4925() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,3,-1,-1,0,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4926() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,2,5,1,-1,-1,-1,-1,-1,-1,-1,6,7,3,-1,-1,0,0,5,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4927() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,5,7,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4928() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,6,-1,-1,7,8,2,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4929() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4930() {
        assertEquals(false, symKorat.isSat("1,-1,-1,1,2,-1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4931() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,0,-1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4932() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4933() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4934() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,0,-1,-1,-1,0,5,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4935() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,0,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4936() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,2,-1,-1,-1,4,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4937() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,0,1,-1,-1,1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4938() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,4,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4939() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,-1,-1,-1,6,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4940() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,0,1,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4941() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,5,-1,-1,6,0,1,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4942() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,-1,-1,-1,-1,-1,7,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4943() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,2,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4944() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4945() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,0,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,8,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4946() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,4,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4947() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,6,-1,-1,-1,-1,7,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4948() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,4,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4949() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,5,6,2,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4950() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4951() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,0,6,2,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4952() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4953() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4954() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,2,-1,-1,-1,0,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4955() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4956() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4957() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,0,-1,-1,-1,0,4,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4958() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,7,-1,-1,-1,-1,7,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4959() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,3,-1,-1,-1,0,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4960() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4961() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,4,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4962() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4963() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4964() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4965() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,6,7,1,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4966() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,-1,-1,-1,4,7,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4967() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4968() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4969() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4970() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,8,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4971() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,8,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4972() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,8,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4973() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4974() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4975() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,8,-1,-1,-1,-1,0,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4976() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,2,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4977() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,6,-1,-1,-1,0,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4978() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,1,-1,-1,-1,0,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4979() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4980() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4981() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,6,5,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4982() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,0,6,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4983() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4984() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4985() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4986() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,4,-1,-1,5,0,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4987() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,4,0,-1,-1,-1,7,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4988() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,7,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4989() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,2,-1,-1,-1,3,4,1,-1,-1,0,5,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4990() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,4,6,1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4991() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4992() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4993() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4994() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4995() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4996() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4997() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4998() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest4999() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,2,5,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5000() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,4,1,-1,-1,0,0,3,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5001() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,4,-1,-1,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5002() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5003() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5004() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,0,0,2,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5005() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,6,-1,-1,0,0,2,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5006() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,2,-1,-1,-1,0,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5007() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5008() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5009() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,2,0,-1,-1,-1,7,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5010() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,5,0,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5011() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,-1,-1,-1,0,4,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5012() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,6,7,-1,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5013() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,0,6,2,-1,-1,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5014() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,0,-1,-1,0,6,2,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5015() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,0,0,2,-1,-1,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5016() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5017() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,7,7,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5018() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,7,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5019() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,2,0,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5020() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,1,0,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5021() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,4,-1,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5022() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,4,6,1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5023() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,-1,-1,-1,7,4,1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5024() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,-1,-1,-1,4,7,1,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5025() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,4,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5026() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5027() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,0,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5028() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,4,1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5029() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,7,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5030() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,0,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,7,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5031() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,2,0,-1,-1,-1,0,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5032() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5033() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5034() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,0,4,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5035() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,0,4,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5036() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5037() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,0,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5038() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,3,-1,-1,0,6,2,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5039() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5040() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5041() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,4,6,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5042() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5043() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,6,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5044() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5045() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5046() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5047() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,4,6,1,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5048() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5049() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,2,5,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5050() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,0,0,2,-1,-1,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5051() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,0,6,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5052() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,0,6,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5053() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,0,-1,-1,-1,0,0,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5054() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,4,1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5055() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,2,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5056() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5057() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,4,-1,-1,0,5,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5058() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5059() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5060() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5061() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5062() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,7,-1,-1,0,8,2,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5063() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,4,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5064() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5065() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,0,1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5066() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,6,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5067() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,4,7,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5068() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,8,7,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5069() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,8,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5070() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,7,0,-1,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5071() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5072() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5073() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5074() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,2,6,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5075() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5076() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,2,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,7,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5077() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,2,-1,-1,-1,7,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5078() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,0,5,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5079() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,7,-1,-1,-1,0,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5080() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5081() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,-1,-1,-1,4,7,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5082() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,3,-1,-1,5,0,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5083() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,2,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5084() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5085() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,4,0,-1,-1,-1,7,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5086() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,4,1,-1,-1,0,0,3,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5087() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,8,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,4,0,-1,-1,-1,0,0,3,-1"));
    }

    @Test
    public void TreeMapSolverTest5088() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,3,-1,-1,5,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5089() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5090() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5091() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,7,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5092() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,0,0,2,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5093() {
        assertEquals(false, symKorat.isSat("1,-1,-1,0,2,-1,-1,-1,3,4,1,-1,-1,5,0,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5094() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,0,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5095() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,4,1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5096() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,3,-1,-1,-1,7,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5097() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,5,-1,-1,-1,0,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5098() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,3,-1,-1,-1,-1,0,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5099() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,6,7,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,5,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5100() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,1,-1,-1,0,6,2,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5101() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5102() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5103() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,6,-1,-1,7,8,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,8,-1,-1,0,0,-1,-1,-1,6,0,3,-1"));
    }

    @Test
    public void TreeMapSolverTest5104() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,0,0,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5105() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,5,0,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5106() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,2,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,7,0,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest5107() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,0,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,7,0,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest5108() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5109() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,4,-1,-1,-1,0,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest5110() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,1,-1,-1,-1,0,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest5111() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,6,-1,-1,6,0,2,-1,-1,0,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5112() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,6,0,-1,-1,0,0,4,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5113() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,7,0,-1,-1,-1,8,4,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest5114() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,4,1,-1,-1,6,7,3,-1,-1,8,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5115() {
        assertEquals(false, symKorat.isSat("1,-1,-1,0,2,-1,-1,-1,3,4,1,-1,-1,0,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5116() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,6,7,2,-1,-1,7,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5117() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,0,6,-1,-1,0,0,-1,-1,-1,4,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5118() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5119() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,3,0,-1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5120() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,0,0,7,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,4,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5121() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,4,-1,-1,-1,7,0,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest5122() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest5123() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,2,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,6,7,3,-1,-1,0,0,5,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5124() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,6,7,1,-1,-1,0,-1,-1,-1,-1,0,0,7,-1,-1,0,0,-1,-1,-1,5,8,3,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5125() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,4,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5126() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,2,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5127() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5128() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,4,0,-1,-1,-1,7,8,3,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5129() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,3,-1,-1,5,0,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5130() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,6,7,2,-1,-1,5,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5131() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,1,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5132() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5133() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest5134() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,6,7,-1,-1,-1,5,0,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5135() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,6,0,2,-1,-1,5,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5136() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5137() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,0,6,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5138() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,6,-1,-1,-1,0,0,4,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5139() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,4,6,1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5140() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,0,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5141() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,6,0,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5142() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,4,-1,-1,5,0,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5143() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5144() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,0,6,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5145() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,-1,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5146() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,6,0,3,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5147() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,8,0,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest5148() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,4,-1,-1,5,0,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5149() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,0,-1,-1,-1,8,0,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest5150() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,4,1,-1,-1,6,0,3,-1,-1,0,7,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5151() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,4,6,1,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest5152() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest5153() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest5154() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,0,-1,-1,5,6,2,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5155() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,6,-1,-1,-1,0,0,4,-1,-1,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5156() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5157() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,1,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5158() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,0,6,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5159() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,4,-1,-1,5,4,1,-1,-1,2,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5160() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,6,0,3,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5161() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,6,0,3,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5162() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5163() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest5164() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,0,5,2,-1,-1,6,0,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5165() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,4,-1,-1,0,5,2,-1,-1,6,0,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5166() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,3,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5167() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,5,6,2,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5168() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,6,6,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5169() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,-1,0,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5170() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,2,-1,-1,0,0,-1,-1,-1,5,6,2,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5171() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5172() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,5,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5173() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,7,-1,-1,-1,8,4,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest5174() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,0,5,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5175() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,6,4,1,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5176() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5177() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,2,-1,-1,-1,0,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest5178() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,3,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5179() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest5180() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest5181() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,3,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5182() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,0,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,6,7,3,-1,-1,0,0,5,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5183() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,8,4,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest5184() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5185() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,0,-1,-1,-1,5,0,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5186() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,6,7,1,-1,-1,0,0,7,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,4,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5187() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5188() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,3,-1,-1,-1,-1,0,0,-1,-1,-1,8,0,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest5189() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,4,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,8,0,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest5190() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,2,-1,-1,-1,0,0,-1,-1,-1,8,0,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest5191() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5192() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,6,7,1,-1,-1,0,0,7,-1,-1,-1,-1,-1,-1,-1,0,8,-1,-1,-1,4,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5193() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest5194() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest5195() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,2,5,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5196() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5197() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,6,7,3,-1,-1,0,0,5,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5198() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,0,6,-1,-1,0,0,-1,-1,-1,4,7,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5199() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5200() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,3,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5201() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,7,-1,-1,-1,8,4,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest5202() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,4,-1,-1,6,7,2,-1,-1,0,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5203() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,0,1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5204() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,3,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5205() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5206() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,0,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5207() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,3,-1,-1,5,2,1,-1,-1,0,0,2,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5208() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,7,-1,-1,-1,7,0,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest5209() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,0,-1,-1,-1,7,0,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest5210() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest5211() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest5212() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,0,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5213() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,2,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5214() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5215() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5216() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,4,-1,-1,5,4,1,-1,-1,2,6,3,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5217() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5218() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,0,5,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5219() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,0,5,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5220() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,4,1,-1,-1,0,5,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5221() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,0,4,1,-1,-1,0,5,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5222() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,0,1,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5223() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,0,1,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5224() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,0,1,-1,-1,4,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5225() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,0,1,-1,-1,5,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5226() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,0,1,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5227() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,4,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5228() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,0,1,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5229() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5230() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5231() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,7,8,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5232() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5233() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,3,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5234() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,8,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5235() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5236() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,2,0,-1,-1,-1,7,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5237() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,2,-1,-1,-1,7,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5238() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,7,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5239() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,5,-1,-1,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5240() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5241() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5242() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,6,0,-1,-1,-1,0,0,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5243() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5244() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5245() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,1,-1,-1,-1,7,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5246() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,3,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5247() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5248() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5249() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,5,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5250() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5251() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,7,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5252() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,2,5,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5253() {
        assertEquals(false, symKorat.isSat("1,-1,-1,0,2,-1,-1,-1,3,4,1,-1,-1,5,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5254() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,1,-1,-1,-1,7,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5255() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,4,-1,-1,0,5,2,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5256() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,0,-1,-1,-1,0,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5257() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5258() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5259() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5260() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,6,4,1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5261() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,2,-1,-1,-1,7,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5262() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,3,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,7,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5263() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,2,4,1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5264() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,5,7,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5265() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,2,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5266() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,4,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5267() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,4,6,1,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5268() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5269() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,2,-1,-1,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5270() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5271() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,2,6,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5272() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5273() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,6,5,1,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5274() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,7,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5275() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,1,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,0,6,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5276() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,3,0,-1,-1,-1,0,0,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5277() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,4,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5278() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,0,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5279() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,0,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5280() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,0,6,-1,-1,-1,0,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5281() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,6,-1,-1,-1,-1,0,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5282() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,0,0,2,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5283() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,2,0,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5284() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,0,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,7,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5285() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5286() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5287() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,8,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5288() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,1,-1,-1,-1,7,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5289() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5290() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,4,0,-1,-1,-1,0,0,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5291() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,0,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5292() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5293() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,6,-1,-1,-1,7,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5294() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,4,-1,-1,-1,0,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5295() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5296() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,6,5,1,-1,-1,0,-1,-1,-1,-1,0,7,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5297() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,6,4,1,-1,-1,0,7,3,-1,-1,0,0,-1,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5298() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,5,6,2,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5299() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5300() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,6,-1,-1,-1,8,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5301() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,0,-1,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5302() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5303() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5304() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,-1,-1,-1,7,8,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,0,0,3,-1"));
    }

    @Test
    public void TreeMapSolverTest5305() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,4,-1,-1,5,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5306() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5307() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5308() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5309() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,4,-1,-1,0,0,-1,-1,-1,0,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5310() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,3,-1,-1,-1,0,0,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5311() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,6,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5312() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5313() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,6,7,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,-1,-1,-1,0,5,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5314() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,4,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5315() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5316() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,0,5,2,-1,-1,0,6,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5317() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,4,1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5318() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5319() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,8,-1,-1,-1,8,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5320() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,4,1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5321() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5322() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5323() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,4,-1,-1,-1,-1,7,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5324() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,1,0,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5325() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,0,6,2,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5326() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,5,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5327() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,-1,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5328() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,3,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5329() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,3,7,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5330() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5331() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,2,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5332() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,8,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5333() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5334() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,6,5,1,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5335() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5336() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,5,-1,-1,-1,-1,7,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5337() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5338() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,7,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5339() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5340() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,0,6,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5341() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,2,-1,-1,-1,-1,0,0,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5342() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5343() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,4,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5344() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,3,-1,-1,-1,0,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5345() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,3,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5346() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,3,-1,-1,-1,7,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5347() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5348() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,0,2,-1,-1,-1,0,6,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5349() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5350() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,6,7,-1,-1,-1,0,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5351() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,4,-1,-1,0,5,2,-1,-1,0,6,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5352() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,2,0,-1,-1,-1,5,0,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5353() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,2,-1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5354() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,4,6,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5355() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest5356() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,5,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5357() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,6,0,2,-1,-1,0,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5358() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,6,-1,-1,-1,0,0,4,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5359() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,6,-1,-1,-1,0,0,4,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5360() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,2,-1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5361() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,5,-1,-1,-1,0,0,-1,-1,-1,8,0,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest5362() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5363() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,6,7,1,-1,-1,0,0,7,-1,-1,-1,-1,-1,-1,-1,0,8,-1,-1,-1,4,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5364() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,7,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest5365() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5366() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,7,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5367() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,2,-1,-1,-1,3,4,1,-1,-1,5,0,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5368() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest5369() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,5,-1,-1,-1,0,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest5370() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,0,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest5371() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,6,0,2,-1,-1,4,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5372() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5373() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,5,-1,-1,-1,5,6,2,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5374() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,-1,6,-1,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5375() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,0,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5376() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,8,0,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest5377() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,2,-1,-1,5,0,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5378() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,4,0,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5379() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,2,-1,-1,5,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5380() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5381() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,0,-1,-1,-1,5,6,2,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5382() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,4,-1,-1,-1,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5383() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,6,7,2,-1,-1,-1,4,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5384() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,0,-1,-1,-1,5,6,2,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5385() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,7,4,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5386() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,2,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5387() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,0,4,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5388() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,6,0,3,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5389() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,7,0,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest5390() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,1,-1,-1,-1,7,0,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest5391() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,0,8,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5392() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,3,-1,-1,-1,0,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest5393() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,1,0,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest5394() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,6,7,-1,-1,-1,8,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest5395() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,6,7,3,-1,-1,0,0,5,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5396() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,6,4,1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5397() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,0,-1,-1,5,0,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5398() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,1,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5399() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5400() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,8,0,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest5401() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,8,0,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest5402() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,8,0,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest5403() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest5404() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,4,6,1,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest5405() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,6,4,-1,-1,0,0,4,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5406() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,6,0,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5407() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,7,-1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5408() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,8,0,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest5409() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,0,-1,-1,-1,8,0,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest5410() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,5,6,-1,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5411() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,0,0,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5412() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,6,-1,-1,-1,0,0,4,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5413() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,6,-1,-1,-1,0,0,4,-1,-1,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5414() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,3,-1,-1,-1,0,-1,-1,-1,5,6,2,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5415() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,-1,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5416() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,6,7,2,-1,-1,-1,6,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5417() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,3,0,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5418() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,6,7,3,-1,-1,0,0,5,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5419() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,2,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5420() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,6,7,2,-1,-1,1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5421() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,3,-1,-1,6,7,2,-1,-1,0,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5422() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,8,0,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest5423() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,4,-1,-1,-1,7,0,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest5424() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,8,0,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest5425() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,6,4,1,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,0,8,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5426() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,6,-1,-1,-1,0,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest5427() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest5428() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,0,1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5429() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,6,-1,-1,-1,0,0,4,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5430() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5431() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,5,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5432() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,3,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5433() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,6,7,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5434() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,0,0,1,-1,-1,2,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5435() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,0,0,1,-1,-1,0,5,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5436() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,0,0,1,-1,-1,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5437() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,5,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5438() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,0,5,1,-1,-1,3,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5439() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,0,5,1,-1,-1,3,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5440() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,0,5,1,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5441() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,0,5,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5442() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,1,-1,-1,-1,-1,-1,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5443() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,0,1,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5444() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,0,1,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5445() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,2,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5446() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,4,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5447() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,0,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5448() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5449() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,-1,-1,-1,7,8,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,0,-1,-1,-1,0,0,3,-1"));
    }

    @Test
    public void TreeMapSolverTest5450() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,2,-1,-1,5,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5451() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,2,0,-1,-1,-1,7,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5452() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,7,0,-1,-1,-1,8,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5453() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,4,6,1,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5454() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,5,-1,-1,0,0,2,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5455() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5456() {
        assertEquals(false, symKorat.isSat("1,-1,-1,0,2,-1,-1,-1,3,4,1,-1,-1,0,5,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5457() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,4,-1,-1,-1,5,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5458() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,2,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5459() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,0,5,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5460() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,6,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5461() {
        assertEquals(false, symKorat.isSat("1,-1,-1,1,2,-1,-1,-1,3,4,1,-1,-1,5,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5462() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,6,4,1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5463() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,4,7,1,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5464() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,0,5,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5465() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5466() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,2,-1,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5467() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,2,-1,-1,-1,7,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5468() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,4,-1,-1,-1,-1,0,0,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5469() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,3,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5470() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,4,0,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5471() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,1,-1,-1,-1,-1,7,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5472() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,6,7,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,0,-1,-1,-1,0,5,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5473() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,0,6,2,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5474() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,0,6,2,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5475() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,0,2,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5476() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5477() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,7,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5478() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,-1,-1,-1,4,7,1,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5479() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5480() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,8,4,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5481() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,1,0,-1,-1,-1,0,0,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5482() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,1,-1,-1,-1,0,0,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5483() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,5,0,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5484() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,2,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5485() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5486() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5487() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,6,4,1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5488() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,6,-1,-1,-1,-1,7,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5489() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5490() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,4,-1,-1,-1,-1,7,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5491() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,4,6,1,-1,-1,7,8,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5492() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5493() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,5,0,-1,-1,-1,0,0,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5494() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,4,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5495() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,0,6,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5496() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,2,-1,-1,5,0,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5497() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,3,-1,-1,5,2,1,-1,-1,-1,-1,-1,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5498() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5499() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5500() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5501() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5502() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5503() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,6,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,8,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5504() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,2,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5505() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5506() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5507() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,4,-1,-1,-1,-1,7,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5508() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5509() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,2,-1,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5510() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5511() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,4,0,-1,-1,-1,7,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5512() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,0,0,2,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5513() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5514() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5515() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,6,7,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,5,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5516() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,0,0,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5517() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,0,4,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5518() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,8,-1,-1,-1,0,4,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5519() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,-1,-1,-1,0,4,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5520() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,5,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5521() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5522() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5523() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,5,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5524() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,3,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,8,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5525() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5526() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,6,5,1,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5527() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,1,-1,-1,-1,8,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5528() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,6,4,1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5529() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,0,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5530() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,6,-1,-1,7,6,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5531() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5532() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,4,6,1,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5533() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,4,-1,-1,-1,7,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5534() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5535() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,4,6,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5536() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,4,1,-1,-1,0,6,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5537() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,2,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5538() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5539() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,6,4,1,-1,-1,0,7,3,-1,-1,0,0,-1,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5540() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5541() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5542() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,4,6,1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5543() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5544() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5545() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,0,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5546() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,6,7,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5547() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,7,-1,-1,-1,-1,7,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5548() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,0,-1,-1,0,5,2,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5549() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,0,5,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5550() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,4,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5551() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,5,-1,-1,-1,0,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5552() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5553() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,4,6,1,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5554() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,0,6,2,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5555() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,0,6,2,-1,-1,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5556() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,5,-1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5557() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,0,0,-1,-1,-1,8,0,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest5558() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,2,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5559() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,0,2,-1,-1,0,7,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5560() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,2,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5561() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,1,0,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5562() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,1,0,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,6,7,3,-1,-1,0,0,5,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5563() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,2,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5564() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,0,0,6,-1,-1,0,7,-1,-1,-1,4,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5565() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,6,7,2,-1,-1,6,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5566() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,0,0,-1,-1,-1,5,0,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5567() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,8,0,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest5568() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,0,-1,-1,5,0,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5569() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,0,5,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5570() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest5571() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,3,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5572() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5573() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,2,-1,-1,5,6,2,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5574() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,4,6,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,7,8,3,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5575() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5576() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5577() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5578() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,0,0,6,-1,-1,0,0,-1,-1,-1,4,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5579() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5580() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,1,0,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,6,0,3,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5581() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,5,-1,-1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5582() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,4,1,-1,-1,6,0,3,-1,-1,7,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5583() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest5584() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,0,6,-1,-1,0,7,-1,-1,-1,4,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5585() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,3,-1,-1,-1,0,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest5586() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,2,-1,-1,-1,0,-1,-1,-1,5,6,2,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5587() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,6,7,3,-1,-1,0,0,5,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5588() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5589() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,1,0,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5590() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,2,0,-1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5591() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,8,0,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest5592() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,4,-1,-1,5,4,1,-1,-1,2,0,3,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5593() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5594() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,4,1,-1,-1,6,0,3,-1,-1,7,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5595() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,4,0,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5596() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,2,0,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5597() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,4,6,1,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest5598() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest5599() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5600() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5601() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,6,-1,-1,7,6,2,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5602() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5603() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5604() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,6,0,2,-1,-1,-1,3,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5605() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,0,0,6,-1,-1,0,0,-1,-1,-1,4,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5606() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,6,4,1,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,8,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5607() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,8,0,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5608() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,4,5,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5609() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,4,-1,-1,5,6,2,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5610() {
        assertEquals(false, symKorat.isSat("1,-1,-1,1,2,-1,-1,-1,3,4,1,-1,-1,0,0,-1,-1,-1,5,6,2,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5611() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5612() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,2,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5613() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,1,-1,-1,-1,5,0,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5614() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,3,-1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5615() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,7,-1,-1,-1,0,0,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest5616() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,4,0,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5617() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,6,0,2,-1,-1,3,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5618() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,6,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5619() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,7,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5620() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,3,-1,-1,-1,5,6,2,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5621() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,7,-1,-1,-1,8,4,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest5622() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,3,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5623() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,6,0,3,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5624() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,6,7,1,-1,-1,0,0,7,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,4,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5625() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,2,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,8,0,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest5626() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,1,-1,-1,-1,0,0,-1,-1,-1,8,0,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest5627() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,8,1,-1,-1,0,0,8,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,4,0,3,-1"));
    }

    @Test
    public void TreeMapSolverTest5628() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,0,-1,-1,-1,0,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest5629() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,5,-1,-1,-1,0,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest5630() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,6,-1,-1,-1,0,0,4,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5631() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,0,-1,-1,-1,5,6,2,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5632() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,1,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,6,7,3,-1,-1,0,0,5,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5633() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5634() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,2,0,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5635() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,4,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5636() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest5637() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,2,0,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5638() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,0,2,-1,-1,0,3,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5639() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5640() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,1,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5641() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,7,0,-1,-1,-1,8,4,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest5642() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,-1,4,-1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5643() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,0,0,1,-1,-1,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5644() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5645() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,0,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5646() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5647() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,4,-1,-1,-1,0,5,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5648() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,4,-1,-1,-1,0,5,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5649() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,0,5,1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5650() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,0,4,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5651() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5652() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,0,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5653() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,0,1,-1,-1,3,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5654() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,0,1,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5655() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,0,1,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5656() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,-1,-1,-1,7,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5657() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,-1,-1,-1,-1,-1,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5658() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,4,7,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5659() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5660() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,3,-1,-1,0,5,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5661() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,6,7,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,5,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5662() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,3,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5663() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,6,-1,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5664() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,4,-1,-1,-1,7,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5665() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,-1,0,-1,-1,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5666() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,3,-1,-1,-1,0,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5667() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,0,-1,-1,-1,0,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5668() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5669() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,-1,5,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5670() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,3,-1,-1,4,2,1,-1,-1,5,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5671() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,3,-1,-1,-1,-1,8,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5672() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5673() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,5,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5674() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5675() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,-1,-1,-1,7,8,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,4,3,-1"));
    }

    @Test
    public void TreeMapSolverTest5676() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5677() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5678() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5679() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5680() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,0,6,2,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5681() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,4,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5682() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5683() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5684() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,4,6,1,-1,-1,7,0,-1,-1,-1,0,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5685() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5686() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,-1,-1,-1,0,4,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5687() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5688() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5689() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,4,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5690() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,8,8,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5691() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,0,2,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5692() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5693() {
        assertEquals(false, symKorat.isSat("1,-1,-1,1,2,-1,-1,-1,3,4,1,-1,-1,5,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5694() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5695() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5696() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,2,4,1,-1,-1,0,5,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5697() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,2,5,1,-1,-1,-1,-1,-1,-1,-1,0,6,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5698() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,5,-1,-1,-1,7,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5699() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,0,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5700() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,0,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5701() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5702() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,8,4,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5703() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,0,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,8,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5704() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,3,0,-1,-1,-1,7,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5705() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,8,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5706() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5707() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5708() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5709() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,0,4,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5710() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,4,1,-1,-1,0,6,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5711() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,5,-1,-1,-1,-1,7,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5712() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,3,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5713() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,1,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5714() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,2,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5715() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,2,-1,-1,-1,0,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5716() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5717() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,6,7,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5718() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,3,-1,-1,0,0,2,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5719() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,5,-1,-1,-1,0,0,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5720() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5721() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,6,7,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5722() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,7,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5723() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,0,6,2,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5724() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5725() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,1,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5726() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5727() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,-1,-1,-1,7,4,1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5728() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5729() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,1,-1,-1,-1,-1,7,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5730() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,6,0,-1,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5731() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,6,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5732() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,3,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5733() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,4,6,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5734() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,2,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,7,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5735() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,7,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5736() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5737() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,3,-1,-1,-1,0,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5738() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5739() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5740() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5741() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,8,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1"));
    }

    @Test
    public void TreeMapSolverTest5742() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,0,0,-1,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5743() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5744() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5745() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,8,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5746() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,3,0,-1,-1,-1,7,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5747() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,7,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5748() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,5,6,2,-1,-1,0,0,2,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5749() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,3,-1,-1,5,2,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5750() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,4,1,-1,-1,0,6,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5751() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,7,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5752() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,6,0,-1,-1,-1,0,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5753() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,6,0,3,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5754() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest5755() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest5756() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,3,-1,-1,6,0,2,-1,-1,0,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5757() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,6,2,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5758() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,0,0,6,-1,-1,0,0,-1,-1,-1,4,7,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5759() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,6,7,2,-1,-1,3,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5760() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,6,0,2,-1,-1,-1,1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5761() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,3,0,-1,-1,-1,5,0,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5762() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,1,-1,-1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5763() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest5764() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,4,1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5765() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,2,0,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5766() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,0,6,2,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5767() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,6,0,2,-1,-1,-1,4,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5768() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,0,0,-1,-1,-1,5,0,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5769() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,2,-1,-1,6,0,2,-1,-1,0,5,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5770() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,2,0,-1,-1,-1,5,6,2,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5771() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,0,6,-1,-1,0,7,-1,-1,-1,4,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5772() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,4,-1,-1,-1,5,0,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5773() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,1,5,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5774() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest5775() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,7,-1,-1,-1,0,8,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5776() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,4,-1,-1,-1,8,0,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest5777() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5778() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,6,7,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,8,5,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest5779() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,3,-1,-1,6,2,1,-1,-1,0,0,2,-1,-1,0,0,-1,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5780() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,2,-1,-1,0,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5781() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,0,-1,-1,0,5,2,-1,-1,6,7,2,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5782() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,4,1,-1,-1,6,0,3,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5783() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,2,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5784() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest5785() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,6,-1,-1,-1,7,0,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest5786() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,7,-1,-1,-1,-1,0,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest5787() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,6,4,1,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,0,8,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5788() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,2,-1,-1,-1,3,4,1,-1,-1,0,5,-1,-1,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5789() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,6,0,2,-1,-1,1,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5790() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,0,-1,-1,-1,6,0,3,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5791() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5792() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest5793() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5794() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,2,-1,-1,-1,7,0,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest5795() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,4,1,-1,-1,6,7,3,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5796() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,0,-1,-1,6,7,2,-1,-1,0,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5797() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5798() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,6,0,2,-1,-1,2,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5799() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,8,0,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest5800() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,4,6,1,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest5801() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,0,6,-1,-1,-1,5,0,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5802() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,6,-1,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5803() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,1,-1,-1,-1,0,7,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest5804() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,4,1,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,0,8,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5805() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5806() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,5,0,-1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5807() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,6,0,2,-1,-1,3,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5808() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,6,-1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5809() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,7,0,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest5810() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,4,0,-1,-1,-1,8,0,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest5811() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,4,1,-1,-1,6,0,3,-1,-1,0,7,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5812() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,6,7,1,-1,-1,0,0,7,-1,-1,0,0,-1,-1,-1,0,8,-1,-1,-1,4,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5813() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,1,-1,-1,-1,5,-1,-1,-1,6,7,2,-1,-1,-1,8,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5814() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,1,-1,-1,6,0,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5815() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,-1,0,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5816() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,4,-1,-1,-1,5,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5817() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,2,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5818() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,6,5,1,-1,-1,0,-1,-1,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5819() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,1,0,-1,-1,-1,7,0,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest5820() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,7,0,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest5821() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,4,-1,-1,0,5,-1,-1,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5822() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,0,5,-1,-1,-1,6,0,2,-1,-1,1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5823() {
        assertEquals(true, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,6,2,-1,-1,0,0,4,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5824() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,5,6,4,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5825() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,3,4,5,-1,-1,6,0,-1,-1,-1,5,7,2,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5826() {
        assertEquals(true, symKorat.isSat("1,-1,-1,0,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5827() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,1,-1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5828() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5829() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,0,4,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5830() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,0,5,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5831() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,0,5,1,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5832() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,0,6,1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5833() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,1,-1,-1,-1,-1,-1,-1,-1,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5834() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,0,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5835() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,0,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5836() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,-1,0,-1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5837() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,-1,4,-1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5838() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,1,0,-1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5839() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,0,0,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5840() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,-1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5841() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,0,5,1,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5842() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,5,-1,-1,0,6,1,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5843() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,0,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5844() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,0,-1,-1,0,6,1,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5845() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5846() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5847() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5848() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,0,5,1,-1,-1,5,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5849() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,0,5,1,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5850() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,-1,-1,-1,0,6,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5851() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,0,5,1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5852() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,0,0,1,-1,-1,5,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5853() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5854() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5855() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5856() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,0,0,1,-1,-1,5,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5857() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,0,0,1,-1,-1,5,6,-1,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5858() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,0,0,1,-1,-1,5,6,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5859() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5860() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5861() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5862() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,0,4,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5863() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,-1,-1,-1,0,4,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5864() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5865() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,0,1,-1,-1,4,6,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5866() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,0,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5867() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,0,1,-1,-1,5,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5868() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5869() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,-1,-1,-1,6,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5870() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,2,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5871() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,3,7,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5872() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5873() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5874() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,2,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5875() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5876() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,-1,0,0,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5877() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5878() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5879() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,4,-1,-1,-1,0,0,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5880() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,8,4,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5881() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,0,3,-1,-1,6,0,2,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5882() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,6,3,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5883() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5884() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,7,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5885() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,7,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5886() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,6,4,1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5887() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,1,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5888() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5889() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,6,4,1,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5890() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,6,4,1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5891() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,6,3,-1,-1,7,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5892() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5893() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,6,-1,-1,0,7,3,-1,-1,8,6,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5894() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5895() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,-1,-1,-1,-1,-1,7,4,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5896() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,-1,-1,-1,-1,-1,7,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5897() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,-1,-1,-1,4,0,1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5898() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5899() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,4,7,1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5900() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,5,-1,-1,0,0,3,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5901() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5902() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5903() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,0,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5904() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5905() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,5,0,-1,-1,-1,0,0,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5906() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,2,0,-1,-1,-1,0,0,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5907() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,2,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5908() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,6,7,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,5,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5909() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,4,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5910() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,6,-1,-1,-1,0,0,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5911() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,4,1,-1,-1,6,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5912() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,4,0,-1,-1,-1,0,0,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5913() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5914() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,8,4,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5915() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,0,3,-1,-1,6,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5916() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,6,3,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5917() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,3,-1,-1,0,6,3,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5918() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,4,-1,-1,0,6,3,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5919() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,6,7,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,5,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5920() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,3,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,8,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5921() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,7,0,-1,-1,-1,0,7,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5922() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,4,1,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5923() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,2,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5924() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,2,-1,-1,-1,0,7,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5925() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,4,6,1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5926() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,7,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5927() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,7,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5928() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,6,-1,-1,0,6,3,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5929() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,0,1,-1,-1,6,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5930() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,1,-1,-1,-1,4,0,1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5931() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,0,1,-1,-1,0,2,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5932() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,0,-1,-1,6,0,1,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5933() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,0,-1,-1,0,0,3,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5934() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5935() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,2,7,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5936() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,-1,-1,-1,7,4,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5937() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,8,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5938() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5939() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,2,-1,-1,-1,0,0,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5940() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5941() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5942() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,4,1,-1,-1,6,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5943() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,4,1,-1,-1,6,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5944() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5945() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5946() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,3,-1,-1,-1,-1,0,0,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5947() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5948() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,0,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5949() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,6,-1,-1,0,0,3,-1,-1,7,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5950() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5951() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,6,5,1,-1,-1,0,-1,-1,-1,-1,7,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5952() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5953() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5954() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,5,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5955() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5956() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,0,8,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5957() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,8,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5958() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,7,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5959() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,1,0,-1,-1,-1,0,7,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5960() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,2,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5961() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,3,-1,-1,4,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5962() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,6,5,1,-1,-1,0,-1,-1,-1,-1,7,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5963() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,3,-1,-1,-1,0,7,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5964() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,6,3,-1,-1,7,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5965() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,6,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5966() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,6,3,-1,-1,7,8,5,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5967() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,6,3,-1,-1,7,8,2,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5968() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,6,3,-1,-1,7,8,1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5969() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5970() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,0,1,-1,-1,0,6,-1,-1,-1,0,0,3,-1,-1,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5971() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,2,4,-1,-1,-1,5,0,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5972() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,-1,-1,-1,-1,-1,7,3,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5973() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,3,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5974() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5975() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,0,3,-1,-1,6,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5976() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5977() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5978() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,2,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5979() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5980() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,0,3,-1,-1,6,7,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5981() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5982() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5983() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5984() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,7,0,-1,-1,-1,0,7,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5985() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,6,-1,-1,-1,-1,0,7,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5986() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5987() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,4,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5988() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,6,3,-1,-1,7,8,4,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5989() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,2,-1,-1,0,6,3,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5990() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,6,0,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5991() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,6,-1,-1,7,0,1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5992() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,6,-1,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5993() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,3,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5994() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5995() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,8,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5996() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,8,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5997() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5998() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest5999() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,4,1,-1,-1,6,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6000() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,6,4,1,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6001() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,3,-1,-1,0,0,3,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6002() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,0,3,-1,-1,6,7,-1,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6003() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,0,5,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6004() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6005() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,7,-1,-1,-1,0,7,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6006() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,3,0,-1,-1,-1,0,7,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6007() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,7,0,-1,-1,-1,0,8,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6008() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,4,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6009() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,4,-1,-1,-1,0,7,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6010() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,4,1,-1,-1,0,6,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6011() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,5,-1,-1,-1,0,7,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6012() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,6,3,-1,-1,7,0,6,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6013() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,6,3,-1,-1,7,8,6,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6014() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6015() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,1,4,-1,-1,-1,5,0,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6016() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,-1,-1,-1,-1,-1,0,1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6017() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,6,-1,-1,6,0,1,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6018() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,1,0,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6019() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,7,7,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6020() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,3,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6021() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6022() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,8,8,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6023() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6024() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6025() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,6,-1,-1,-1,0,0,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6026() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,5,-1,-1,-1,0,0,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6027() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,7,-1,-1,-1,-1,0,0,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6028() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,4,-1,-1,0,0,3,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6029() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6030() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,0,0,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6031() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,2,-1,-1,-1,0,0,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6032() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,7,-1,-1,-1,-1,0,0,3,-1,-1,8,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6033() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,6,7,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,5,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6034() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,5,-1,-1,0,0,3,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6035() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,0,3,-1,-1,6,0,5,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6036() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,2,-1,-1,0,6,3,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6037() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6038() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,2,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6039() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,8,-1,-1,-1,-1,0,8,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6040() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,3,-1,-1,-1,0,7,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6041() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,7,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6042() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,4,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6043() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,3,-1,-1,4,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6044() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,4,1,-1,-1,6,0,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6045() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6046() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,4,-1,-1,-1,-1,0,7,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6047() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,6,-1,-1,0,7,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6048() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,6,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6049() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,6,3,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,1,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6050() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,-1,-1,-1,6,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6051() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6052() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,4,1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6053() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6054() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,4,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6055() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,0,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6056() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,8,4,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6057() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,3,-1,-1,0,0,3,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6058() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,4,1,-1,-1,0,6,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6059() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,4,6,1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6060() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6061() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6062() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,4,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6063() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6064() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,7,-1,-1,-1,-1,0,0,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6065() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,3,-1,-1,-1,0,0,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6066() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,0,3,-1,-1,6,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6067() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,6,-1,-1,0,0,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6068() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6069() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,0,-1,-1,-1,0,7,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6070() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6071() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,6,3,-1,-1,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6072() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,0,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,7,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6073() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6074() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,6,3,-1,-1,7,8,8,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6075() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6076() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1,-1,4,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6077() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,4,-1,-1,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6078() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,8,0,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest6079() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,3,-1,-1,0,8,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6080() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,3,-1,-1,0,8,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6081() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,2,0,-1,-1,-1,7,0,3,-1,-1,8,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6082() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,4,1,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest6083() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,7,0,3,-1,-1,8,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6084() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,0,3,-1,-1,7,8,7,-1,-1,0,0,4,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6085() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,5,6,-1,-1,-1,0,0,4,-1,-1,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6086() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,5,-1,-1,6,7,3,-1,-1,0,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6087() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,5,-1,-1,6,7,3,-1,-1,8,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6088() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,8,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6089() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6090() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,0,8,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6091() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,3,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,0,8,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6092() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,5,-1,-1,6,7,3,-1,-1,0,8,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6093() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,4,-1,-1,6,7,3,-1,-1,8,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6094() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,7,3,-1,-1,8,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6095() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,5,-1,-1,-1,-1,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6096() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,7,-1,-1,-1,-1,0,0,4,-1,-1,0,5,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6097() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,0,3,-1,-1,2,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6098() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6099() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,4,6,1,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6100() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6101() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,6,-1,-1,6,0,3,-1,-1,0,7,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6102() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,3,-1,-1,4,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6103() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,7,8,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6104() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,0,3,-1,-1,7,0,2,-1,-1,0,0,4,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6105() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,0,3,-1,-1,7,8,4,-1,-1,0,0,4,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6106() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6107() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,2,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6108() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,4,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6109() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,8,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6110() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,6,-1,-1,7,8,3,-1,-1,6,0,3,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6111() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,5,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6112() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,5,0,4,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6113() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6114() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,4,1,-1,-1,0,0,-1,-1,-1,6,0,3,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6115() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,5,-1,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6116() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,4,7,1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest6117() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,2,0,-1,-1,-1,7,0,3,-1,-1,0,8,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6118() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,3,-1,-1,0,8,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6119() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,4,1,-1,-1,6,0,-1,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6120() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,3,-1,-1,6,0,3,-1,-1,7,0,3,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6121() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,0,3,-1,-1,7,8,3,-1,-1,0,0,4,-1,-1,1,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6122() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,5,6,-1,-1,-1,0,0,4,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6123() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,5,6,4,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6124() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,8,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,6,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6125() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,7,3,-1,-1,4,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6126() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,7,3,-1,-1,1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6127() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,7,3,-1,-1,0,5,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6128() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,2,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6129() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,1,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6130() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6131() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,3,-1,-1,6,0,3,-1,-1,7,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6132() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6133() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,5,-1,-1,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6134() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,0,5,-1,-1,4,0,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6135() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,0,7,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6136() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,1,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,0,7,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6137() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,4,1,-1,-1,0,6,-1,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6138() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,0,5,-1,-1,4,0,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6139() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,0,3,-1,-1,7,0,-1,-1,-1,0,0,4,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6140() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,0,3,-1,-1,7,8,-1,-1,-1,0,0,4,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6141() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,5,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6142() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,2,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6143() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,0,0,5,-1,-1,4,7,3,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6144() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,0,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6145() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6146() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6147() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,5,0,-1,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6148() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6149() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,0,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest6150() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,8,0,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest6151() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,3,-1,-1,0,4,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6152() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,0,3,-1,-1,7,1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6153() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,7,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6154() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,1,-1,-1,-1,7,0,3,-1,-1,8,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6155() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,3,-1,-1,8,4,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6156() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,5,6,0,-1,-1,0,0,4,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6157() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,7,3,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6158() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6159() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,4,6,1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6160() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,6,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6161() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6162() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,1,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6163() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,6,7,1,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1,-1,4,8,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6164() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6165() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,4,1,-1,-1,0,6,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6166() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,0,8,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6167() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,0,8,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6168() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,0,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,8,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6169() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6170() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,0,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest6171() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,3,-1,-1,0,8,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6172() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,6,7,1,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1,-1,4,0,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6173() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1,-1,4,0,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6174() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,2,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,7,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6175() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,2,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,7,0,3,-1,-1,8,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6176() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,0,3,-1,-1,7,8,-1,-1,-1,0,0,4,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6177() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,0,3,-1,-1,7,8,-1,-1,-1,0,0,4,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6178() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,0,-1,-1,6,0,3,-1,-1,7,8,3,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6179() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,5,0,6,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6180() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,5,6,-1,-1,-1,0,0,4,-1,-1,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6181() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,7,3,-1,-1,0,4,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6182() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,2,-1,-1,6,7,3,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6183() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6184() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,7,3,-1,-1,8,6,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6185() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,7,-1,-1,-1,-1,0,0,4,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6186() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6187() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,2,0,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6188() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,2,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6189() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,3,-1,-1,0,8,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6190() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,4,6,1,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,0,8,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6191() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,6,-1,-1,7,0,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6192() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,5,6,-1,-1,-1,0,0,4,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6193() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,7,3,-1,-1,2,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6194() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,8,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,3,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6195() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,4,-1,-1,6,7,3,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6196() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6197() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,3,-1,-1,0,4,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6198() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,0,8,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6199() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,5,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6200() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,6,4,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6201() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6202() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,4,0,-1,-1,-1,7,0,3,-1,-1,0,8,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6203() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,3,-1,-1,8,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6204() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,0,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,7,0,3,-1,-1,8,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6205() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,3,-1,-1,6,0,3,-1,-1,7,8,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6206() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,7,3,-1,-1,7,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6207() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,8,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6208() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,5,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6209() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,4,1,-1,-1,0,0,-1,-1,-1,6,7,3,-1,-1,0,0,5,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6210() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,8,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6211() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,7,4,3,-1,-1,8,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6212() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,7,3,-1,-1,8,0,3,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,4,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6213() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6214() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,0,0,1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6215() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,0,0,1,-1,-1,1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6216() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,0,0,1,-1,-1,5,6,-1,-1,-1,-1,-1,-1,-1,-1,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6217() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,0,4,1,-1,-1,0,0,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6218() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,-1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6219() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,0,5,1,-1,-1,1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6220() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,-1,-1,-1,0,5,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6221() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,-1,-1,-1,0,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6222() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,0,5,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6223() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,0,5,1,-1,-1,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6224() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,0,5,1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6225() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,-1,-1,-1,0,6,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6226() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,-1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6227() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,0,5,1,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6228() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,0,5,1,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6229() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,0,4,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6230() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,0,4,1,-1,-1,0,5,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6231() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,1,-1,-1,-1,-1,-1,-1,-1,7,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6232() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,4,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6233() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6234() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,4,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6235() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,0,5,1,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6236() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,-1,-1,-1,0,6,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6237() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,0,6,1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6238() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,0,6,1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6239() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,4,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6240() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,2,-1,-1,0,6,1,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6241() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6242() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6243() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,0,5,1,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6244() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,1,-1,-1,-1,0,4,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6245() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,0,4,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6246() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,-1,4,-1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6247() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,1,4,-1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6248() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,0,5,1,-1,-1,2,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6249() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,0,6,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6250() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,0,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6251() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,0,-1,-1,-1,0,5,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6252() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6253() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,0,6,1,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6254() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,0,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6255() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,0,1,-1,-1,0,6,-1,-1,-1,0,0,3,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6256() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6257() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6258() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,4,-1,-1,6,0,1,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6259() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,4,0,1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6260() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,0,3,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6261() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,6,-1,-1,-1,-1,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6262() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,6,7,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6263() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6264() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6265() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,4,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6266() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6267() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,0,3,-1,-1,6,7,4,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6268() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6269() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,2,-1,-1,-1,-1,0,7,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6270() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,7,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6271() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,4,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,8,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6272() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6273() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,7,-1,-1,-1,0,8,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6274() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,5,0,-1,-1,-1,0,7,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6275() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,0,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6276() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6277() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6278() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,4,-1,-1,0,6,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6279() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,3,-1,-1,8,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6280() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,4,1,-1,-1,6,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6281() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,6,3,-1,-1,7,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6282() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,6,3,-1,-1,7,0,7,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6283() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,6,3,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,5,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6284() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,3,-1,-1,0,6,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6285() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,0,1,-1,-1,-1,5,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6286() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,0,-1,-1,-1,5,0,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6287() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,0,-1,-1,-1,5,0,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6288() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,0,1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6289() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6290() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,6,-1,-1,0,0,3,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6291() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,6,-1,-1,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6292() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6293() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,4,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6294() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,8,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6295() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,8,0,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6296() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6297() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6298() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,4,0,-1,-1,-1,0,0,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6299() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,-1,-1,-1,7,4,1,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6300() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,4,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6301() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6302() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,5,-1,-1,-1,-1,0,0,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6303() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6304() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6305() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,6,3,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6306() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,2,-1,-1,0,6,3,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6307() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,6,-1,-1,0,7,3,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6308() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,1,0,-1,-1,-1,0,7,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6309() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,6,4,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6310() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,5,-1,-1,-1,-1,0,7,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6311() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,0,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,7,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6312() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,4,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6313() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,6,-1,-1,-1,0,7,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6314() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,1,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6315() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6316() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,6,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6317() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,6,3,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6318() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,6,3,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,4,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6319() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,4,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6320() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,2,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6321() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,0,3,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6322() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,0,1,-1,-1,1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6323() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,0,1,-1,-1,-1,-1,-1,-1,-1,3,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6324() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,6,-1,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6325() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,6,-1,-1,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6326() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6327() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,3,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6328() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,8,6,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6329() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6330() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,6,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6331() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6332() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,7,-1,-1,-1,-1,0,0,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6333() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6334() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,4,1,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6335() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,0,3,-1,-1,6,0,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6336() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,0,3,-1,-1,6,7,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6337() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,0,3,-1,-1,6,7,7,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6338() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,4,-1,-1,0,0,3,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6339() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,6,3,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6340() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6341() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,4,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6342() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,6,5,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6343() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,0,8,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6344() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6345() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,7,0,-1,-1,-1,0,8,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6346() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,6,-1,-1,-1,-1,0,7,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6347() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,2,-1,-1,-1,-1,0,7,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6348() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6349() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,2,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,7,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6350() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,0,-1,-1,0,6,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6351() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,6,3,-1,-1,7,0,5,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6352() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,6,3,-1,-1,7,8,7,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6353() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,0,-1,-1,0,6,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6354() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6355() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,0,1,-1,-1,5,6,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6356() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,4,-1,-1,-1,5,0,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6357() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,2,-1,-1,6,0,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6358() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,3,0,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6359() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,6,0,-1,-1,-1,0,0,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6360() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6361() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,-1,-1,-1,7,8,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,0,4,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6362() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,3,-1,-1,-1,0,0,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6363() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,2,0,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6364() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6365() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,6,4,1,-1,-1,7,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6366() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,-1,-1,-1,4,7,1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6367() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,2,0,-1,-1,-1,0,0,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6368() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,0,3,-1,-1,6,7,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6369() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,0,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,8,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6370() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,0,-1,-1,0,6,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6371() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,2,-1,-1,0,6,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6372() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6373() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,4,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6374() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,6,7,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,3,-1,-1,5,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6375() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,6,-1,-1,0,7,3,-1,-1,6,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6376() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,6,3,-1,-1,7,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6377() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,0,5,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6378() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,0,1,-1,-1,6,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6379() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,5,-1,-1,6,0,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6380() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,6,-1,-1,7,8,1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6381() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,8,7,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6382() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,-1,-1,-1,7,8,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6383() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6384() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6385() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6386() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6387() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6388() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,4,-1,-1,-1,-1,0,0,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6389() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,6,-1,-1,0,0,3,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6390() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,3,-1,-1,0,0,3,-1,-1,6,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6391() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,7,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6392() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6393() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,4,6,1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6394() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,7,-1,-1,-1,0,7,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6395() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,4,1,-1,-1,6,0,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6396() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,2,-1,-1,-1,-1,0,7,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6397() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,6,-1,-1,-1,0,7,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6398() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,2,-1,-1,0,6,3,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6399() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,0,1,-1,-1,6,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6400() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,0,1,-1,-1,0,4,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6401() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,6,-1,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6402() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6403() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,8,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6404() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,8,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6405() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,4,7,1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6406() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,4,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,8,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6407() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6408() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6409() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,3,-1,-1,-1,0,0,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6410() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,2,-1,-1,0,0,3,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6411() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,0,0,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6412() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6413() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,7,0,-1,-1,-1,0,0,3,-1,-1,8,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6414() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,2,-1,-1,-1,0,7,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6415() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,8,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6416() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,6,-1,-1,0,7,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6417() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,6,-1,-1,0,7,3,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6418() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6419() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6420() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6421() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,4,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6422() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,1,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6423() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,4,-1,-1,-1,0,7,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6424() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,0,-1,-1,0,6,3,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6425() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6426() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,5,0,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6427() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,2,0,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6428() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6429() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6430() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,0,0,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6431() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,5,-1,-1,-1,0,0,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6432() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,6,0,-1,-1,-1,0,0,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6433() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,3,0,-1,-1,-1,0,0,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6434() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,6,-1,-1,-1,-1,0,0,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6435() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,4,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6436() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6437() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6438() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6439() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6440() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6441() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,4,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6442() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6443() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,7,-1,-1,-1,-1,0,7,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6444() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,7,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6445() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,6,3,-1,-1,7,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6446() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,6,3,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6447() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,6,-1,-1,0,7,3,-1,-1,8,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6448() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,5,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6449() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,7,-1,-1,-1,-1,0,0,4,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6450() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,1,-1,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6451() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,4,0,-1,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6452() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,0,5,-1,-1,4,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6453() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,8,1,-1,-1,0,0,7,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,4,0,3,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6454() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,0,7,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6455() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,3,-1,-1,0,8,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6456() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,4,1,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest6457() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,0,3,-1,-1,7,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6458() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,0,3,-1,-1,4,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest6459() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1,-1,4,0,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6460() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,7,-1,-1,-1,-1,7,0,3,-1,-1,8,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6461() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,8,0,3,-1,-1,4,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest6462() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,8,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6463() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,7,3,-1,-1,6,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6464() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6465() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,5,-1,-1,-1,-1,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6466() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,6,-1,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6467() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,7,-1,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6468() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,-1,-1,-1,7,8,1,-1,-1,0,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,0,3,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6469() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,6,7,1,-1,-1,0,-1,-1,-1,-1,0,0,6,-1,-1,5,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6470() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,6,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6471() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,4,6,1,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,8,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6472() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,8,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6473() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,0,3,-1,-1,7,0,3,-1,-1,0,0,4,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6474() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,0,3,-1,-1,7,0,0,-1,-1,0,0,4,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6475() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,6,-1,-1,7,0,3,-1,-1,8,6,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6476() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,5,3,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6477() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,7,3,-1,-1,0,1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6478() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,7,-1,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6479() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6480() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,0,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6481() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,0,8,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6482() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,5,-1,-1,6,7,3,-1,-1,8,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6483() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,3,-1,-1,4,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6484() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,7,3,-1,-1,8,7,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6485() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,7,3,-1,-1,8,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,8,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6486() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,0,3,-1,-1,6,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6487() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,6,-1,-1,7,0,3,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6488() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,7,-1,-1,-1,-1,0,0,4,-1,-1,0,1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6489() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,5,-1,-1,6,0,3,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6490() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,3,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6491() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,0,7,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6492() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,0,3,-1,-1,7,2,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6493() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,6,7,1,-1,-1,0,-1,-1,-1,-1,0,0,6,-1,-1,5,0,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6494() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,7,8,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6495() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,5,6,-1,-1,-1,0,0,4,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6496() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,1,-1,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6497() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,4,1,-1,-1,0,6,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6498() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,6,-1,-1,6,7,3,-1,-1,8,0,3,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6499() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,8,-1,-1,-1,-1,8,0,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest6500() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,4,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,8,0,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest6501() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,0,7,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6502() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,0,8,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6503() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,3,-1,-1,8,4,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6504() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,0,3,-1,-1,7,0,3,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6505() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,0,3,-1,-1,7,8,3,-1,-1,0,0,4,-1,-1,4,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6506() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,6,-1,-1,6,0,3,-1,-1,7,8,3,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6507() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,5,-1,-1,6,0,3,-1,-1,7,8,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6508() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,5,6,3,-1,-1,0,0,4,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6509() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,7,3,-1,-1,0,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6510() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6511() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,3,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6512() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,8,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6513() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,5,-1,-1,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6514() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,5,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6515() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,5,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6516() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,3,-1,-1,6,0,3,-1,-1,0,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6517() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,0,-1,-1,6,0,3,-1,-1,0,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6518() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,0,3,-1,-1,4,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6519() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,0,3,-1,-1,3,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6520() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,0,0,5,-1,-1,4,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6521() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6522() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,6,-1,-1,-1,7,0,3,-1,-1,8,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6523() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,0,3,-1,-1,7,8,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6524() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,4,-1,-1,6,0,3,-1,-1,7,8,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6525() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,3,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,7,8,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6526() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,0,3,-1,-1,7,8,3,-1,-1,0,0,4,-1,-1,5,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6527() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6528() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,6,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6529() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,6,-1,-1,6,7,3,-1,-1,0,8,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6530() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,5,5,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6531() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,0,3,-1,-1,0,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6532() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,4,6,1,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6533() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,2,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6534() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6535() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,4,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,8,0,3,-1,-1,0,0,7,-1"));
    }

    @Test
    public void TreeMapSolverTest6536() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,3,-1,-1,0,8,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6537() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,0,3,-1,-1,7,4,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6538() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,7,0,-1,-1,-1,8,0,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest6539() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,7,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6540() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,4,6,1,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,8,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6541() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,6,-1,-1,7,0,3,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6542() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,5,6,2,-1,-1,0,0,4,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6543() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,7,3,-1,-1,0,3,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6544() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6545() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,3,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,8,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6546() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,7,3,-1,-1,8,0,1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6547() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,7,-1,-1,-1,-1,0,0,4,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6548() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,1,-1,-1,-1,7,0,3,-1,-1,0,8,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6549() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,7,0,3,-1,-1,0,8,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6550() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,6,4,1,-1,-1,7,0,-1,-1,-1,0,0,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest6551() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,7,8,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6552() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,5,-1,-1,6,0,3,-1,-1,7,0,3,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6553() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,5,6,5,-1,-1,0,0,4,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6554() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,3,-1,-1,6,7,3,-1,-1,0,8,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6555() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,8,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6556() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,7,3,-1,-1,8,2,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6557() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,2,-1,-1,6,7,3,-1,-1,8,0,3,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6558() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,5,0,5,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6559() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,0,3,-1,-1,5,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6560() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,-1,-1,-1,4,7,1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1"));
    }

    @Test
    public void TreeMapSolverTest6561() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,8,0,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest6562() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,3,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,0,7,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6563() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,4,6,1,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,8,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6564() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,6,-1,-1,7,0,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6565() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,0,3,-1,-1,7,0,3,-1,-1,0,0,4,-1,-1,3,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6566() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,5,6,-1,-1,-1,0,0,4,-1,-1,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6567() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6568() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,0,-1,-1,6,7,3,-1,-1,8,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6569() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,7,3,-1,-1,8,0,8,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6570() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6571() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,0,0,1,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6572() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,4,-1,-1,0,0,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6573() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6574() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6575() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,3,-1,-1,0,5,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6576() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,2,-1,-1,0,6,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6577() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,0,0,1,-1,-1,0,5,-1,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6578() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,-1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6579() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,2,4,-1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6580() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,3,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6581() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,0,5,1,-1,-1,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6582() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,5,-1,-1,0,6,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6583() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6584() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6585() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,0,0,1,-1,-1,5,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6586() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,0,-1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6587() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6588() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,0,5,1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6589() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,0,5,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6590() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,0,0,1,-1,-1,0,5,-1,-1,-1,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6591() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,-1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6592() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,0,0,1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6593() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,0,0,1,-1,-1,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6594() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6595() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,0,4,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6596() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,-1,0,-1,-1,-1,0,4,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6597() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,1,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6598() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,1,-1,-1,-1,-1,-1,-1,-1,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6599() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,4,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6600() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,0,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6601() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,4,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6602() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,0,0,1,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6603() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,0,0,1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6604() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,4,-1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6605() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,3,-1,-1,0,0,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6606() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,0,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6607() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,0,0,1,-1,-1,0,5,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6608() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,0,0,1,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6609() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6610() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6611() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6612() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,0,5,1,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6613() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,0,5,1,-1,-1,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6614() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,1,-1,-1,-1,-1,-1,-1,-1,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6615() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,0,1,-1,-1,-1,6,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6616() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,0,1,-1,-1,0,6,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6617() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,-1,-1,-1,-1,-1,7,5,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6618() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,0,3,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6619() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,4,1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6620() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6621() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,5,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,8,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6622() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6623() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,0,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6624() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6625() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6626() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6627() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,8,-1,-1,-1,0,0,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6628() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,4,1,-1,-1,6,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6629() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,6,-1,-1,-1,0,0,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6630() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,6,-1,-1,0,0,3,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6631() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,0,3,-1,-1,6,7,3,-1,-1,3,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6632() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,0,-1,-1,-1,0,5,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6633() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,3,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6634() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,3,-1,-1,4,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6635() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,6,3,-1,-1,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6636() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,6,3,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,2,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6637() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,6,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6638() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,2,-1,-1,-1,4,0,1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6639() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,4,0,1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6640() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,-1,-1,-1,6,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6641() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,5,7,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6642() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6643() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,6,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6644() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,2,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6645() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6646() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,0,3,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6647() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6648() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6649() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6650() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,7,0,-1,-1,-1,0,0,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6651() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,4,-1,-1,0,6,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6652() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,0,-1,-1,-1,0,7,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6653() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,6,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6654() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,6,3,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6655() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,6,3,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6656() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,0,4,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6657() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,-1,4,-1,-1,-1,5,0,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6658() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,0,1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6659() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,0,1,-1,-1,0,6,-1,-1,-1,0,0,3,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6660() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,0,1,-1,-1,0,6,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6661() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,3,-1,-1,-1,4,0,1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6662() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,0,1,-1,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6663() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,1,0,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6664() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6665() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,2,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6666() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,6,5,1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6667() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6668() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6669() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6670() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6671() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,6,7,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6672() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,0,0,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6673() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,0,0,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6674() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6675() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,1,0,-1,-1,-1,0,0,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6676() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,4,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6677() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,0,3,-1,-1,6,0,3,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6678() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,6,-1,-1,0,0,3,-1,-1,6,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6679() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,3,-1,-1,-1,0,5,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6680() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,6,3,-1,-1,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6681() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6682() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,4,6,1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6683() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,2,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,7,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6684() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,4,6,1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6685() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,1,-1,-1,-1,0,7,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6686() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6687() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6688() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,0,1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6689() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,-1,-1,-1,4,7,1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6690() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6691() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6692() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,6,-1,-1,-1,0,0,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6693() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,0,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6694() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,6,4,1,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6695() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6696() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,7,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6697() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,0,-1,-1,-1,0,0,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6698() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,6,-1,-1,-1,-1,0,0,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6699() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,2,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6700() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,6,-1,-1,0,6,3,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6701() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,6,3,-1,-1,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6702() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,6,4,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6703() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6704() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,4,6,1,-1,-1,0,7,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6705() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,1,0,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6706() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,3,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6707() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,7,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6708() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,-1,0,-1,-1,-1,4,0,1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6709() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,0,1,-1,-1,5,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6710() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,0,1,-1,-1,0,6,-1,-1,-1,0,0,3,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6711() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,0,-1,-1,-1,5,0,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6712() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,0,3,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6713() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,5,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6714() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,6,7,1,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6715() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,5,-1,-1,-1,0,0,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6716() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6717() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6718() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6719() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,3,-1,-1,-1,0,0,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6720() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,4,6,1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6721() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,-1,-1,-1,7,8,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,4,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6722() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,0,-1,-1,0,0,3,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6723() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,4,-1,-1,-1,-1,0,7,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6724() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,7,-1,-1,-1,0,8,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6725() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,3,-1,-1,4,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6726() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,4,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6727() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,0,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6728() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,0,1,-1,-1,6,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,0,5,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6729() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,0,1,-1,-1,6,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6730() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,8,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6731() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,1,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6732() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,7,-1,-1,-1,0,0,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6733() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,0,3,-1,-1,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6734() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,2,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6735() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6736() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,7,-1,-1,-1,-1,0,0,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6737() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,8,4,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6738() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6739() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,0,3,-1,-1,6,0,-1,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6740() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,2,-1,-1,0,6,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6741() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6742() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,2,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,8,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6743() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,3,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6744() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,2,-1,-1,-1,0,7,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6745() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,3,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6746() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,0,1,-1,-1,6,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6747() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6748() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,-1,-1,-1,7,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6749() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,0,-1,-1,0,0,3,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6750() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,3,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6751() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6752() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,2,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6753() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6754() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6755() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,6,-1,-1,-1,0,0,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6756() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6757() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,-1,-1,-1,7,4,1,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6758() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6759() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,4,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6760() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,2,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6761() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,6,3,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6762() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,6,-1,-1,0,7,3,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6763() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,3,-1,-1,-1,0,7,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6764() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,5,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,8,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6765() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,0,8,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6766() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,8,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6767() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,7,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6768() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,0,5,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6769() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,2,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6770() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,0,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest6771() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,8,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest6772() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,0,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest6773() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,8,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6774() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,6,-1,-1,6,0,3,-1,-1,7,8,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6775() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,5,6,-1,-1,-1,0,0,4,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6776() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,6,-1,-1,6,7,3,-1,-1,8,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6777() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6778() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,2,-1,-1,6,7,3,-1,-1,0,8,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6779() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6780() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,3,-1,-1,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6781() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,5,-1,-1,-1,8,0,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest6782() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,3,-1,-1,0,8,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6783() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,2,0,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,0,7,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6784() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,0,3,-1,-1,4,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest6785() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,6,-1,-1,7,0,3,-1,-1,6,8,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6786() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,7,8,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6787() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,6,-1,-1,7,0,3,-1,-1,6,0,3,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6788() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,0,3,-1,-1,7,8,-1,-1,-1,0,0,4,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6789() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,0,8,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6790() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,6,0,-1,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6791() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,6,4,1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest6792() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,7,-1,-1,-1,-1,8,0,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest6793() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,2,-1,-1,6,0,3,-1,-1,7,8,3,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6794() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,5,6,4,-1,-1,0,0,4,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6795() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,1,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6796() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,5,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6797() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,7,3,-1,-1,8,1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6798() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,5,-1,-1,6,0,3,-1,-1,7,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6799() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,3,-1,-1,0,4,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6800() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,4,1,-1,-1,0,6,-1,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6801() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,3,-1,-1,-1,7,0,3,-1,-1,8,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6802() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,0,-1,-1,6,7,3,-1,-1,0,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6803() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6804() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,4,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6805() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,3,-1,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6806() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,7,3,-1,-1,8,0,3,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,8,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6807() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,6,-1,-1,7,6,3,-1,-1,8,0,3,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6808() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,5,3,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6809() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,0,3,-1,-1,1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6810() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,8,0,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest6811() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,3,-1,-1,6,0,3,-1,-1,0,7,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6812() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,2,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,7,8,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6813() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,7,8,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6814() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,8,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,8,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6815() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,6,-1,-1,7,6,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6816() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,8,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6817() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,7,3,-1,-1,8,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6818() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,7,3,-1,-1,8,0,6,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6819() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,5,-1,-1,6,0,3,-1,-1,0,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6820() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,3,-1,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6821() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,0,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest6822() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,4,-1,-1,6,0,3,-1,-1,0,7,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6823() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,3,-1,-1,-1,-1,7,0,3,-1,-1,8,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6824() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,5,6,-1,-1,-1,0,0,4,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6825() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,5,6,-1,-1,-1,0,0,4,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6826() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,5,6,-1,-1,-1,0,0,4,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6827() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,3,-1,-1,6,7,3,-1,-1,0,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6828() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,7,3,-1,-1,8,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6829() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,7,4,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6830() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6831() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,6,-1,-1,7,6,3,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6832() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,6,-1,-1,6,7,3,-1,-1,8,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6833() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,2,-1,-1,-1,5,0,3,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6834() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,7,-1,-1,-1,-1,0,0,4,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6835() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,2,0,-1,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6836() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,0,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6837() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,4,6,1,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,0,8,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6838() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,6,-1,-1,6,0,3,-1,-1,7,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6839() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,7,-1,-1,-1,7,0,3,-1,-1,8,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6840() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,0,0,5,-1,-1,4,0,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6841() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,3,-1,-1,8,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6842() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,7,8,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6843() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,4,-1,-1,6,0,3,-1,-1,7,8,3,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6844() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,4,-1,-1,6,7,3,-1,-1,8,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6845() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,7,4,3,-1,-1,0,8,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6846() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,3,-1,-1,-1,-1,8,0,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest6847() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,3,-1,-1,0,8,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6848() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,4,-1,-1,-1,7,0,3,-1,-1,0,8,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6849() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,7,3,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6850() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,8,4,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest6851() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,2,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6852() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,6,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6853() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,0,8,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6854() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,0,0,1,-1,-1,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6855() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,4,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6856() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,0,0,1,-1,-1,5,6,-1,-1,-1,-1,-1,-1,-1,-1,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6857() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,-1,4,-1,-1,-1,0,5,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6858() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,1,4,-1,-1,-1,0,5,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6859() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,0,6,1,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6860() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,4,-1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6861() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,0,4,1,-1,-1,0,0,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6862() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,0,4,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6863() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,0,5,1,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6864() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,0,5,1,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6865() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,0,5,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6866() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,0,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6867() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,6,-1,-1,0,7,1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6868() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,-1,-1,-1,0,6,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6869() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6870() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,6,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6871() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,0,4,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6872() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,0,-1,-1,-1,0,4,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6873() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,0,5,1,-1,-1,4,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6874() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,0,4,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6875() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,0,5,1,-1,-1,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6876() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,1,-1,-1,0,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6877() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,0,0,1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6878() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6879() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,0,5,1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6880() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,0,5,1,-1,-1,1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6881() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,0,5,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6882() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,0,6,1,-1,-1,-1,-1,-1,-1,-1,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6883() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,0,0,1,-1,-1,0,5,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6884() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,0,0,1,-1,-1,0,5,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6885() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,0,5,1,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6886() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6887() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,0,0,1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6888() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,0,5,1,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6889() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,6,-1,-1,0,6,1,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6890() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,0,1,-1,-1,6,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,0,1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6891() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,0,1,-1,-1,6,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6892() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,0,1,-1,-1,4,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6893() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,0,1,-1,-1,2,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6894() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,0,1,-1,-1,0,6,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6895() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,-1,-1,-1,-1,-1,7,8,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6896() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,0,3,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6897() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,6,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6898() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6899() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,7,8,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,0,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6900() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,4,-1,-1,0,0,3,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6901() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,5,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6902() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,3,-1,-1,-1,-1,0,0,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6903() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6904() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,2,-1,-1,0,0,3,-1,-1,6,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6905() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6906() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,7,-1,-1,-1,0,7,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6907() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,4,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6908() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,4,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,7,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6909() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,0,1,-1,-1,0,6,-1,-1,-1,0,0,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6910() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,0,1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6911() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,0,-1,-1,5,0,1,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6912() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,6,-1,-1,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6913() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,7,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6914() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6915() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,4,7,1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6916() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6917() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6918() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6919() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,4,1,-1,-1,6,7,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6920() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6921() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,-1,-1,-1,6,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6922() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,6,4,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6923() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,0,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6924() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,6,4,1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6925() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,4,1,-1,-1,6,7,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6926() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6927() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,7,-1,-1,-1,-1,0,0,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6928() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6929() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,5,-1,-1,0,0,3,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6930() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,1,0,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6931() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,5,-1,-1,-1,0,7,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6932() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6933() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,8,3,-1,-1,4,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6934() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,5,-1,-1,0,6,3,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6935() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,6,3,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6936() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6937() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,6,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6938() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6939() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6940() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6941() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,3,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6942() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,4,6,1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6943() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,6,3,-1,-1,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6944() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,3,-1,-1,0,6,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6945() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,0,8,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6946() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,6,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6947() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,3,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6948() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,5,-1,-1,-1,-1,0,7,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6949() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,0,1,-1,-1,2,6,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6950() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,0,1,-1,-1,0,6,-1,-1,-1,0,0,3,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6951() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,8,0,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6952() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,6,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6953() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,6,-1,-1,0,0,3,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6954() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,1,-1,-1,-1,0,0,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6955() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,5,-1,-1,-1,0,0,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6956() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,0,3,-1,-1,6,7,-1,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6957() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,6,-1,-1,0,6,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6958() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,3,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6959() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,4,0,-1,-1,-1,0,7,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6960() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,0,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,7,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6961() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,0,1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6962() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6963() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6964() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,0,3,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6965() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6966() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,8,-1,-1,-1,-1,0,0,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6967() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,0,0,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6968() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,0,3,-1,-1,6,7,-1,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6969() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,0,3,-1,-1,6,7,3,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6970() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,6,-1,-1,0,0,3,-1,-1,6,7,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6971() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6972() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,6,3,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6973() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,1,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6974() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,6,-1,-1,0,7,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6975() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6976() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,4,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6977() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6978() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,3,0,-1,-1,-1,4,0,1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6979() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,0,4,1,-1,-1,5,0,1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6980() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,0,1,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6981() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6982() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6983() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,2,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6984() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,0,0,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6985() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,4,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6986() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,4,7,1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6987() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,0,-1,-1,-1,0,0,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6988() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,0,3,-1,-1,4,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6989() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,6,-1,-1,-1,0,0,3,-1,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6990() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,1,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6991() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,6,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6992() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,4,6,1,-1,-1,0,7,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6993() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6994() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,4,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6995() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,6,3,-1,-1,7,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6996() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,0,-1,-1,0,6,3,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6997() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,6,3,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,3,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6998() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,4,0,1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest6999() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,4,0,1,-1,-1,0,0,3,-1,-1,-1,-1,-1,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7000() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,3,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,8,-1,-1,-1,-1,0,0,3,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7001() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,3,-1,-1,-1,4,5,1,-1,-1,0,0,3,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7002() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,3,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7003() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,0,3,-1,-1,6,0,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7004() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,0,0,3,-1,-1,6,0,3,-1,-1,4,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7005() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,0,6,3,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7006() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,6,1,-1,-1,4,7,1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7007() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,0,7,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7008() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,2,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,0,7,3,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7009() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,5,-1,-1,-1,0,7,3,-1,-1,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7010() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7011() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,7,-1,-1,-1,7,0,3,-1,-1,0,8,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7012() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,0,0,-1,-1,-1,7,0,3,-1,-1,0,8,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7013() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,5,-1,-1,-1,7,0,3,-1,-1,8,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7014() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,0,3,-1,-1,7,8,5,-1,-1,0,0,4,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7015() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,0,-1,-1,-1,5,6,3,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7016() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,8,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7017() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,5,6,0,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7018() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,4,1,-1,-1,0,0,-1,-1,-1,6,0,3,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7019() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,3,-1,-1,4,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7020() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,0,3,-1,-1,7,0,-1,-1,-1,0,0,4,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7021() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,6,-1,-1,7,8,3,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7022() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,7,3,-1,-1,8,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,2,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7023() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,6,-1,-1,6,0,3,-1,-1,0,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7024() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,7,-1,-1,-1,-1,0,0,4,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7025() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,6,-1,-1,6,0,3,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7026() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,6,4,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,7,0,3,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7027() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,2,-1,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7028() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,0,-1,-1,6,0,3,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7029() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,3,-1,-1,-1,7,0,3,-1,-1,0,8,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7030() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,0,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,7,0,3,-1,-1,0,8,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7031() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,3,-1,-1,8,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7032() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,6,0,-1,-1,-1,7,0,3,-1,-1,8,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7033() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,3,-1,-1,8,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7034() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,7,-1,-1,-1,7,0,3,-1,-1,8,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7035() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,2,-1,-1,-1,5,6,3,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7036() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,1,-1,-1,-1,5,6,3,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7037() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,6,-1,-1,7,6,3,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7038() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,6,4,1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,7,8,3,-1,-1,0,0,6,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7039() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,0,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,7,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7040() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,0,-1,-1,6,7,3,-1,-1,0,8,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7041() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7042() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,0,3,-1,-1,7,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7043() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,0,3,-1,-1,7,3,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7044() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,0,3,-1,-1,7,0,8,-1,-1,0,0,4,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7045() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7046() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7047() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,7,3,-1,-1,8,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7048() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,5,4,1,-1,-1,6,0,-1,-1,-1,7,8,3,-1,-1,-1,-1,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7049() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,7,3,-1,-1,8,0,4,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7050() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,4,6,1,-1,-1,7,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7051() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,1,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,7,8,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7052() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,0,3,-1,-1,7,8,-1,-1,-1,0,0,4,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7053() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,6,-1,-1,7,0,3,-1,-1,8,6,3,-1,-1,-1,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7054() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,5,-1,-1,-1,6,7,1,-1,-1,0,0,6,-1,-1,-1,-1,-1,-1,-1,4,8,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7055() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,8,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7056() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,7,3,-1,-1,8,8,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7057() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,7,3,-1,-1,8,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,3,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7058() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,0,-1,-1,6,7,3,-1,-1,8,0,3,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7059() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,5,6,1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7060() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,5,2,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7061() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7062() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,4,-1,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7063() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,7,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7064() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,0,3,-1,-1,7,8,3,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7065() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,8,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,0,3,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7066() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,7,-1,-1,-1,-1,8,7,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,5,-1"));
    }

    @Test
    public void TreeMapSolverTest7067() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,0,-1,-1,-1,-1,7,8,3,-1,-1,0,0,-1,-1,-1,0,0,5,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7068() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,0,3,-1,-1,0,4,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7069() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,5,0,-1,-1,-1,6,4,1,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,8,0,3,-1,-1,-1,-1,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest7070() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,0,3,-1,-1,7,6,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7071() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,1,-1,-1,-1,7,0,3,-1,-1,8,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7072() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,0,3,-1,-1,7,0,3,-1,-1,0,0,4,-1,-1,1,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7073() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,6,-1,-1,7,6,3,-1,-1,8,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7074() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,7,-1,-1,-1,-1,0,0,4,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7075() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,7,-1,-1,-1,-1,0,0,4,-1,-1,0,2,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7076() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,2,-1,-1,-1,8,0,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest7077() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,3,-1,-1,4,5,1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,8,0,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest7078() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,1,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,0,7,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7079() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,-1,4,-1,-1,-1,5,6,1,-1,-1,-1,-1,-1,-1,-1,7,0,3,-1,-1,8,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7080() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,1,-1,-1,5,6,1,-1,-1,0,4,-1,-1,-1,7,0,3,-1,-1,8,0,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7081() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,5,6,7,-1,-1,0,0,4,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7082() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,7,3,-1,-1,8,0,5,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7083() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,8,0,3,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7084() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,3,-1,-1,-1,5,0,3,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7085() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,7,-1,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7086() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,1,-1,-1,6,0,3,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7087() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,0,5,1,-1,-1,4,6,1,-1,-1,7,0,3,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,4,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7088() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,2,-1,-1,4,5,-1,-1,-1,6,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,0,3,-1,-1,0,0,-1,-1,-1,0,0,6,-1"));
    }

    @Test
    public void TreeMapSolverTest7089() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,4,-1,-1,-1,5,6,1,-1,-1,2,-1,-1,-1,-1,7,0,3,-1,-1,0,8,-1,-1,-1,0,0,5,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7090() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,3,-1,-1,6,7,3,-1,-1,8,-1,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7091() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,4,-1,-1,-1,0,-1,-1,-1,4,5,1,-1,-1,6,7,3,-1,-1,8,0,-1,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7092() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,6,7,3,-1,-1,8,0,3,-1,-1,0,0,4,-1,-1,0,0,-1,-1,-1,6,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7093() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7094() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,4,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7095() {
        assertEquals(false, symKorat.isSat("1,-1,-1,0,2,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7096() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7097() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7098() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,0,4,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7099() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7100() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,0,6,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7101() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,0,6,-1,-1,-1,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7102() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,0,6,-1,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7103() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,6,-1,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7104() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,6,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7105() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7106() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7107() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7108() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7109() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,6,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7110() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,6,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7111() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,0,3,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7112() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7113() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7114() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7115() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,0,2,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7116() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7117() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,0,1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7118() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7119() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7120() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7121() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,6,5,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7122() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7123() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7124() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7125() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,0,6,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7126() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,6,-1,-1,-1,-1,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7127() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7128() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7129() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,0,5,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7130() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,6,-1,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7131() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7132() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,0,6,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7133() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,0,6,-1,-1,-1,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7134() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,6,-1,-1,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7135() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7136() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,6,3,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7137() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7138() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,0,6,-1,-1,-1,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7139() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,0,6,-1,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7140() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,0,6,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7141() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,6,-1,-1,-1,-1,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7142() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,6,-1,-1,-1,-1,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7143() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,0,6,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7144() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7145() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,6,6,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7146() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,0,6,-1,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7147() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,6,2,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7148() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,6,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7149() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,6,-1,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7150() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,6,-1,-1,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7151() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,0,6,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7152() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7153() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7154() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7155() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,7,3,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7156() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,7,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7157() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,7,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,6,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7158() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,7,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,3,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7159() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,7,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,7,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7160() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,7,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,5,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7161() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,7,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,4,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7162() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,7,4,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7163() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,7,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7164() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,7,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,6,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7165() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,0,5,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7166() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,7,6,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7167() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,7,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,2,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7168() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,7,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,8,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7169() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,7,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,3,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7170() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,7,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,5,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7171() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,7,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7172() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,7,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7173() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,7,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7174() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,7,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,7,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7175() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,7,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7176() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,0,2,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7177() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7178() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7179() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7180() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,7,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,2,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7181() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7182() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,0,1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7183() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,7,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,8,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7184() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7185() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7186() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7187() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,5,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7188() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7189() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7190() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7191() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,7,0,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7192() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7193() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7194() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7195() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,7,1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7196() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7197() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,7,7,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7198() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,2,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7199() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7200() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7201() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,0,1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7202() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7203() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7204() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7205() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7206() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7207() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7208() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7209() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,0,5,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7210() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,0,5,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7211() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,7,5,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7212() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,7,2,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7213() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7214() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7215() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7216() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7217() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,3,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7218() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7219() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7220() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,0,3,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7221() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7222() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,0,3,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7223() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7224() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,0,6,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7225() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,3,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7226() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,0,5,-1,-1,-1,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7227() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,0,5,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7228() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,0,5,-1,-1,-1,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7229() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,0,5,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7230() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,2,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7231() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,5,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7232() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,0,5,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7233() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,5,-1,-1,-1,-1,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7234() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,5,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7235() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,3,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7236() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7237() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,7,3,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7238() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,7,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,5,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7239() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,7,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7240() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,7,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7241() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,7,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,6,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7242() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,7,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,5,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7243() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,7,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7244() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,7,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,2,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7245() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,7,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,6,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7246() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,7,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7247() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,7,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,2,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7248() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7249() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,7,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,4,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7250() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,7,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7251() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,7,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,7,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7252() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,7,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,8,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7253() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7254() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,7,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,3,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7255() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7256() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,0,2,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7257() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,7,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,3,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7258() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,7,4,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7259() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,7,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,7,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7260() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,2,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7261() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7262() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7263() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,7,1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7264() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,7,6,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7265() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,7,0,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7266() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7267() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,7,7,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7268() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,4,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7269() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7270() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7271() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7272() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7273() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,7,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,8,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7274() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7275() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,7,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7276() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7277() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7278() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7279() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,0,3,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7280() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7281() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7282() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7283() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7284() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7285() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7286() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7287() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7288() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7289() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7290() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7291() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,5,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7292() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7293() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7294() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,0,5,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7295() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,0,4,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7296() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7297() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,8,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7298() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,5,6,-1,-1,-1,0,0,-1,-1,-1,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7299() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7300() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,8,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,3,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7301() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,8,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7302() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,8,5,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7303() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,8,1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7304() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,8,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,7,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7305() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7306() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,6,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7307() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,8,4,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7308() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,8,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7309() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,8,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,8,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7310() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,6,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7311() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,5,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7312() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,2,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7313() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,3,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7314() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,8,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7315() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,5,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7316() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,7,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7317() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,8,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,7,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7318() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,8,3,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7319() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,8,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,2,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7320() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,8,7,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7321() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,8,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,8,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7322() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,8,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,4,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7323() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,8,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,2,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7324() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,8,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7325() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,7,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7326() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7327() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,8,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,5,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7328() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,8,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,6,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7329() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,8,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7330() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,8,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7331() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,8,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,3,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7332() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,8,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7333() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,3,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7334() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,8,6,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7335() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,8,0,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7336() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7337() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7338() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,8,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,6,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7339() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,4,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7340() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7341() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,8,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7342() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,8,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7343() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,5,6,-1,-1,-1,0,0,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7344() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,8,2,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7345() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7346() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,2,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7347() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,0,3,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7348() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,0,8,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7349() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,8,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,5,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7350() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,0,4,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7351() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,0,2,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7352() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,0,1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7353() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7354() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7355() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,0,5,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7356() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,3,-1,-1,-1,5,6,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7357() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,0,6,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7358() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7359() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,2,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7360() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,4,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7361() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,3,-1,-1,-1,5,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7362() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,0,7,-1,-1,-1,0,0,-1,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7363() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,7,2,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7364() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,0,5,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7365() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,0,1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7366() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,0,1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7367() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,0,2,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7368() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,7,5,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7369() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7370() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,5,6,-1,-1,-1,0,0,-1,-1,-1,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7371() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,3,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7372() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,1,-1,-1,-1,5,6,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7373() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,5,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7374() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,7,-1,-1,-1,-1,0,0,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7375() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7376() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,5,6,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7377() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7378() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,2,-1,-1,-1,5,6,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7379() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,7,-1,-1,-1,5,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7380() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7381() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,5,6,-1,-1,-1,0,0,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7382() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,5,6,-1,-1,-1,0,0,-1,-1,-1,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7383() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,5,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7384() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,3,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7385() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,6,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7386() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7387() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,5,6,-1,-1,-1,0,0,-1,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7388() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,5,6,-1,-1,-1,0,0,-1,-1,-1,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7389() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,5,-1,-1,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7390() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,5,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7391() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,5,6,-1,-1,-1,0,0,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7392() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,5,4,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7393() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,5,6,-1,-1,-1,0,0,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7394() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,5,6,-1,-1,-1,0,0,-1,-1,-1,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7395() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,6,4,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7396() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,6,-1,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7397() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,6,1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7398() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7399() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7400() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,6,-1,-1,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7401() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7402() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,0,6,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7403() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,6,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7404() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7405() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,5,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7406() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,0,4,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7407() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,0,5,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7408() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,3,-1,-1,-1,0,5,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7409() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,4,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7410() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,2,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7411() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,0,3,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7412() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,5,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7413() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,4,-1,-1,-1,5,6,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7414() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,0,-1,-1,-1,5,6,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7415() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,5,6,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7416() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,5,6,-1,-1,-1,0,0,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7417() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,5,6,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7418() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,5,6,-1,-1,-1,0,0,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7419() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,5,-1,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7420() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,6,0,-1,-1,-1,0,6,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7421() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,5,-1,-1,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7422() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,5,6,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7423() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7424() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7425() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,6,-1,-1,-1,-1,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7426() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,0,6,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7427() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,0,2,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7428() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,0,-1,-1,-1,0,5,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7429() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,5,6,-1,-1,-1,0,0,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7430() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,5,-1,-1,-1,-1,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7431() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,5,6,-1,-1,-1,0,0,-1,-1,-1,0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7432() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7433() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,0,6,-1,-1,-1,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7434() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,0,6,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7435() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7436() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7437() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,6,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7438() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,2,-1,-1,-1,0,5,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7439() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,5,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7440() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,2,-1,-1,-1,5,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7441() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,5,1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7442() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,0,-1,-1,-1,5,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7443() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7444() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,0,5,-1,-1,-1,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7445() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,0,5,-1,-1,-1,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7446() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,5,2,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7447() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,5,5,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7448() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,5,-1,-1,-1,-1,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7449() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,5,3,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7450() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7451() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,0,5,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7452() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,0,5,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7453() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,5,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7454() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,5,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7455() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,0,4,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7456() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7457() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,4,-1,-1,-1,0,5,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7458() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,4,-1,-1,-1,5,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7459() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7460() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7461() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,0,5,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7462() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,5,-1,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7463() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7464() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,5,-1,-1,-1,0,0,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7465() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,1,-1,-1,-1,0,5,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7466() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,3,-1,-1,-1,0,0,-1,-1,-1,4,-1,-1,-1,-1,5,-1,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7467() {
        assertEquals(true, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7468() {
        assertEquals(false, symKorat.isSat("1,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1,4,-1,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7469() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }

    @Test
    public void TreeMapSolverTest7470() {
        assertEquals(false, symKorat.isSat("1,-1,-1,-1,2,-1,-1,-1,-1,3,-1,-1,-1,-1,4,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"));
    }
	
}
